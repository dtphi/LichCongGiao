<?php

namespace App\Http\Controllers\Admin;

use App\Commons\ServiceContract as Sv;
use App\Rules\Version;
use Illuminate\Http\Request;
use Validator;

class VersionController extends AdminController
{
    /**
     * @var Sv|null
     */
    protected $sv = null;

    /**
     * @author : Phi .
     * VersionController constructor.
     * @param Sv $service
     */
    public function __construct(Sv $service)
    {
        $this->sv = $service;
        parent::__construct();
    }

    /**
     * @author : Phi .
     * insert log to history table .
     */
    public function logAuthenticate()
    {
        // TODO: Change the autogenerated stub
        $actionText = 'バージョン管理画面を閲覧しました。';

        $this->sv->adInsertLog($actionText);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(Request $request)
    {
        $data   = $this->data;
        $errors = [];

        $formData            = $request->all();
        $formData['version'] = isset($formData['next_version']) ? $formData['next_version'] : null;

        $data['title'] = __('iOSバージョン管理 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'  => 'admin_version_index',
            'title' => __('iOSバージョン管理')
        ];

        if ($request->isMethod('post') && $this->__validate($formData, $errors)) {
            $this->__registryExec($errors, $formData);
        }

        $result = $this->sv->getLastVersionByCreatedAt();

        $data['version'] = [
            'id'      => null,
            'version' => ''
        ];
        if ($result) {
            $data['version']['id']      = $result->version_id;
            $data['version']['version'] = $result->version;
        }

        $data['formData'] = $formData;
        $data['errors']   = $errors;

        return view('admin.versions.index', $data);
    }

    /**
     * @author : Phi .
     * @param $errors
     * @param $formData
     */
    private function __registryExec(&$errors, &$formData)
    {
        try {
            $this->sv->adInsertVersion($formData);

        } catch (\PDOException $e) {
            $errors['db_error'][] = $e->getMessage();
        } catch (\Exception $e) {
            $errors['db_error'][] = $e->getMessage();
        }
    }

    /**
     * @author : Phi .
     * @param $formData
     * @param $errors
     * @return bool
     */
    private function __validate(&$formData, &$errors)
    {
        $validator = Validator::make($formData, [
            'version' => ['required', 'string', 'max:20', new Version()]
        ], []);

        $this->_setFormatError($validator, $errors);

        if (!empty($errors)) {
            return false;
        } else {
            return true;
        }
    }
}
