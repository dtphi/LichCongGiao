<?php

namespace App\Http\Controllers\Admin;

use App\Commons\ConstantService;
use App\Services\Contracts\UserContract as UsSv;
use Auth;
use Illuminate\Http\Request;
use Illuminate\Support\ViewErrorBag;
use Validator;

class UserController extends AdminController
{
    /**
     * @var null|UsSv
     */
    protected $usSv = null;

    /**
     * @author : Phi .
     * UserController constructor.
     * @param UsSv $userService
     */
    public function __construct(UsSv $userService)
    {
        $this->usSv = $userService;
        parent::__construct();
    }

    /**
     * @author : Phi .
     * insert log to history table .
     */
    public function logAuthenticate()
    {
        // TODO: Change the autogenerated stub
        $actionText = 'ユーザー一覧画面を閲覧しました。';

        $rName = \request()->route()->getName();
        if ($rName == 'admin.user.registry') {
            $actionText = 'ユーザー新規作成画面を閲覧しました。';
        } elseif ($rName == 'admin.user.activity') {
            $actionText = 'ユーザー行動履歴画面を閲覧しました。';
        } elseif ($rName == 'admin.user.detail') {
            $id         = \request()->route('user_id');
            $member     = $this->usSv->getById($id);
            $actionText = 'ユーザー「' . $member->name_kana . '」を閲覧しました。';
        }

        $this->usSv->adInsertLog($actionText);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(Request $request)
    {
        $data   = $this->data;
        $params = $request->all();

        $data['title'] = __('ユーザー一覧 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'  => 'admin_user_index',
            'title' => __('ユーザー一覧')
        ];

        $data['sort'] = 'registDateDesc';
        if (isset($params['sort'])) {
            $data['sort']                         = $params['sort'];
            $data[self::$textQueryString]['sort'] = $params['sort'];
        }
        $data['nameKana'] = '';
        if (isset($params['kana'])) {
            $data['nameKana']                     = $params['kana'];
            $data[self::$textQueryString]['kana'] = $params['kana'];
        }
        $data['email'] = '';
        if (isset($params['email'])) {
            $data['email']                         = $params['email'];
            $data[self::$textQueryString]['email'] = $params['email'];
        }
        $data['organizationId'] = '';
        if (isset($params['organization_id'])) {
            $data['organizationId']                          = $params['organization_id'];
            $data[self::$textQueryString]['organization_id'] = $params['organization_id'];
        }
        $data['baseId'] = '';
        if (isset($params['base_id'])) {
            $data['baseId']                          = $params['base_id'];
            $data[self::$textQueryString]['base_id'] = $params['base_id'];
        }
        $data['examId'] = '';
        if (isset($params['exam_id'])) {
            $data['examId']                          = $params['exam_id'];
            $data[self::$textQueryString]['exam_id'] = $params['exam_id'];
        }
        $data['pass'] = '';
        if (isset($params['pass'])) {
            $data['pass']                         = $params['pass'];
            $data[self::$textQueryString]['pass'] = $params['pass'];
        }

        $conditions = [];
        if (!empty($data['sort'])) {
            $conditions['sort'] = $data['sort'];
        }
        if (!empty($data['nameKana'])) {
            $conditions['name_kana'] = $data['nameKana'];
        }
        if (!empty($data['email'])) {
            $conditions['email'] = $data['email'];
        }
        if (!empty($data['organizationId'])) {
            $conditions['organization_id'] = $data['organizationId'];
        }
        if (!empty($data['baseId'])) {
            $conditions['base_id'] = $data['baseId'];
        }
        if (!empty($data['pass'])) {
            $conditions['pass'] = $data['pass'];
        }
        if (!empty($data['examId'])) {
            $conditions['exam_id'] = $data['examId'];
        }

        $results = $this->usSv->adGetLists($conditions, $this->getLimit());

        $data[self::$textPerPage] = $this->_getTextPagination($results);
        $data[self::$textStartNo] = $this->getStartNo();
        $data[self::$textPaging]  = $results->appends($data[self::$textQueryString])->links();

        $data['lists'] = [];
        foreach ($results as $key => $result) {
            $result->timeFormat = 'H:m:s';
            $data['lists'][]    = [
                'id'               => $result->user_id,
                'name'             => $result->name_kana,
                'email'            => $result->email,
                'organizationText' => $result->org_text,
                'passedText'       => '',
                'lastLoginDate'    => $result->last_login_date_text,
                'hrefDetail'       => $this->urlHttpBuildQuery('user/detail/' . $result->user_id, $params)
            ];
        }

        $data['registUrl'] = $this->urlHttpBuildQuery('user/regist', $params);

        $data['modal']['delete']['isShow'] = true;
        $data['modal']['delete']['href']   = url('user/delete');

        $data['isMessageDelete'] = false;
        if (session()->get('errors') instanceof ViewErrorBag) {
            foreach (session()->get('errors')->messages() as $key => $value) {
                if ($key == 'action') {
                    $data['isMessageDelete'] = true;
                }
            }
        }

        $data['sorts'] = $this->usSv->sorts;
        $data['orgs']  = ConstantService::ORGS;
        $data['bases'] = [];

        $data['isSelectBase'] = ($data['organizationId'] > ConstantService::ORG_4) ? true : false;
        if ($data['isSelectBase']) {
            $bases = $this->usSv->getDropDownBase($data['organizationId']);
            foreach ($bases->cursor() as $base) {
                $data['bases'][] = [
                    'id'   => $base->base_id,
                    'name' => $base->base_name
                ];
            }
        }
        $data['modal']['js']['select2'] = true;

        $template = 'admin.users.index';

        return view($template, $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @param null $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function activityUser(Request $request, $id = null)
    {
        $data = $this->data;

        $data['title'] = __('ユーザー行動履歴 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_index',
            'title'       => __('ユーザー行動履歴'),
            'parentTitle' => __('ユーザー一覧')
        ];

        $user           = Auth::user();
        $data['userId'] = $user->user_id;
        if ($id) {
            $data['userId'] = $id;
        }

        $conditions = [];
        if (!empty($data['userId'])) {
            $conditions['user_id'] = $data['userId'];
        }

        $results = $this->usSv->adGetActivityLists($conditions, $this->getLimit());

        $data[self::$textPerPage] = $this->_getTextPagination($results);
        $data[self::$textStartNo] = $this->getStartNo();
        $data[self::$textPaging]  = $results->appends($data[self::$textQueryString])->links();

        $data['lists'] = [];
        foreach ($results as $key => $result) {
            $data['lists'][] = [
                'id'        => $result->history_id,
                'createdAt' => $result->created_at,
                'action'    => $result->action
            ];
        }

        $data['hrefDetail'] = route('admin.user.detail', ['user_id' => $data['userId']]);

        $template = 'admin.users.activity';

        return view($template, $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index_2(Request $request)
    {
        $data   = $this->data;
        $params = $request->all();

        $data['title'] = __('ユーザー一覧 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'  => 'admin_user_index',
            'title' => __('ユーザー一覧')
        ];

        $data['sort'] = 'registDateDesc';
        if (isset($params['sort'])) {
            $data['sort']                         = $params['sort'];
            $data[self::$textQueryString]['sort'] = $params['sort'];
        }
        $data['nameKana'] = '';
        if (isset($params['kana'])) {
            $data['nameKana']                     = $params['kana'];
            $data[self::$textQueryString]['kana'] = $params['kana'];
        }
        $data['email'] = '';
        if (isset($params['email'])) {
            $data['email']                         = $params['email'];
            $data[self::$textQueryString]['email'] = $params['email'];
        }
        $data['organizationId'] = '';
        if (isset($params['organization_id'])) {
            $data['organizationId']                          = $params['organization_id'];
            $data[self::$textQueryString]['organization_id'] = $params['organization_id'];
        }
        $data['baseId'] = '';
        if (isset($params['base_id'])) {
            $data['baseId']                          = $params['base_id'];
            $data[self::$textQueryString]['base_id'] = $params['base_id'];
        }
        $data['examId'] = '';
        if (isset($params['exam_id'])) {
            $data['examId']                          = $params['exam_id'];
            $data[self::$textQueryString]['exam_id'] = $params['exam_id'];
        }
        $data['pass'] = '';
        if (isset($params['pass'])) {
            $data['pass']                         = $params['pass'];
            $data[self::$textQueryString]['pass'] = $params['pass'];
        }

        $conditions = [];
        if (!empty($data['sort'])) {
            $conditions['sort'] = $data['sort'];
        }
        if (!empty($data['nameKana'])) {
            $conditions['name_kana'] = $data['nameKana'];
        }
        if (!empty($data['email'])) {
            $conditions['email'] = $data['email'];
        }
        if (!empty($data['organizationId'])) {
            $conditions['organization_id'] = $data['organizationId'];
        }
        if (!empty($data['baseId'])) {
            $conditions['base_id'] = $data['baseId'];
        }
        if (!empty($data['pass'])) {
            $conditions['pass'] = $data['pass'];
        }
        if (!empty($data['examId'])) {
            $conditions['exam_id'] = $data['examId'];
        }

        $results = $this->usSv->adGetLists($conditions, $this->getLimit());

        $data[self::$textPerPage] = $this->_getTextPagination($results);
        $data[self::$textStartNo] = $this->getStartNo();
        $data[self::$textPaging]  = $results->appends($data[self::$textQueryString])->links();

        $data['lists'] = [];
        foreach ($results as $key => $result) {
            $result->timeFormat = 'H:m:s';
            $data['lists'][]    = [
                'id'               => $result->user_id,
                'name'             => $result->name_kana,
                'email'            => $result->email,
                'organizationText' => $result->org_text,
                'passedText'       => '',
                'lastLoginDate'    => $result->last_login_date_text,
                'hrefDetail'       => $this->urlHttpBuildQuery('user/detail/' . $result->user_id, $params)
            ];
        }

        $data['registUrl'] = url('user/regist');

        $data['modal']['delete']['isShow'] = true;
        $data['modal']['delete']['href']   = url('user/delete');

        $data['isMessageDelete'] = false;
        if (session()->get('errors') instanceof ViewErrorBag) {
            foreach (session()->get('errors')->messages() as $key => $value) {
                if ($key == 'action') {
                    $data['isMessageDelete'] = true;
                }
            }
        }

        $data['sorts'] = $this->usSv->sorts;
        $data['orgs']  = $this->usSv->getDropOrg();
        $data['bases'] = [];

        $data['isSelectBase'] = ($data['organizationId'] > ConstantService::ORG_4) ? true : false;
        if ($data['isSelectBase']) {
            $bases = $this->usSv->getDropDownBase($data['organizationId']);
            foreach ($bases->cursor() as $base) {
                $data['bases'][] = [
                    'id'   => $base->base_id,
                    'name' => $base->base_name
                ];
            }
        }
        $data['modal']['js']['select2'] = true;

        $template = 'admin.users.index2';

        return view($template, $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index_3(Request $request)
    {
        $data   = $this->data;
        $params = $request->all();

        $data['title'] = __('ユーザー一覧 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'  => 'admin_user_index',
            'title' => __('ユーザー一覧')
        ];

        $data['sort'] = 'registDateDesc';
        if (isset($params['sort'])) {
            $data['sort']                         = $params['sort'];
            $data[self::$textQueryString]['sort'] = $params['sort'];
        }
        $data['nameKana'] = '';
        if (isset($params['kana'])) {
            $data['nameKana']                     = $params['kana'];
            $data[self::$textQueryString]['kana'] = $params['kana'];
        }
        $data['email'] = '';
        if (isset($params['email'])) {
            $data['email']                         = $params['email'];
            $data[self::$textQueryString]['email'] = $params['email'];
        }
        $data['examId'] = '';
        if (isset($params['exam_id'])) {
            $data['examId']                          = $params['exam_id'];
            $data[self::$textQueryString]['exam_id'] = $params['exam_id'];
        }
        $data['pass'] = '';
        if (isset($params['pass'])) {
            $data['pass']                         = $params['pass'];
            $data[self::$textQueryString]['pass'] = $params['pass'];
        }

        $conditions = [];
        if (!empty($data['sort'])) {
            $conditions['sort'] = $data['sort'];
        }
        if (!empty($data['nameKana'])) {
            $conditions['name_kana'] = $data['nameKana'];
        }
        if (!empty($data['email'])) {
            $conditions['email'] = $data['email'];
        }
        if (!empty($data['pass'])) {
            $conditions['pass'] = $data['pass'];
        }
        if (!empty($data['examId'])) {
            $conditions['exam_id'] = $data['examId'];
        }

        $results = $this->usSv->adGetLists($conditions, $this->getLimit());

        $data[self::$textPerPage] = $this->_getTextPagination($results);
        $data[self::$textStartNo] = $this->getStartNo();
        $data[self::$textPaging]  = $results->appends($data[self::$textQueryString])->links();

        $data['lists'] = [];
        foreach ($results as $key => $result) {
            $result->timeFormat = 'H:m:s';
            $data['lists'][]    = [
                'id'               => $result->user_id,
                'name'             => $result->name_kana,
                'email'            => $result->email,
                'organizationText' => $result->org_text,
                'passedText'       => '',
                'lastLoginDate'    => $result->last_login_date_text,
                'hrefDetail'       => $this->urlHttpBuildQuery('user/detail/' . $result->user_id, $params)
            ];
        }

        $data['registUrl'] = url('user/regist');

        $data['modal']['delete']['isShow'] = true;
        $data['modal']['delete']['href']   = url('user/delete');

        $data['isMessageDelete'] = false;
        if (session()->get('errors') instanceof ViewErrorBag) {
            foreach (session()->get('errors')->messages() as $key => $value) {
                if ($key == 'action') {
                    $data['isMessageDelete'] = true;
                }
            }
        }

        $data['sorts'] = $this->usSv->sorts;
        $data['orgs']  = ConstantService::ORGS;

        $template = 'admin.users.index3';

        return view($template, $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @param null $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|\Illuminate\View\View
     */
    public function detail(Request $request, $id = null)
    {
        $data   = $this->data;
        $errors = [];
        $member = $this->usSv->getById($id);

        $data['backUrl'] = $this->urlHttpBuildQuery('user');

        $formData                    = $request->all();
        $formData['name_kana']       = isset($formData['name_kana']) ? $formData['name_kana'] : $member->name_kana;
        $formData['email']           = isset($formData['email']) ? $formData['email'] : $member->email;
        $formData['organization_id'] = isset($formData['organization_id']) ? $formData['organization_id'] : $member->organization_id;
        $formData['password']        = isset($formData['password']) ? $formData['password'] : 'password';
        $formData['status']          = isset($formData['status']) ? $formData['status'] : $member->status;
        $formData['email_old']       = $member->email;

        if ($request->isMethod('post')
            && $this->__editValidate($formData, $errors)) {
            $this->__editExec($errors, $formData, $member);

            if (empty($errors)) {
                return redirect($this->_getSuccessPathRedirect('user'));
            }
        } else {
            $formData['base_id'] = isset($formData['base_id']) ? $formData['base_id'] : $member->base_id;
        }

        $data['title'] = __('ユーザー詳細 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_registry',
            'title'       => __('ユーザー詳細'),
            'parentTitle' => 'ユーザー一覧'
        ];

        $member->timeFormat  = 'H:m:s';
        $data['member']      = [
            'id'             => $member->user_id,
            'nameKana'       => $formData['name_kana'],
            'email'          => $formData['email'],
            'organizationId' => $formData['organization_id'],
            'baseId'         => $formData['base_id'],
            'status'         => $formData['status'],
            'lastLoginDate'  => $member->last_login_date_text,
            'hrefActivity'   => route('admin.user.activity', ['user_id' => $member->user_id])
        ];
        $data['memberExams'] = [];
        /*foreach ($member->userExams as $userExam) {
            if (!empty($userExam->exam_title_text)) {
                $data['memberExams'][] = [
                    'examTitle'    => $userExam->exam_title_text,
                    'testDateText' => $userExam->test_date_text,
                    'passedText'   => $userExam->passed_text
                ];
            }
        }*/

        $data['submitForm'] = route('admin.user.detail', ['id' => $id]);

        $data['errors'] = $errors;
        $data['orgs']   = ConstantService::ORGS;
        $data['bases']  = [];

        $data['isSelectBase'] = ($formData['organization_id'] > ConstantService::ORG_4) ? true : false;
        if ($data['isSelectBase']) {
            $bases = $this->usSv->getDropDownBase($formData['organization_id']);
            foreach ($bases->cursor() as $base) {
                $data['bases'][] = [
                    'id'   => $base->base_id,
                    'name' => $base->base_name
                ];
            }
        }
        $data['modal']['js']['select2'] = true;

        return view('admin.users.detail', $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @param $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|\Illuminate\View\View
     */
    public function detail_2(Request $request, $id)
    {
        $data   = $this->data;
        $errors = [];
        $member = $this->usSv->getById($id);

        $data['backUrl'] = $this->urlHttpBuildQuery('user');

        $formData                    = $request->all();
        $formData['name_kana']       = isset($formData['name_kana']) ? $formData['name_kana'] : $member->name_kana;
        $formData['email']           = isset($formData['email']) ? $formData['email'] : $member->email;
        $formData['organization_id'] = isset($formData['organization_id']) ? $formData['organization_id'] : $member->organization_id;
        $formData['password']        = isset($formData['password']) ? $formData['password'] : 'password';
        $formData['status']          = isset($formData['status']) ? $formData['status'] : $member->status;
        $formData['email_old']       = $member->email;

        if ($request->isMethod('post')
            && $this->__editValidate($formData, $errors)) {
            $this->__editExec($errors, $formData, $member);

            if (empty($errors)) {
                return redirect($this->_getSuccessPathRedirect('user'));
            }
        } else {
            $formData['base_id'] = isset($formData['base_id']) ? $formData['base_id'] : $member->base_id;
        }

        $data['title'] = __('ユーザー登録 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_registry',
            'title'       => __('ユーザー登録'),
            'parentTitle' => 'ユーザー一覧'
        ];

        $member->timeFormat  = 'H:m:s';
        $data['member']      = [
            'id'             => $member->user_id,
            'nameKana'       => $formData['name_kana'],
            'email'          => $formData['email'],
            'organizationId' => $formData['organization_id'],
            'baseId'         => $formData['base_id'],
            'status'         => $formData['status'],
            'lastLoginDate'  => $member->last_login_date_text,
            'hrefActivity'   => route('admin.user.activity', ['user_id' => $member->user_id])
        ];
        $data['memberExams'] = [];
        /*foreach ($member->userExams as $userExam) {
            $data['memberExams'][] = [
                'examTitle'    => $userExam->exam_title_text,
                'testDateText' => $userExam->test_date_text,
                'passedText'   => $userExam->passed_text
            ];
        }*/

        $data['submitForm'] = route('admin.user.detail', ['id' => $id]);

        $data['errors'] = $errors;
        $data['orgs']   = $this->usSv->getDropOrg();
        $data['bases']  = [];

        $data['isSelectBase'] = ($formData['organization_id'] > ConstantService::ORG_4) ? true : false;
        if ($data['isSelectBase']) {
            $bases = $this->usSv->getDropDownBase($formData['organization_id']);
            foreach ($bases->cursor() as $base) {
                $data['bases'][] = [
                    'id'   => $base->base_id,
                    'name' => $base->base_name
                ];
            }
        }

        $data['modal']['js']['select2'] = true;

        return view('admin.users.detail2', $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|\Illuminate\View\View
     */
    public function detail_3(Request $request, $id)
    {
        $data   = $this->data;
        $errors = [];
        $member = $this->usSv->getById($id);

        $data['backUrl'] = $this->urlHttpBuildQuery('user');

        $formData                    = $request->all();
        $formData['name_kana']       = isset($formData['name_kana']) ? $formData['name_kana'] : $member->name_kana;
        $formData['email']           = isset($formData['email']) ? $formData['email'] : $member->email;
        $formData['organization_id'] = isset($formData['organization_id']) ? $formData['organization_id'] : $member->organization_id;
        $formData['base_id']         = isset($formData['base_id']) ? $formData['base_id'] : $member->base_id;
        $formData['password']        = isset($formData['password']) ? $formData['password'] : 'password';
        $formData['status']          = isset($formData['status']) ? $formData['status'] : $member->status;
        $formData['email_old']       = $member->email;

        if ($request->isMethod('post')
            && $this->__editValidate($formData, $errors)) {
            $this->__editExec($errors, $formData, $member);

            if (empty($errors)) {
                return redirect($this->_getSuccessPathRedirect('user'));
            }
        }

        $data['title'] = __('ユーザー登録 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_registry',
            'title'       => __('ユーザー登録'),
            'parentTitle' => 'ユーザー一覧'
        ];

        $member->timeFormat  = 'H:m:s';
        $data['member']      = [
            'id'             => $member->user_id,
            'nameKana'       => $formData['name_kana'],
            'email'          => $formData['email'],
            'organizationId' => $formData['organization_id'],
            'baseId'         => $formData['base_id'],
            'status'         => $formData['status'],
            'lastLoginDate'  => $member->last_login_date_text,
            'baseName'       => $member->base_name,
            'hrefActivity'   => route('admin.user.activity', ['user_id' => $member->user_id])
        ];
        $data['memberExams'] = [];
        /*foreach ($member->userExams as $userExam) {
            $data['memberExams'][] = [
                'examTitle'    => $userExam->exam_title_text,
                'testDateText' => $userExam->test_date_text,
                'passedText'   => $userExam->passed_text
            ];
        }*/

        $data['submitForm'] = route('admin.user.detail', ['id' => $id]);

        $data['errors'] = $errors;
        $data['orgs']   = $this->usSv->getDropOrg();

        return view('admin.users.detail3', $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|\Illuminate\View\View
     */
    public function registry(Request $request)
    {
        $data   = $this->data;
        $errors = [];

        $formData                    = $request->all();
        $formData['name_kana']       = isset($formData['name_kana']) ? $formData['name_kana'] : null;
        $formData['email']           = isset($formData['email']) ? $formData['email'] : null;
        $formData['organization_id'] = isset($formData['organization_id']) ? $formData['organization_id'] : null;
        $formData['base_id']         = isset($formData['base_id']) ? $formData['base_id'] : null;
        $formData['password']        = isset($formData['password']) ? $formData['password'] : '';

        if ($request->isMethod('post')
            && $this->__validate($formData, $errors)) {
            $this->__registryExec($errors, $formData);

            if (empty($errors)) {
                return redirect($this->_getSuccessPathRedirect('user'));
            }
        }

        $data['title'] = __('ユーザー登録 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_registry',
            'title'       => __('ユーザー登録'),
            'parentTitle' => 'ユーザー一覧'
        ];

        $data['formData']    = $formData;
        $data['errors']      = $errors;
        $data['prefectures'] = ConstantService::PREFECTURE;
        $data['types']       = ConstantService::BASE_TYPE;
        $data['orgs']        = ConstantService::ORGS;

        $data['modal']['js']['select2'] = true;

        return view('admin.users.registry', $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|\Illuminate\View\View
     */
    public function registry_2(Request $request)
    {
        $data   = $this->data;
        $errors = [];

        $formData                    = $request->all();
        $formData['name_kana']       = isset($formData['name_kana']) ? $formData['name_kana'] : null;
        $formData['email']           = isset($formData['email']) ? $formData['email'] : null;
        $formData['organization_id'] = isset($formData['organization_id']) ? $formData['organization_id'] : null;
        $formData['base_id']         = isset($formData['base_id']) ? $formData['base_id'] : null;
        $formData['password']        = isset($formData['password']) ? $formData['password'] : '';

        if ($request->isMethod('post')
            && $this->__validate($formData, $errors)) {
            $this->__registryExec($errors, $formData);

            if (empty($errors)) {
                return redirect($this->_getSuccessPathRedirect('user'));
            }
        }

        $data['title'] = __('ユーザー登録 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_registry',
            'title'       => __('ユーザー登録'),
            'parentTitle' => 'ユーザー一覧'
        ];

        $data['formData']    = $formData;
        $data['errors']      = $errors;
        $data['prefectures'] = ConstantService::PREFECTURE;
        $data['types']       = ConstantService::BASE_TYPE;
        $data['orgs']        = $this->usSv->getDropOrg();

        $data['modal']['js']['select2'] = true;

        return view('admin.users.registry2', $data);
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector|\Illuminate\View\View
     */
    public function registry_3(Request $request)
    {
        $data   = $this->data;
        $errors = [];

        $formData                    = $request->all();
        $formData['name_kana']       = isset($formData['name_kana']) ? $formData['name_kana'] : null;
        $formData['email']           = isset($formData['email']) ? $formData['email'] : null;
        $formData['organization_id'] = isset($formData['organization_id']) ? $formData['organization_id'] : null;
        $formData['base_id']         = isset($formData['base_id']) ? $formData['base_id'] : null;
        $formData['password']        = isset($formData['password']) ? $formData['password'] : '';

        if ($request->isMethod('post')
            && $this->__validate($formData, $errors)) {
            $this->__registryExec($errors, $formData);

            if (empty($errors)) {
                return redirect($this->_getSuccessPathRedirect('user'));
            }
        }

        $data['title'] = __('ユーザー登録 | 121 ROUND APP');
        /**
         * Breadcrumb .
         */
        $data['breadcrumb'] = [
            'name'        => 'admin_user_registry',
            'title'       => __('ユーザー登録'),
            'parentTitle' => 'ユーザー一覧'
        ];

        $data['formData']    = $formData;
        $data['errors']      = $errors;
        $data['prefectures'] = ConstantService::PREFECTURE;
        $data['types']       = ConstantService::BASE_TYPE;
        $data['orgs']        = $this->usSv->getDropOrg();
        $data['baseName']    = Auth::user()->base_name;

        return view('admin.users.registry3', $data);
    }

    /**
     * @author : Phi .
     * @param $errors
     * @param $formData
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    private function __registryExec(&$errors, &$formData)
    {
        try {
            $this->usSv->adInsert($formData);

        } catch (\PDOException $e) {
            $errors['db_error'][] = $e->getMessage();
        } catch (\Exception $e) {
            $errors['db_error'][] = $e->getMessage();
        }
    }

    /**
     * @author : Phi .
     * @param $formData
     * @param $errors
     * @return bool
     */
    private function __validate(&$formData, &$errors)
    {
        $validator = Validator::make($formData, [
            'email'           => ['required', 'string', 'email', 'max:200', 'unique:users'],
            'password'        => ['required', 'string', 'min:8'],
            'name_kana'       => 'required|string|max:30',
            'organization_id' => ['required', 'max:4']
        ], []);

        $this->_setFormatError($validator, $errors);

        if (!empty($errors)) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @author : Phi .
     * @param $errors
     * @param $formData
     * @param $member
     */
    private function __editExec(&$errors, &$formData, &$member)
    {
        try {
            $this->usSv->adUpdate($formData, $member);

        } catch (\PDOException $e) {
            $errors['db_error'][] = $e->getMessage();
        } catch (\Exception $e) {
            $errors['db_error'][] = $e->getMessage();
        }
    }

    /**
     * @author : Phi .
     * @param $formData
     * @param $errors
     * @return bool
     */
    private function __editValidate(&$formData, &$errors)
    {
        $formData['base_id'] = isset($formData['base_id']) ? $formData['base_id'] : null;
        $vEmail              = ['required', 'string', 'email', 'max:200'];
        if ($formData['email'] != $formData['email_old']) {
            $vEmail = ['required', 'string', 'email', 'max:200', 'unique:users'];
        }
        $vPass = ['present', 'nullable'];
        if (!empty($formData['password'])) {
            $vPass = ['string', 'min:8'];
        }

        $validator = Validator::make($formData, [
            'email'           => $vEmail,
            'password'        => $vPass,
            'name_kana'       => 'required|string|max:30',
            'organization_id' => ['required', 'max:4']
        ], []);

        $this->_setFormatError($validator, $errors);

        if (!empty($errors)) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @author : Phi .
     * @param Request $request
     * @return $this
     */
    public function delete(Request $request)
    {
        $errors   = [];
        $formData = $request->all();

        $id   = isset($formData['user_id']) ? $formData['user_id'] : null;
        $user = $this->usSv->getById($id);

        try {

            $user->delete();

        } catch (\PDOException $e) {
            $errors['db_error'][] = $e->getMessage();
        } catch (\Exception $e) {
            $errors['db_error'][] = $e->getMessage();
        }

        if (empty($errors)) {
            $errors['action'] = [
                'status' => 2000,
                'name'   => 'delete'
            ];
        }

        return back()->withErrors($errors)->withInput();
    }
}
