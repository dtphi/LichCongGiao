<?php

namespace App\Models;

use App\Commons\BaseModel as Model;
use App\Commons\ConstantService;
use App\Constants\Tables;

class Information extends Model
{
    /**
     * @var string
     */
    protected $table = Tables::Informations;

    /**
     * @var string
     */
    protected $primaryKey = 'info_id';

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function base()
    {
        return $this->belongsTo('App\Models\Base', 'base_id');
    }

    /**
     * @author : Phi .
     * @param $value
     * @return mixed
     */
    public function getBaseNameTextAttribute($value)
    {
        $value = '-';
        if (!is_null($this->base)) {
            $value = $this->base->base_name;
        }

        return $value;
    }

    /**
     * @author : Phi .
     * @param $query
     * @param string $status
     * @return mixed
     */
    public function scopeFilterStatus($query, $status = '')
    {
        if (!($status != '')) {
            return $query->where($this->table . '.status', $status);
        }

        return $query;
    }

    /**
     * @author : Phi .
     * @param $value
     * @return array
     */
    public function getStartDateTextAttribute($value)
    {
        $value = [
            'date' => '',
            'time' => ''
        ];
        if ($this->disp_start_date) {
            $value['date'] = date_ymd_hms($this->disp_start_date);
            $value['time'] = date_ymd_hms($this->disp_start_date, $this->timeFormat);
        }

        return $value;
    }

    /**
     * @author : Phi .
     * @param $value
     * @return array
     */
    public function getEndDateTextAttribute($value)
    {
        $value = [
            'date' => '',
            'time' => ''
        ];
        if ($this->disp_end_date) {
            $value['date'] = date_ymd_hms($this->disp_end_date);
            $value['time'] = date_ymd_hms($this->disp_end_date, $this->timeFormat);
        } else {
            $value['date'] = '-';
        }

        return $value;
    }

    /**
     * @author : Phi .
     * @param $value
     * @return string
     */
    public function getTypeTextAttribute($value)
    {
        $value = '-';

        if ($this->type && isset(ConstantService::INFO_TYPE[$this->type])) {
            $value = ConstantService::INFO_TYPE[$this->type];
        }

        return $value;
    }

    /**
     * @author : Phi .
     * @param $value
     * @return string
     */
    public function getStatusTextAttribute($value)
    {
        $value = ConstantService::INFO_STATUS[0];

        if ($this->status && isset(ConstantService::INFO_STATUS[$this->status])) {
            $value = ConstantService::INFO_STATUS[$this->status];
        }

        return $value;
    }

    /**
     * @author : Phi .
     * @param $value
     * @return string
     */
    public function getDispDateTextAttribute($value)
    {
        $startTimestamp  = strtotime($this->disp_start_date);
        $systemTimestamp = strtotime('now');

        if (is_null($this->disp_end_date)) {
            if ($startTimestamp <= $systemTimestamp) {
                $value = '公開中';
            } else {
                $value = '非公開';
            }
        } else {
            $endTimestamp = strtotime($this->disp_end_date);

            if (($startTimestamp <= $systemTimestamp) && ($systemTimestamp <= $endTimestamp)) {
                $value = '公開中';
            }

            if (($startTimestamp > $systemTimestamp) || ($systemTimestamp > $endTimestamp)) {
                $value = '非公開';
            }
        }

        return $value;
    }

    /**
     * @author : Phi .
     * @param $query
     * @param null $type
     * @return mixed
     */
    public function scopeFilterOrg($query, $type = null)
    {
        // TODO: Change the autogenerated stub

        if ($type) {
            $query->where($this->table . '.type', $type);
        }

        return $query;
    }

    /**
     * @author : Phi .
     * @param $query
     * @param null $base_id
     * @return mixed
     */
    public function scopeFilterBaseId($query, $base_id = null)
    {
        if ($base_id) {
            $query->where($this->table . '.base_id', $base_id);
        }

        return $query;
    }

    /**
     * @author : Phi .
     * @param $query
     * @param null $type
     * @return mixed
     */
    public function scopeFilterType($query, $type = null)
    {
        $query->where($this->table . '.type', $type);

        return $query;
    }

    /**
     * @author : Phi .
     * @param $query
     * @param null $base_id
     * @return mixed
     */
    public function scopeFilterBaseIdOrNull($query, $base_id = null)
    {
        $query->where($this->table . '.base_id', $base_id)
            ->orWhere($this->table . '.base_id', null);

        return $query;
    }
}
