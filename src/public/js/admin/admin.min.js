/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./mock/admin/src/js/admin.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./mock/admin/src/js/admin.js":
/*!************************************!*\
  !*** ./mock/admin/src/js/admin.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libraries_sweetalert2_all__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libraries/sweetalert2.all */ "./mock/admin/src/js/libraries/sweetalert2.all.js");
/* harmony import */ var _libraries_sweetalert2_all__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_libraries_sweetalert2_all__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _libraries_bootstrap_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libraries/bootstrap.min */ "./mock/admin/src/js/libraries/bootstrap.min.js");
/* harmony import */ var _libraries_bootstrap_min__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_libraries_bootstrap_min__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _libraries_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./libraries/app */ "./mock/admin/src/js/libraries/app.js");
/* harmony import */ var _libraries_app__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_libraries_app__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _libraries_air_datepicker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./libraries/air-datepicker */ "./mock/admin/src/js/libraries/air-datepicker.js");
/* harmony import */ var _libraries_air_datepicker__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_libraries_air_datepicker__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _libraries_jquery_tablesorter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./libraries/jquery.tablesorter */ "./mock/admin/src/js/libraries/jquery.tablesorter.js");
/* harmony import */ var _libraries_jquery_tablesorter__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_libraries_jquery_tablesorter__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _libraries_jquery_sortable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./libraries/jquery.sortable */ "./mock/admin/src/js/libraries/jquery.sortable.js");
/* harmony import */ var _libraries_jquery_sortable__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_libraries_jquery_sortable__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _initialize_basic_initialize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./initialize/_basic-initialize */ "./mock/admin/src/js/initialize/_basic-initialize.js");
/* harmony import */ var _initialize_table_control_initialize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./initialize/_table-control-initialize */ "./mock/admin/src/js/initialize/_table-control-initialize.js");
/* harmony import */ var _initialize_form_initialize__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./initialize/_form-initialize */ "./mock/admin/src/js/initialize/_form-initialize.js");











/***/ }),

/***/ "./mock/admin/src/js/controller/_basic.js":
/*!************************************************!*\
  !*** ./mock/admin/src/js/controller/_basic.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_listener */ "./mock/admin/src/js/util/_listener.js");
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _model_basic_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/_basic-model */ "./mock/admin/src/js/model/_basic-model.js");
/**
 * @file Basic Controller
 */



var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var instance = null;

/**
 * @classname Basic
 * @classdesc Basic Controller
 */

var Basic = function () {

	/**
  * @constructor
  */
	function Basic() {
		_classCallCheck(this, Basic);

		if (instance) {
			return instance;
		}
		console.log('Basic.constructor');
		this._model = new _model_basic_model__WEBPACK_IMPORTED_MODULE_2__["default"]();
		this._listener = new _util_listener__WEBPACK_IMPORTED_MODULE_0__["default"]();

		instance = this;
		return instance;
	}

	_createClass(Basic, [{
		key: 'on',


		/**
   * listener on
   *
   * @memberof Basic
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function on(name, fn) {
			this._listener.on(name, fn);
		}
	}, {
		key: 'off',


		/**
   * listener off
   *
   * @memberof Basic
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function off(name, fn) {
			this._listener.off(name, fn);
		}
	}]);

	return Basic;
}();

/* harmony default export */ __webpack_exports__["default"] = (Basic);

/***/ }),

/***/ "./mock/admin/src/js/controller/_form.js":
/*!***********************************************!*\
  !*** ./mock/admin/src/js/controller/_form.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_listener */ "./mock/admin/src/js/util/_listener.js");
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _model_form_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/_form-model */ "./mock/admin/src/js/model/_form-model.js");
/* harmony import */ var _view_form_form_validate_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view/form/_form-validate-view */ "./mock/admin/src/js/view/form/_form-validate-view.js");
/* harmony import */ var _template_template__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../template/_template */ "./mock/admin/src/js/template/_template.js");
/* harmony import */ var _view_form_form_add_question_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../view/form/_form-add-question-view */ "./mock/admin/src/js/view/form/_form-add-question-view.js");
/* harmony import */ var _view_form_form_delete_question_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../view/form/_form-delete-question-view */ "./mock/admin/src/js/view/form/_form-delete-question-view.js");
/* harmony import */ var _view_form_form_add_answer_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../view/form/_form-add-answer-view */ "./mock/admin/src/js/view/form/_form-add-answer-view.js");
/* harmony import */ var _view_form_form_delete_answer_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../view/form/_form-delete-answer-view */ "./mock/admin/src/js/view/form/_form-delete-answer-view.js");
/**
 * @file Form Controller
 */



var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }











var instance = null;

/**
 * @classname Form
 * @classdesc Form Controller
 */

var Form = function () {

	/**
  * @constructor
  */
	function Form() {
		var _this = this;

		_classCallCheck(this, Form);

		if (instance) {
			return instance;
		}
		console.log('Form.constructor');
		this._listener = new _util_listener__WEBPACK_IMPORTED_MODULE_0__["default"]();
		this._$form = null;
		this._submit = true;

		this._restRequiredNum = 0;

		this._prAreaNo = 1;

		// image upload
		this._model = new _model_form_model__WEBPACK_IMPORTED_MODULE_2__["default"]();
		this._imageId = null;
		this._type = null;
		this._imageNo = null;
		this._model.on('uploadMovieComplete', function () {
			_this._movieData = _this._model._data;
			_this._listener.trigger('uploadMovieComplete');
		});
		this._model.on('uploadPouchComplete', function () {
			_this._pouchData = _this._model._data;
			_this._listener.trigger('uploadPouchComplete');
		});
		this._model.on('uploadScriptComplete', function () {
			_this._scriptData = _this._model._data;
			_this._listener.trigger('uploadScriptComplete');
		});
		this._model.on('uploadPdfComplete', function () {
			_this._pdfData = _this._model._data;
			_this._listener.trigger('uploadPdfComplete');
		});
		this._model.on('getBaseComplete', function () {
			_this._base = _this._model._data;
			_this._listener.trigger('getBaseComplete');
		});

		this._questionNum = parseInt($('.list-question').attr('data-question-num'));
		this._answerNum = null;

		instance = this;
		return instance;
	}

	_createClass(Form, [{
		key: 'completePreProcessing',


		/**
   * 前処理終了
   *
   * @memberof Form
   * @param {jQuery} $form - フォームオブジェクト
   * @return {undefined}
   */
		value: function completePreProcessing($form) {
			console.log('Form.completePreProcessing');
			this._$form = $form;
			this._listener.trigger('completePreProcessing');
		}
	}, {
		key: 'validate',


		/**
   * バリデーションチェック
   *
   * @memberof Form
   * @param {jQuery} $form - フォームオブジェクト
   * @return {undefined}
   */
		value: function validate($form) {
			var _this2 = this;

			console.log('Form.validate');
			this._$form = $form;
			this._listener.trigger('validate');
			setTimeout(function () {
				_this2._listener.trigger('completeValidate');
			}, 500);
		}
	}, {
		key: 'validateModal',


		/**
   * バリデーションチェック
   *
   * @memberof Form
   * @param {jQuery} $form - フォームオブジェクト
   * @return {undefined}
   */
		value: function validateModal($form) {
			console.log('Form.validate');
			this._$form = $form;
			this._listener.trigger('validate');
		}
	}, {
		key: 'completePostProcessing',


		/**
   * 後処理終了
   *
   * @memberof Form
   * @param {jQuery} $form - フォームオブジェクト
   * @return {undefined}
   */
		value: function completePostProcessing($form) {
			console.log('Form.completePostProcessing');
			this._$form = $form;
			this._listener.trigger('completePostProcessing');
		}
	}, {
		key: 'uploadFile',


		/**
   * 画像アップロード
   *
   * @memberof Form
   * @param {blob} file - ファイル
   * @param {string} type - タイプ 1:ロゴ 2:店舗写真 3:商品写真
   * @return {undefined}
   */
		value: function uploadFile(file, type) {
			console.log('Form.uploadFile');
			this._type = type;
			this._model.uploadFile(file, type);
		}
	}, {
		key: 'deleteFile',


		/**
   * 画像削除（全体）
   *
   * @memberof Form
   * @param {string} imageId - イメージID
   * @return {undefined}
   */
		value: function deleteFile(fileId) {
			console.log('Form.deleteImage imageId:' + fileId);
			this._fileId = fileId;
			this._model.deleteFile(fileId);
		}
	}, {
		key: 'getBase',


		/**
   * 事務局取得
   *
   * @memberof Form
   * @param {number} type - 統括タイプ
   * @return {undefined}
   */
		value: function getBase(type) {
			console.log('Form.getBase');
			this._model.getBase(type);
		}
	}, {
		key: 'addQuestion',


		/**
   * 質問追加
   *
   * @memberof Form
   * @return {undefined}
   */
		value: function addQuestion() {
			var _this3 = this;

			console.log('Form.addQuestion');
			$('.list-question .list-item .btn').hide();
			this._questionNum++;
			var $listQuestion = $('.list-question');
			$listQuestion.attr('data-question-num', this._questionNum);
			var additionalQuestion = _template_template__WEBPACK_IMPORTED_MODULE_4__["default"].addQuestion(this._questionNum);
			$listQuestion.append(additionalQuestion);
			var $lastQuestion = $('.list-question .list-item:last-child');
			$lastQuestion.find('.validate').each(function (idx, e) {
				var $e = $(e);
				_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_validate_view__WEBPACK_IMPORTED_MODULE_3__["default"], $e, [$e, _this3]);
			});
			var $addQuestion = $lastQuestion.find('.btn-add-question');
			var $deleteQuestion = $lastQuestion.find('.btn-delete-question');
			var $addAnswer = $lastQuestion.find('.btn-add-answer');
			_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_delete_question_view__WEBPACK_IMPORTED_MODULE_6__["default"], $deleteQuestion, [$deleteQuestion, this]);
			_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_add_answer_view__WEBPACK_IMPORTED_MODULE_7__["default"], $addAnswer, [$addAnswer, this]);
			if (this._questionNum >= window.const.test.MAX_QUESTION_NUM) {
				$addQuestion.hide();
			} else {
				_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_add_question_view__WEBPACK_IMPORTED_MODULE_5__["default"], $addQuestion, [$addQuestion, this]);
			}
			console.log('answerNum is ' + this._answerNum);
		}
	}, {
		key: 'addAnswer',


		/**
   * 回答追加
   *
   * @memberof Form
   * @return {undefined}
   */
		value: function addAnswer() {
			var _this4 = this;

			console.log('Form.addAnswer');
			$('.list-answers .list-item .btn').hide();
			var $lastQuestion = $('.list-question .list-item:last-child');
			this._answerNum = parseInt($lastQuestion.find('.list-answers').attr('data-answer-num'));
			this._answerNum++;
			$('.list-answers').attr('data-answer-num', this._answerNum);
			var additionalAnswer = _template_template__WEBPACK_IMPORTED_MODULE_4__["default"].addAnswer(this._questionNum, this._answerNum);
			$('.list-question > .list-item:last-child .list-answers').append(additionalAnswer);
			var $lastAnswer = $('.list-answers .list-item:last-child');
			$lastAnswer.find('.validate').each(function (idx, e) {
				var $e = $(e);
				_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_validate_view__WEBPACK_IMPORTED_MODULE_3__["default"], $e, [$e, _this4]);
			});
			var $addAnswer = $lastAnswer.find('.btn-add-answer');
			var $deleteAnswer = $lastAnswer.find('.btn-delete-answer');
			_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_delete_answer_view__WEBPACK_IMPORTED_MODULE_8__["default"], $deleteAnswer, [$deleteAnswer, this]);
			if (this._answerNum >= window.const.test.MAX_ANSWER_NUM) {
				$addAnswer.hide();
			} else {
				_util_apply_class__WEBPACK_IMPORTED_MODULE_1__["default"].apply(_view_form_form_add_answer_view__WEBPACK_IMPORTED_MODULE_7__["default"], $addAnswer, [$addAnswer, this]);
			}
		}
	}, {
		key: 'on',


		/**
   * listener on
   *
   * @memberof Form
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function on(name, fn) {
			this._listener.on(name, fn);
		}
	}, {
		key: 'off',


		/**
   * listener off
   *
   * @memberof Form
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function off(name, fn) {
			this._listener.off(name, fn);
		}
	}]);

	return Form;
}();

/* harmony default export */ __webpack_exports__["default"] = (Form);

/***/ }),

/***/ "./mock/admin/src/js/controller/_table.js":
/*!************************************************!*\
  !*** ./mock/admin/src/js/controller/_table.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_listener */ "./mock/admin/src/js/util/_listener.js");
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file Table Controller
 */



var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var instance = null;

/**
 * @classname Table
 * @classdesc Table Controller
 */

var Table = function () {

	/**
  * @constructor
  */
	function Table() {
		_classCallCheck(this, Table);

		if (instance) {
			return instance;
		}
		console.log('Table.constructor');
		this._listener = new _util_listener__WEBPACK_IMPORTED_MODULE_0__["default"]();

		this._error = false;
		this._open = false;

		instance = this;
		return instance;
	}

	_createClass(Table, [{
		key: 'search',


		/**
   * 検索
   *
   * @memberof Table
   * @return {undefined}
   */
		value: function search() {
			console.log('Table.search');
			this._error = false;
			var query = this._getSearchQuery();
			query = Table._setSort(query);
			this._setCount(query);
		}
	}, {
		key: 'sort',


		/**
   * ソート
   *
   * @memberof Table
   * @return {undefined}
   */
		value: function sort() {
			console.log('Table.sort');
			this._error = false;
			var query = this._getSearchQuery();
			query = Table._setSort(query);
			this._setCount(query);
		}
	}, {
		key: 'pagination',


		/**
   * ページネーション
   *
   * @memberof Table
   * @param {number} page - ページ番号
   * @return {undefined}
   */
		value: function pagination(page) {
			console.log('Table.pagination');
			this._error = false;
			var query = this._getSearchQuery();
			query = Table._setSort(query);
			if (page !== 1) {
				if (query !== '') {
					query += '&page=' + page;
				} else {
					query += '?page=' + page;
				}
			}
			this._setCount(query);
		}
	}, {
		key: 'count',


		/**
   * 表示件数変更
   *
   * @memberof Table
   * @param {number} count - 件数
   * @return {undefined}
   */
		value: function count(_count) {
			console.log('Table.count');
			this._error = false;
			var query = this._getSearchQuery();
			query = Table._setSort(query);
			this._setCount(query, _count);
		}
	}, {
		key: 'clearSearch',


		/**
   * 検索条件クリア
   *
   * @memberof Table
   * @return {undefined}
   */
		value: function clearSearch() {
			console.log('Table.clearSearch');
			this._error = false;
			var query = Table._setSort();
			this._setCount(query);
		}
	}, {
		key: '_getSearchQuery',


		/**
   * 検索GETパラメーター取得
   *
   * @memberof Table
   * @return {string} query - 検索GETパラメーター
   */
		value: function _getSearchQuery() {
			var _this = this;

			console.log('Table._getSearchQuery');
			var prefix = '?';
			var query = '';
			var radioName = void 0;
			$('[data-search-item]').each(function (idx, e) {
				var $e = $(e);
				if ($e.attr('data-search-type') === 'input') {
					var value = $e.val();
					if (value && value !== '') {
						query += '' + prefix + $e.attr('data-search-item') + '=' + value;
						prefix = '&';
					}
				} else if ($e.attr('data-search-type') === 'radio') {
					var name = $e.attr('name');
					if (radioName !== name) {
						var checked = $('input[type=radio][name=' + name + ']:checked');
						var _value = checked.val();
						if (_value !== 'all') {
							query += '' + prefix + $e.attr('data-search-item') + '=' + _value;
							prefix = '&';
						}
						radioName = name;
						if (checked.attr('data-search-inside') === 'true' && _value !== 'all') {
							_this._open = true;
						}
					}
				} else if ($e.attr('data-search-type') === 'checkbox') {
					if ($e.prop('checked')) {
						var _value2 = $e.val();
						query += '' + prefix + $e.attr('data-search-item') + '=' + _value2;
						prefix = '&';
						if ($e.attr('data-search-inside') === 'true') {
							_this._open = true;
						}
					}
				} else if ($e.attr('data-search-type') === 'select') {
					var _value3 = $e.val();
					if (_value3 && _value3 !== '') {
						query += '' + prefix + $e.attr('data-search-item') + '=' + _value3;
						prefix = '&';
					}
					if ($e.attr('data-search-inside') === 'true') {
						_this._open = true;
					}
				} else if ($e.attr('data-search-type') === 'array_base') {
					var _name = $e.attr('data-search-item');
					var _value4 = '';
					_value4 = $('[data-search-item=' + _name).map(function (idx, e) {
						var $e = $(e);
						if ($e.prop('checked')) return $e.val();
					}).get().join('|');
					if (_value4.length > 0) {
						query += '' + prefix + _name + '=' + _value4;
						prefix = '&';
						if ($e.attr('data-search-inside') === 'true') {
							_this._open = true;
						}
					}
				} else if ($e.attr('data-search-type') === 'array') {} else if ($e.attr('data-search-type') === 'multiple') {
					var _name2 = $e.attr('data-search-item');
					var _value5 = '';
					_value5 = $e.find('option:selected').map(function (idx, e) {
						return $(e).val();
					}).get().join('|');
					if (_value5.length > 0) {
						query += '' + prefix + _name2 + '=' + _value5;
						prefix = '&';
						if ($e.attr('data-search-inside') === 'true') {
							_this._open = true;
						}
					}
				} else {
					if ($e.is(':invalid')) {
						console.log($e.attr('data-search-item') + ': ' + $e.is(':valid'));
						_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal();
						_this._error = true;
					}
					var _value6 = encodeURIComponent($e.val());
					console.log(_value6);
					if (_value6 !== '') {
						query += '' + prefix + $e.attr('data-search-item') + '=' + _value6;
						prefix = '&';
						if ($e.attr('data-search-inside') === 'true') {
							_this._open = true;
						}
					}
				}
			});
			return query;
		}
	}, {
		key: '_setCount',


		/**
   * カウントパラメーターセット
   *
   * @memberof Table
   * @param {string} query - 検索GETパラメーター
   * @param {number} count - 件数
   * @return {string} query - 検索GETパラメーター
   */
		value: function _setCount() {
			var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
			var count = arguments[1];

			console.log('Table._setCount');
			var cnt = count || parseInt($('.btn-search-count.active').attr('data-search-count'));
			if (cnt === 50) {
				if (query !== '') {
					query = query + '&count=50';
				} else {
					query = '?count=50';
				}
			}
			if (this._open) {
				if (query !== '') {
					query = query + '&open=true';
				} else {
					query = '?open=true';
				}
			}
			if ($('body').hasClass('page-favorite')) {
				var active = $('.nav-link.active').attr('href').replace(/^#/, "");
				console.log(active);
				if (active === 'from-company') {
					if (query !== '') {
						query = query + '&type=fromCompany';
					} else {
						query = '?type=fromCompany';
					}
				}
			}
			var url = _util_common__WEBPACK_IMPORTED_MODULE_1__["default"].getCurrentURL();
			if (!this._error) {
				location.href = '' + url + query;
			} else {
				this._open = false;
			}
		}
	}, {
		key: 'on',


		/**
  * listener on
  *
  * @memberof Table
  * @param {string} name - イベント名
  * @param {function} fn - 実行する関数
  * @return {undefined}
  */
		value: function on(name, fn) {
			this._listener.on(name, fn);
		}
	}, {
		key: 'off',


		/**
   * listener off
   *
   * @memberof Table
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function off(name, fn) {
			this._listener.off(name, fn);
		}
	}], [{
		key: '_setSort',


		/**
   * ソートパラメーターセット
   *
   * @memberof Table
   * @param {string} query - 検索GETパラメーター
   * @return {string} query - 検索GETパラメーター
   */
		value: function _setSort() {
			var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

			console.log('Table._setSort');
			var $sortTable = $('.table-sort');
			var sortValue = $sortTable.val();
			var sortDefault = $sortTable.attr('data-sort-default');
			if (sortValue !== sortDefault) {
				if (query !== '') {
					query += '&sort=' + sortValue;
				} else {
					query += '?sort=' + sortValue;
				}
			}
			console.log(query);
			return query;
		}
	}]);

	return Table;
}();

/* harmony default export */ __webpack_exports__["default"] = (Table);

/***/ }),

/***/ "./mock/admin/src/js/initialize/_basic-initialize.js":
/*!***********************************************************!*\
  !*** ./mock/admin/src/js/initialize/_basic-initialize.js ***!
  \***********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _controller_basic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controller/_basic */ "./mock/admin/src/js/controller/_basic.js");
/* harmony import */ var _view_basic_smooth_scroll_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/basic/_smooth-scroll-view */ "./mock/admin/src/js/view/basic/_smooth-scroll-view.js");
/* harmony import */ var _view_basic_go_top_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view/basic/_go-top-view */ "./mock/admin/src/js/view/basic/_go-top-view.js");
/* harmony import */ var _view_basic_swal_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../view/basic/_swal-view */ "./mock/admin/src/js/view/basic/_swal-view.js");
/* harmony import */ var _view_basic_anchor_accordion_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../view/basic/_anchor-accordion-view */ "./mock/admin/src/js/view/basic/_anchor-accordion-view.js");
/* harmony import */ var _view_basic_btn_accordion_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../view/basic/_btn-accordion-view */ "./mock/admin/src/js/view/basic/_btn-accordion-view.js");


// utility class



// basic







$(function () {
	var BasicController = new _controller_basic__WEBPACK_IMPORTED_MODULE_1__["default"]();
	//スムーススクロール
	$('a[href^="#"]').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_basic_smooth_scroll_view__WEBPACK_IMPORTED_MODULE_2__["default"], $e, [$e, BasicController]);
	});
	// TOPへ戻る
	$('.anchor-go-top').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_basic_go_top_view__WEBPACK_IMPORTED_MODULE_3__["default"], $e, [$e]);
	});
	// メッセージ
	$('body[data-message]').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_basic_swal_view__WEBPACK_IMPORTED_MODULE_4__["default"], $e, [$e]);
	});
	// アコーディオン
	$('.anchor-accordion').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_basic_anchor_accordion_view__WEBPACK_IMPORTED_MODULE_5__["default"], $e, [$e, BasicController]);
	});
	$('.btn-accordion').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_basic_btn_accordion_view__WEBPACK_IMPORTED_MODULE_6__["default"], $e, [$e, BasicController]);
	});
});

//object-fit polyfill
/*! npm.im/object-fit-images 3.2.4 */
var objectFitImages = function () {
	'use strict';

	var OFI = 'bfred-it:object-fit-images';
	var propRegex = /(object-fit|object-position)\s*:\s*([-.\w\s%]+)/g;
	var testImg = typeof Image === 'undefined' ? { style: { 'object-position': 1 } } : new Image();
	var supportsObjectFit = 'object-fit' in testImg.style;
	var supportsObjectPosition = 'object-position' in testImg.style;
	var supportsOFI = 'background-size' in testImg.style;
	var supportsCurrentSrc = typeof testImg.currentSrc === 'string';
	var nativeGetAttribute = testImg.getAttribute;
	var nativeSetAttribute = testImg.setAttribute;
	var autoModeEnabled = false;

	function createPlaceholder(w, h) {
		return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + w + "' height='" + h + "'%3E%3C/svg%3E";
	}

	function polyfillCurrentSrc(el) {
		if (el.srcset && !supportsCurrentSrc && window.picturefill) {
			var pf = window.picturefill._;
			// parse srcset with picturefill where currentSrc isn't available
			if (!el[pf.ns] || !el[pf.ns].evaled) {
				// force synchronous srcset parsing
				pf.fillImg(el, { reselect: true });
			}

			if (!el[pf.ns].curSrc) {
				// force picturefill to parse srcset
				el[pf.ns].supported = false;
				pf.fillImg(el, { reselect: true });
			}

			// retrieve parsed currentSrc, if any
			el.currentSrc = el[pf.ns].curSrc || el.src;
		}
	}

	function getStyle(el) {
		var style = getComputedStyle(el).fontFamily;
		var parsed;
		var props = {};
		while ((parsed = propRegex.exec(style)) !== null) {
			props[parsed[1]] = parsed[2];
		}
		return props;
	}

	function setPlaceholder(img, width, height) {
		// Default: fill width, no height
		var placeholder = createPlaceholder(width || 1, height || 0);

		// Only set placeholder if it's different
		if (nativeGetAttribute.call(img, 'src') !== placeholder) {
			nativeSetAttribute.call(img, 'src', placeholder);
		}
	}

	function onImageReady(img, callback) {
		// naturalWidth is only available when the image headers are loaded,
		// this loop will poll it every 100ms.
		if (img.naturalWidth) {
			callback(img);
		} else {
			setTimeout(onImageReady, 100, img, callback);
		}
	}

	function fixOne(el) {
		var style = getStyle(el);
		var ofi = el[OFI];
		style['object-fit'] = style['object-fit'] || 'fill'; // default value

		// Avoid running where unnecessary, unless OFI had already done its deed
		if (!ofi.img) {
			// fill is the default behavior so no action is necessary
			if (style['object-fit'] === 'fill') {
				return;
			}

			// Where object-fit is supported and object-position isn't (Safari < 10)
			if (!ofi.skipTest && // unless user wants to apply regardless of browser support
			supportsObjectFit && // if browser already supports object-fit
			!style['object-position'] // unless object-position is used
			) {
					return;
				}
		}

		// keep a clone in memory while resetting the original to a blank
		if (!ofi.img) {
			ofi.img = new Image(el.width, el.height);
			ofi.img.srcset = nativeGetAttribute.call(el, "data-ofi-srcset") || el.srcset;
			ofi.img.src = nativeGetAttribute.call(el, "data-ofi-src") || el.src;

			// preserve for any future cloneNode calls
			// https://github.com/bfred-it/object-fit-images/issues/53
			nativeSetAttribute.call(el, "data-ofi-src", el.src);
			if (el.srcset) {
				nativeSetAttribute.call(el, "data-ofi-srcset", el.srcset);
			}

			setPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);

			// remove srcset because it overrides src
			if (el.srcset) {
				el.srcset = '';
			}
			try {
				keepSrcUsable(el);
			} catch (err) {
				if (window.console) {
					console.warn('https://bit.ly/ofi-old-browser');
				}
			}
		}

		polyfillCurrentSrc(ofi.img);

		el.style.backgroundImage = "url(\"" + (ofi.img.currentSrc || ofi.img.src).replace(/"/g, '\\"') + "\")";
		el.style.backgroundPosition = style['object-position'] || 'center';
		el.style.backgroundRepeat = 'no-repeat';
		el.style.backgroundOrigin = 'content-box';

		if (/scale-down/.test(style['object-fit'])) {
			onImageReady(ofi.img, function () {
				if (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {
					el.style.backgroundSize = 'contain';
				} else {
					el.style.backgroundSize = 'auto';
				}
			});
		} else {
			el.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');
		}

		onImageReady(ofi.img, function (img) {
			setPlaceholder(el, img.naturalWidth, img.naturalHeight);
		});
	}

	function keepSrcUsable(el) {
		var descriptors = {
			get: function get(prop) {
				return el[OFI].img[prop ? prop : 'src'];
			},
			set: function set(value, prop) {
				el[OFI].img[prop ? prop : 'src'] = value;
				nativeSetAttribute.call(el, "data-ofi-" + prop, value); // preserve for any future cloneNode
				fixOne(el);
				return value;
			}
		};
		Object.defineProperty(el, 'src', descriptors);
		Object.defineProperty(el, 'currentSrc', {
			get: function get() {
				return descriptors.get('currentSrc');
			}
		});
		Object.defineProperty(el, 'srcset', {
			get: function get() {
				return descriptors.get('srcset');
			},
			set: function set(ss) {
				return descriptors.set(ss, 'srcset');
			}
		});
	}

	function hijackAttributes() {
		function getOfiImageMaybe(el, name) {
			return el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;
		}
		if (!supportsObjectPosition) {
			HTMLImageElement.prototype.getAttribute = function (name) {
				return nativeGetAttribute.call(getOfiImageMaybe(this, name), name);
			};

			HTMLImageElement.prototype.setAttribute = function (name, value) {
				return nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));
			};
		}
	}

	function fix(imgs, opts) {
		var startAutoMode = !autoModeEnabled && !imgs;
		opts = opts || {};
		imgs = imgs || 'img';

		if (supportsObjectPosition && !opts.skipTest || !supportsOFI) {
			return false;
		}

		// use imgs as a selector or just select all images
		if (imgs === 'img') {
			imgs = document.getElementsByTagName('img');
		} else if (typeof imgs === 'string') {
			imgs = document.querySelectorAll(imgs);
		} else if (!('length' in imgs)) {
			imgs = [imgs];
		}

		// apply fix to all
		for (var i = 0; i < imgs.length; i++) {
			imgs[i][OFI] = imgs[i][OFI] || {
				skipTest: opts.skipTest
			};
			fixOne(imgs[i]);
		}

		if (startAutoMode) {
			document.body.addEventListener('load', function (e) {
				if (e.target.tagName === 'IMG') {
					fix(e.target, {
						skipTest: opts.skipTest
					});
				}
			}, true);
			autoModeEnabled = true;
			imgs = 'img'; // reset to a generic selector for watchMQ
		}

		// if requested, watch media queries for object-fit change
		if (opts.watchMQ) {
			window.addEventListener('resize', fix.bind(null, imgs, {
				skipTest: opts.skipTest
			}));
		}
	}

	fix.supportsObjectFit = supportsObjectFit;
	fix.supportsObjectPosition = supportsObjectPosition;

	hijackAttributes();

	return fix;
}();

// array includes polyfill
if (!Array.prototype.includes) {
	Object.defineProperty(Array.prototype, 'includes', {
		value: function value(searchElement, fromIndex) {

			if (this == null) {
				throw new TypeError('"this" is null or not defined');
			}

			var o = Object(this);
			var len = o.length >>> 0;

			if (len === 0) {
				return false;
			}

			var n = fromIndex | 0;
			var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

			while (k < len) {
				if (o[k] === searchElement) {
					return true;
				}
				k++;
			}

			return false;
		}
	});
}

/***/ }),

/***/ "./mock/admin/src/js/initialize/_form-initialize.js":
/*!**********************************************************!*\
  !*** ./mock/admin/src/js/initialize/_form-initialize.js ***!
  \**********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _controller_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controller/_form */ "./mock/admin/src/js/controller/_form.js");
/* harmony import */ var _view_form_form_validate_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/form/_form-validate-view */ "./mock/admin/src/js/view/form/_form-validate-view.js");
/* harmony import */ var _view_form_form_validate_checkbox_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view/form/_form-validate-checkbox-view */ "./mock/admin/src/js/view/form/_form-validate-checkbox-view.js");
/* harmony import */ var _view_form_form_submit_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../view/form/_form-submit-view */ "./mock/admin/src/js/view/form/_form-submit-view.js");
/* harmony import */ var _view_form_form_datepicker_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../view/form/_form-datepicker-view */ "./mock/admin/src/js/view/form/_form-datepicker-view.js");
/* harmony import */ var _view_form_form_select_toggle_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../view/form/_form-select-toggle-view */ "./mock/admin/src/js/view/form/_form-select-toggle-view.js");
/* harmony import */ var _view_form_form_file_drop_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../view/form/_form-file-drop-view */ "./mock/admin/src/js/view/form/_form-file-drop-view.js");
/* harmony import */ var _view_form_form_postcode_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../view/form/_form-postcode-view */ "./mock/admin/src/js/view/form/_form-postcode-view.js");
/* harmony import */ var _view_form_form_zenkaku_to_hankaku_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../view/form/_form-zenkaku-to-hankaku-view */ "./mock/admin/src/js/view/form/_form-zenkaku-to-hankaku-view.js");
/* harmony import */ var _view_form_form_counter_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../view/form/_form-counter-view */ "./mock/admin/src/js/view/form/_form-counter-view.js");
/* harmony import */ var _view_form_form_separate_comma_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../view/form/_form-separate-comma-view */ "./mock/admin/src/js/view/form/_form-separate-comma-view.js");
/* harmony import */ var _view_form_form_time_divide_view__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../view/form/_form-time-divide-view */ "./mock/admin/src/js/view/form/_form-time-divide-view.js");
/* harmony import */ var _view_form_form_select2_view__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../view/form/_form-select2-view */ "./mock/admin/src/js/view/form/_form-select2-view.js");
/* harmony import */ var _view_form_form_get_base_view__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../view/form/_form-get-base-view */ "./mock/admin/src/js/view/form/_form-get-base-view.js");
/* harmony import */ var _view_form_form_add_question_view__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../view/form/_form-add-question-view */ "./mock/admin/src/js/view/form/_form-add-question-view.js");
/* harmony import */ var _view_form_form_delete_question_view__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../view/form/_form-delete-question-view */ "./mock/admin/src/js/view/form/_form-delete-question-view.js");
/* harmony import */ var _view_form_form_add_answer_view__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../view/form/_form-add-answer-view */ "./mock/admin/src/js/view/form/_form-add-answer-view.js");
/* harmony import */ var _view_form_form_delete_answer_view__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../view/form/_form-delete-answer-view */ "./mock/admin/src/js/view/form/_form-delete-answer-view.js");


// utility class



// form-class



















$(function () {
	var FormController = new _controller_form__WEBPACK_IMPORTED_MODULE_1__["default"]();
	// バリデート
	$('.validate').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_validate_view__WEBPACK_IMPORTED_MODULE_2__["default"], $e, [$e, FormController]);
	});
	// checkboxバリデート
	$('.validate-checkbox').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_validate_checkbox_view__WEBPACK_IMPORTED_MODULE_3__["default"], $e, [$e, FormController]);
	});
	// フォームサブミット
	$('.btn[type=submit][data-form]').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_submit_view__WEBPACK_IMPORTED_MODULE_4__["default"], $e, [$e, FormController]);
	});
	// デートピッカー
	$('input[data-datepicker=true]').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_datepicker_view__WEBPACK_IMPORTED_MODULE_5__["default"], $e, [$e, FormController]);
	});
	// トグル（select）
	$('[data-select-toggle]').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_select_toggle_view__WEBPACK_IMPORTED_MODULE_6__["default"], $e, [$e, FormController]);
	});
	// ファイルアップロード
	$('.file-upload').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_file_drop_view__WEBPACK_IMPORTED_MODULE_7__["default"], $e, [$e, FormController]);
	});
	//時間分割
	$('.time-divide').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_time_divide_view__WEBPACK_IMPORTED_MODULE_12__["default"], $e, [$e, FormController]);
	});
	//郵便番号分割
	$('.zip').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_postcode_view__WEBPACK_IMPORTED_MODULE_8__["default"], $e, [$e, FormController]);
	});
	//select2
	$('.select2').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_select2_view__WEBPACK_IMPORTED_MODULE_13__["default"], $e, [$e, FormController]);
	});
	//全角→半角変換
	$('.zen2han').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_zenkaku_to_hankaku_view__WEBPACK_IMPORTED_MODULE_9__["default"], $e, [$e, FormController]);
	});
	//カウンター
	$('.text-length-counter').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_counter_view__WEBPACK_IMPORTED_MODULE_10__["default"], $e, [$e, FormController]);
	});
	//3桁区切り
	$('.separate-comma').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_separate_comma_view__WEBPACK_IMPORTED_MODULE_11__["default"], $e, [$e, FormController]);
	});
	// 店舗取得
	$('.get-base').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_get_base_view__WEBPACK_IMPORTED_MODULE_14__["default"], $e, [$e, FormController]);
	});
	// 質問追加
	$('.btn-add-question').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_add_question_view__WEBPACK_IMPORTED_MODULE_15__["default"], $e, [$e, FormController]);
	});
	// 質問削除
	$('.btn-delete-question').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_delete_question_view__WEBPACK_IMPORTED_MODULE_16__["default"], $e, [$e, FormController]);
	});
	// 回答追加
	$('.btn-add-answer').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_add_answer_view__WEBPACK_IMPORTED_MODULE_17__["default"], $e, [$e, FormController]);
	});
	// 回答削除
	$('.btn-delete-answer').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_form_form_delete_answer_view__WEBPACK_IMPORTED_MODULE_18__["default"], $e, [$e, FormController]);
	});
});

/***/ }),

/***/ "./mock/admin/src/js/initialize/_table-control-initialize.js":
/*!*******************************************************************!*\
  !*** ./mock/admin/src/js/initialize/_table-control-initialize.js ***!
  \*******************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _controller_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controller/_table */ "./mock/admin/src/js/controller/_table.js");
/* harmony import */ var _view_table_table_search_condition_accordion_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/table/_table-search-condition-accordion-view */ "./mock/admin/src/js/view/table/_table-search-condition-accordion-view.js");
/* harmony import */ var _view_table_table_search_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view/table/_table-search-view */ "./mock/admin/src/js/view/table/_table-search-view.js");
/* harmony import */ var _view_table_table_sort_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../view/table/_table-sort-view */ "./mock/admin/src/js/view/table/_table-sort-view.js");
/* harmony import */ var _view_table_table_pagination_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../view/table/_table-pagination-view */ "./mock/admin/src/js/view/table/_table-pagination-view.js");
/* harmony import */ var _view_table_table_clear_search_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../view/table/_table-clear-search-view */ "./mock/admin/src/js/view/table/_table-clear-search-view.js");
/* harmony import */ var _view_table_table_count_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../view/table/_table-count-view */ "./mock/admin/src/js/view/table/_table-count-view.js");
/* harmony import */ var _view_table_table_csv_dl_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../view/table/_table-csv-dl-view */ "./mock/admin/src/js/view/table/_table-csv-dl-view.js");
/* harmony import */ var _view_table_table_scrollbar_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../view/table/_table-scrollbar-view */ "./mock/admin/src/js/view/table/_table-scrollbar-view.js");
/* harmony import */ var _view_table_table_btn_delete_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../view/table/_table-btn-delete-view */ "./mock/admin/src/js/view/table/_table-btn-delete-view.js");
/* harmony import */ var _view_table_table_btn_movie_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../view/table/_table-btn-movie-view */ "./mock/admin/src/js/view/table/_table-btn-movie-view.js");


// utility class



// table-control-class












$(function () {
	var TableController = new _controller_table__WEBPACK_IMPORTED_MODULE_1__["default"]();
	// 検索条件をもっと見る
	$('.anchor-search-condition').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_search_condition_accordion_view__WEBPACK_IMPORTED_MODULE_2__["default"], $e, [$e]);
	});
	// 検索
	$('.btn-table-search').each(function (idx, e) {
		var $e = $(e);;
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_search_view__WEBPACK_IMPORTED_MODULE_3__["default"], $e, [$e, TableController]);
	});
	// ソート
	$('.table-sort').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_sort_view__WEBPACK_IMPORTED_MODULE_4__["default"], $e, [$e, TableController]);
	});
	// ページネーション
	$('[data-page]').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_pagination_view__WEBPACK_IMPORTED_MODULE_5__["default"], $e, [$e, TableController]);
	});
	// 検索条件クリア
	$('.anchor-clear-search').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_clear_search_view__WEBPACK_IMPORTED_MODULE_6__["default"], $e, [$e, TableController]);
	});
	// ページ表示件数
	$('.btn-search-count').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_count_view__WEBPACK_IMPORTED_MODULE_7__["default"], $e, [$e, TableController]);
	});
	// CSVダウンロード
	$('.btn-csv-dl').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_csv_dl_view__WEBPACK_IMPORTED_MODULE_8__["default"], $e, [$e, TableController]);
	});
	// 上下スクロールバーを連動
	$('.table-wrap .scroll-bar').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_scrollbar_view__WEBPACK_IMPORTED_MODULE_9__["default"], $e, [$e, TableController]);
	});
	// 削除ボタン
	$('.btn-delete').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_btn_delete_view__WEBPACK_IMPORTED_MODULE_10__["default"], $e, [$e, TableController]);
	});
	// 動画視聴
	$('.btn-movie').each(function (idx, e) {
		var $e = $(e);
		_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_view_table_table_btn_movie_view__WEBPACK_IMPORTED_MODULE_11__["default"], $e, [$e, TableController]);
	});
});

/***/ }),

/***/ "./mock/admin/src/js/libraries/air-datepicker.js":
/*!*******************************************************!*\
  !*** ./mock/admin/src/js/libraries/air-datepicker.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (window, $, undefined) {
	;(function () {
		var VERSION = '2.2.3',
		    pluginName = 'datepicker',
		    autoInitSelector = '.datepicker-here',
		    $body,
		    $datepickersContainer,
		    containerBuilt = false,
		    baseTemplate = '' + '<div class="datepicker">' + '<i class="datepicker--pointer"></i>' + '<nav class="datepicker--nav"></nav>' + '<div class="datepicker--content"></div>' + '</div>',
		    defaults = {
			classes: '',
			inline: false,
			language: 'ru',
			startDate: new Date(),
			firstDay: '',
			weekends: [6, 0],
			dateFormat: '',
			altField: '',
			altFieldDateFormat: '@',
			toggleSelected: true,
			keyboardNav: true,

			position: 'bottom left',
			offset: 12,

			view: 'days',
			minView: 'days',

			showOtherMonths: true,
			selectOtherMonths: true,
			moveToOtherMonthsOnSelect: true,

			showOtherYears: true,
			selectOtherYears: true,
			moveToOtherYearsOnSelect: true,

			minDate: '',
			maxDate: '',
			disableNavWhenOutOfRange: true,

			multipleDates: false, // Boolean or Number
			multipleDatesSeparator: ',',
			range: false,

			todayButton: false,
			clearButton: false,

			showEvent: 'focus',
			autoClose: false,

			// navigation
			monthsField: 'monthsShort',
			prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',
			nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',
			navTitles: {
				days: 'MM, <i>yyyy</i>',
				months: 'yyyy',
				years: 'yyyy1 - yyyy2'
			},

			// timepicker
			timepicker: false,
			onlyTimepicker: false,
			dateTimeSeparator: ' ',
			timeFormat: '',
			minHours: 0,
			maxHours: 24,
			minMinutes: 0,
			maxMinutes: 59,
			hoursStep: 1,
			minutesStep: 1,

			// events
			onSelect: '',
			onShow: '',
			onHide: '',
			onChangeMonth: '',
			onChangeYear: '',
			onChangeDecade: '',
			onChangeView: '',
			onRenderCell: ''
		},
		    hotKeys = {
			'ctrlRight': [17, 39],
			'ctrlUp': [17, 38],
			'ctrlLeft': [17, 37],
			'ctrlDown': [17, 40],
			'shiftRight': [16, 39],
			'shiftUp': [16, 38],
			'shiftLeft': [16, 37],
			'shiftDown': [16, 40],
			'altUp': [18, 38],
			'altRight': [18, 39],
			'altLeft': [18, 37],
			'altDown': [18, 40],
			'ctrlShiftUp': [16, 17, 38]
		},
		    datepicker;

		var Datepicker = function Datepicker(el, options) {
			this.el = el;
			this.$el = $(el);

			this.opts = $.extend(true, {}, defaults, options, this.$el.data());

			if ($body == undefined) {
				$body = $('body');
			}

			if (!this.opts.startDate) {
				this.opts.startDate = new Date();
			}

			if (this.el.nodeName == 'INPUT') {
				this.elIsInput = true;
			}

			if (this.opts.altField) {
				this.$altField = typeof this.opts.altField == 'string' ? $(this.opts.altField) : this.opts.altField;
			}

			this.inited = false;
			this.visible = false;
			this.silent = false; // Need to prevent unnecessary rendering

			this.currentDate = this.opts.startDate;
			this.currentView = this.opts.view;
			this._createShortCuts();
			this.selectedDates = [];
			this.views = {};
			this.keys = [];
			this.minRange = '';
			this.maxRange = '';
			this._prevOnSelectValue = '';

			this.init();
		};

		datepicker = Datepicker;

		datepicker.prototype = {
			VERSION: VERSION,
			viewIndexes: ['days', 'months', 'years'],

			init: function init() {
				if (!containerBuilt && !this.opts.inline && this.elIsInput) {
					this._buildDatepickersContainer();
				}
				this._buildBaseHtml();
				this._defineLocale(this.opts.language);
				this._syncWithMinMaxDates();

				if (this.elIsInput) {
					if (!this.opts.inline) {
						// Set extra classes for proper transitions
						this._setPositionClasses(this.opts.position);
						this._bindEvents();
					}
					if (this.opts.keyboardNav && !this.opts.onlyTimepicker) {
						this._bindKeyboardEvents();
					}
					this.$datepicker.on('mousedown', this._onMouseDownDatepicker.bind(this));
					this.$datepicker.on('mouseup', this._onMouseUpDatepicker.bind(this));
				}

				if (this.opts.classes) {
					this.$datepicker.addClass(this.opts.classes);
				}

				if (this.opts.timepicker) {
					this.timepicker = new $.fn.datepicker.Timepicker(this, this.opts);
					this._bindTimepickerEvents();
				}

				if (this.opts.onlyTimepicker) {
					this.$datepicker.addClass('-only-timepicker-');
				}

				this.views[this.currentView] = new $.fn.datepicker.Body(this, this.currentView, this.opts);
				this.views[this.currentView].show();
				this.nav = new $.fn.datepicker.Navigation(this, this.opts);
				this.view = this.currentView;

				this.$el.on('clickCell.adp', this._onClickCell.bind(this));
				this.$datepicker.on('mouseenter', '.datepicker--cell', this._onMouseEnterCell.bind(this));
				this.$datepicker.on('mouseleave', '.datepicker--cell', this._onMouseLeaveCell.bind(this));

				this.inited = true;
			},

			_createShortCuts: function _createShortCuts() {
				this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-8639999913600000);
				this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(8639999913600000);
			},

			_bindEvents: function _bindEvents() {
				this.$el.on(this.opts.showEvent + '.adp', this._onShowEvent.bind(this));
				this.$el.on('mouseup.adp', this._onMouseUpEl.bind(this));
				this.$el.on('blur.adp', this._onBlur.bind(this));
				this.$el.on('keyup.adp', this._onKeyUpGeneral.bind(this));
				$(window).on('resize.adp', this._onResize.bind(this));
				$('body').on('mouseup.adp', this._onMouseUpBody.bind(this));
			},

			_bindKeyboardEvents: function _bindKeyboardEvents() {
				this.$el.on('keydown.adp', this._onKeyDown.bind(this));
				this.$el.on('keyup.adp', this._onKeyUp.bind(this));
				this.$el.on('hotKey.adp', this._onHotKey.bind(this));
			},

			_bindTimepickerEvents: function _bindTimepickerEvents() {
				this.$el.on('timeChange.adp', this._onTimeChange.bind(this));
			},

			isWeekend: function isWeekend(day) {
				return this.opts.weekends.indexOf(day) !== -1;
			},

			_defineLocale: function _defineLocale(lang) {
				if (typeof lang == 'string') {
					this.loc = $.fn.datepicker.language[lang];
					if (!this.loc) {
						console.warn('Can\'t find language "' + lang + '" in Datepicker.language, will use "ru" instead');
						this.loc = $.extend(true, {}, $.fn.datepicker.language.ru);
					}

					this.loc = $.extend(true, {}, $.fn.datepicker.language.ru, $.fn.datepicker.language[lang]);
				} else {
					this.loc = $.extend(true, {}, $.fn.datepicker.language.ru, lang);
				}

				if (this.opts.dateFormat) {
					this.loc.dateFormat = this.opts.dateFormat;
				}

				if (this.opts.timeFormat) {
					this.loc.timeFormat = this.opts.timeFormat;
				}

				if (this.opts.firstDay !== '') {
					this.loc.firstDay = this.opts.firstDay;
				}

				if (this.opts.timepicker) {
					this.loc.dateFormat = [this.loc.dateFormat, this.loc.timeFormat].join(this.opts.dateTimeSeparator);
				}

				if (this.opts.onlyTimepicker) {
					this.loc.dateFormat = this.loc.timeFormat;
				}

				var boundary = this._getWordBoundaryRegExp;
				if (this.loc.timeFormat.match(boundary('aa')) || this.loc.timeFormat.match(boundary('AA'))) {
					this.ampm = true;
				}
			},

			_buildDatepickersContainer: function _buildDatepickersContainer() {
				containerBuilt = true;
				$body.append('<div class="datepickers-container" id="datepickers-container"></div>');
				$datepickersContainer = $('#datepickers-container');
			},

			_buildBaseHtml: function _buildBaseHtml() {
				var $appendTarget,
				    $inline = $('<div class="datepicker-inline">');

				if (this.el.nodeName == 'INPUT') {
					if (!this.opts.inline) {
						$appendTarget = $datepickersContainer;
					} else {
						$appendTarget = $inline.insertAfter(this.$el);
					}
				} else {
					$appendTarget = $inline.appendTo(this.$el);
				}

				this.$datepicker = $(baseTemplate).appendTo($appendTarget);
				this.$content = $('.datepicker--content', this.$datepicker);
				this.$nav = $('.datepicker--nav', this.$datepicker);
			},

			_triggerOnChange: function _triggerOnChange() {
				if (!this.selectedDates.length) {
					// Prevent from triggering multiple onSelect callback with same argument (empty string) in IE10-11
					if (this._prevOnSelectValue === '') return;
					this._prevOnSelectValue = '';
					return this.opts.onSelect('', '', this);
				}

				var selectedDates = this.selectedDates,
				    parsedSelected = datepicker.getParsedDate(selectedDates[0]),
				    formattedDates,
				    _this = this,
				    dates = new Date(parsedSelected.year, parsedSelected.month, parsedSelected.date, parsedSelected.hours, parsedSelected.minutes);

				formattedDates = selectedDates.map(function (date) {
					return _this.formatDate(_this.loc.dateFormat, date);
				}).join(this.opts.multipleDatesSeparator);

				// Create new dates array, to separate it from original selectedDates
				if (this.opts.multipleDates || this.opts.range) {
					dates = selectedDates.map(function (date) {
						var parsedDate = datepicker.getParsedDate(date);
						return new Date(parsedDate.year, parsedDate.month, parsedDate.date, parsedDate.hours, parsedDate.minutes);
					});
				}

				this._prevOnSelectValue = formattedDates;
				this.opts.onSelect(formattedDates, dates, this);
			},

			next: function next() {
				var d = this.parsedDate,
				    o = this.opts;
				switch (this.view) {
					case 'days':
						this.date = new Date(d.year, d.month + 1, 1);
						if (o.onChangeMonth) o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);
						break;
					case 'months':
						this.date = new Date(d.year + 1, d.month, 1);
						if (o.onChangeYear) o.onChangeYear(this.parsedDate.year);
						break;
					case 'years':
						this.date = new Date(d.year + 10, 0, 1);
						if (o.onChangeDecade) o.onChangeDecade(this.curDecade);
						break;
				}
			},

			prev: function prev() {
				var d = this.parsedDate,
				    o = this.opts;
				switch (this.view) {
					case 'days':
						this.date = new Date(d.year, d.month - 1, 1);
						if (o.onChangeMonth) o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);
						break;
					case 'months':
						this.date = new Date(d.year - 1, d.month, 1);
						if (o.onChangeYear) o.onChangeYear(this.parsedDate.year);
						break;
					case 'years':
						this.date = new Date(d.year - 10, 0, 1);
						if (o.onChangeDecade) o.onChangeDecade(this.curDecade);
						break;
				}
			},

			formatDate: function formatDate(string, date) {
				date = date || this.date;
				var result = string,
				    boundary = this._getWordBoundaryRegExp,
				    locale = this.loc,
				    leadingZero = datepicker.getLeadingZeroNum,
				    decade = datepicker.getDecade(date),
				    d = datepicker.getParsedDate(date),
				    fullHours = d.fullHours,
				    hours = d.hours,
				    ampm = string.match(boundary('aa')) || string.match(boundary('AA')),
				    dayPeriod = 'am',
				    replacer = this._replacer,
				    validHours;

				if (this.opts.timepicker && this.timepicker && ampm) {
					validHours = this.timepicker._getValidHoursFromDate(date, ampm);
					fullHours = leadingZero(validHours.hours);
					hours = validHours.hours;
					dayPeriod = validHours.dayPeriod;
				}

				switch (true) {
					case /@/.test(result):
						result = result.replace(/@/, date.getTime());
					case /aa/.test(result):
						result = replacer(result, boundary('aa'), dayPeriod);
					case /AA/.test(result):
						result = replacer(result, boundary('AA'), dayPeriod.toUpperCase());
					case /dd/.test(result):
						result = replacer(result, boundary('dd'), d.fullDate);
					case /d/.test(result):
						result = replacer(result, boundary('d'), d.date);
					case /DD/.test(result):
						result = replacer(result, boundary('DD'), locale.days[d.day]);
					case /D/.test(result):
						result = replacer(result, boundary('D'), locale.daysShort[d.day]);
					case /mm/.test(result):
						result = replacer(result, boundary('mm'), d.fullMonth);
					case /m/.test(result):
						result = replacer(result, boundary('m'), d.month + 1);
					case /MM/.test(result):
						result = replacer(result, boundary('MM'), this.loc.months[d.month]);
					case /M/.test(result):
						result = replacer(result, boundary('M'), locale.monthsShort[d.month]);
					case /ii/.test(result):
						result = replacer(result, boundary('ii'), d.fullMinutes);
					case /i/.test(result):
						result = replacer(result, boundary('i'), d.minutes);
					case /hh/.test(result):
						result = replacer(result, boundary('hh'), fullHours);
					case /h/.test(result):
						result = replacer(result, boundary('h'), hours);
					case /yyyy/.test(result):
						result = replacer(result, boundary('yyyy'), d.year);
					case /yyyy1/.test(result):
						result = replacer(result, boundary('yyyy1'), decade[0]);
					case /yyyy2/.test(result):
						result = replacer(result, boundary('yyyy2'), decade[1]);
					case /yy/.test(result):
						result = replacer(result, boundary('yy'), d.year.toString().slice(-2));
				}

				return result;
			},

			_replacer: function _replacer(str, reg, data) {
				return str.replace(reg, function (match, p1, p2, p3) {
					return p1 + data + p3;
				});
			},

			_getWordBoundaryRegExp: function _getWordBoundaryRegExp(sign) {
				var symbols = '\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;';

				return new RegExp('(^|>|' + symbols + ')(' + sign + ')($|<|' + symbols + ')', 'g');
			},

			selectDate: function selectDate(date) {
				var _this = this,
				    opts = _this.opts,
				    d = _this.parsedDate,
				    selectedDates = _this.selectedDates,
				    len = selectedDates.length,
				    newDate = '';

				if (Array.isArray(date)) {
					date.forEach(function (d) {
						_this.selectDate(d);
					});
					return;
				}

				if (!(date instanceof Date)) return;

				this.lastSelectedDate = date;

				// Set new time values from Date
				if (this.timepicker) {
					this.timepicker._setTime(date);
				}

				// On this step timepicker will set valid values in it's instance
				_this._trigger('selectDate', date);

				// Set correct time values after timepicker's validation
				// Prevent from setting hours or minutes which values are lesser then `min` value or
				// greater then `max` value
				if (this.timepicker) {
					date.setHours(this.timepicker.hours);
					date.setMinutes(this.timepicker.minutes);
				}

				if (_this.view == 'days') {
					if (date.getMonth() != d.month && opts.moveToOtherMonthsOnSelect) {
						newDate = new Date(date.getFullYear(), date.getMonth(), 1);
					}
				}

				if (_this.view == 'years') {
					if (date.getFullYear() != d.year && opts.moveToOtherYearsOnSelect) {
						newDate = new Date(date.getFullYear(), 0, 1);
					}
				}

				if (newDate) {
					_this.silent = true;
					_this.date = newDate;
					_this.silent = false;
					_this.nav._render();
				}

				if (opts.multipleDates && !opts.range) {
					// Set priority to range functionality
					if (len === opts.multipleDates) return;
					if (!_this._isSelected(date)) {
						_this.selectedDates.push(date);
					}
				} else if (opts.range) {
					if (len == 2) {
						_this.selectedDates = [date];
						_this.minRange = date;
						_this.maxRange = '';
					} else if (len == 1) {
						_this.selectedDates.push(date);
						if (!_this.maxRange) {
							_this.maxRange = date;
						} else {
							_this.minRange = date;
						}
						// Swap dates if they were selected via dp.selectDate() and second date was smaller then first
						if (datepicker.bigger(_this.maxRange, _this.minRange)) {
							_this.maxRange = _this.minRange;
							_this.minRange = date;
						}
						_this.selectedDates = [_this.minRange, _this.maxRange];
					} else {
						_this.selectedDates = [date];
						_this.minRange = date;
					}
				} else {
					_this.selectedDates = [date];
				}

				_this._setInputValue();

				if (opts.onSelect) {
					_this._triggerOnChange();
				}

				if (opts.autoClose && !this.timepickerIsActive) {
					if (!opts.multipleDates && !opts.range) {
						_this.hide();
					} else if (opts.range && _this.selectedDates.length == 2) {
						_this.hide();
					}
				}

				_this.views[this.currentView]._render();
			},

			removeDate: function removeDate(date) {
				var selected = this.selectedDates,
				    _this = this;

				if (!(date instanceof Date)) return;

				return selected.some(function (curDate, i) {
					if (datepicker.isSame(curDate, date)) {
						selected.splice(i, 1);

						if (!_this.selectedDates.length) {
							_this.minRange = '';
							_this.maxRange = '';
							_this.lastSelectedDate = '';
						} else {
							_this.lastSelectedDate = _this.selectedDates[_this.selectedDates.length - 1];
						}

						_this.views[_this.currentView]._render();
						_this._setInputValue();

						if (_this.opts.onSelect) {
							_this._triggerOnChange();
						}

						return true;
					}
				});
			},

			today: function today() {
				this.silent = true;
				this.view = this.opts.minView;
				this.silent = false;
				this.date = new Date();

				if (this.opts.todayButton instanceof Date) {
					this.selectDate(this.opts.todayButton);
				}
			},

			clear: function clear() {
				this.selectedDates = [];
				this.minRange = '';
				this.maxRange = '';
				this.views[this.currentView]._render();
				this._setInputValue();
				if (this.opts.onSelect) {
					this._triggerOnChange();
				}
			},

			/**
    * Updates datepicker options
    * @param {String|Object} param - parameter's name to update. If object then it will extend current options
    * @param {String|Number|Object} [value] - new param value
    */
			update: function update(param, value) {
				var len = arguments.length,
				    lastSelectedDate = this.lastSelectedDate;

				if (len == 2) {
					this.opts[param] = value;
				} else if (len == 1 && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) == 'object') {
					this.opts = $.extend(true, this.opts, param);
				}

				this._createShortCuts();
				this._syncWithMinMaxDates();
				this._defineLocale(this.opts.language);
				this.nav._addButtonsIfNeed();
				if (!this.opts.onlyTimepicker) this.nav._render();
				this.views[this.currentView]._render();

				if (this.elIsInput && !this.opts.inline) {
					this._setPositionClasses(this.opts.position);
					if (this.visible) {
						this.setPosition(this.opts.position);
					}
				}

				if (this.opts.classes) {
					this.$datepicker.addClass(this.opts.classes);
				}

				if (this.opts.onlyTimepicker) {
					this.$datepicker.addClass('-only-timepicker-');
				}

				if (this.opts.timepicker) {
					if (lastSelectedDate) this.timepicker._handleDate(lastSelectedDate);
					this.timepicker._updateRanges();
					this.timepicker._updateCurrentTime();
					// Change hours and minutes if it's values have been changed through min/max hours/minutes
					if (lastSelectedDate) {
						lastSelectedDate.setHours(this.timepicker.hours);
						lastSelectedDate.setMinutes(this.timepicker.minutes);
					}
				}

				this._setInputValue();

				return this;
			},

			_syncWithMinMaxDates: function _syncWithMinMaxDates() {
				var curTime = this.date.getTime();
				this.silent = true;
				if (this.minTime > curTime) {
					this.date = this.minDate;
				}

				if (this.maxTime < curTime) {
					this.date = this.maxDate;
				}
				this.silent = false;
			},

			_isSelected: function _isSelected(checkDate, cellType) {
				var res = false;
				this.selectedDates.some(function (date) {
					if (datepicker.isSame(date, checkDate, cellType)) {
						res = date;
						return true;
					}
				});
				return res;
			},

			_setInputValue: function _setInputValue() {
				var _this = this,
				    opts = _this.opts,
				    format = _this.loc.dateFormat,
				    altFormat = opts.altFieldDateFormat,
				    value = _this.selectedDates.map(function (date) {
					return _this.formatDate(format, date);
				}),
				    altValues;

				if (opts.altField && _this.$altField.length) {
					altValues = this.selectedDates.map(function (date) {
						return _this.formatDate(altFormat, date);
					});
					altValues = altValues.join(this.opts.multipleDatesSeparator);
					this.$altField.val(altValues);
				}

				value = value.join(this.opts.multipleDatesSeparator);

				this.$el.val(value);
			},

			/**
    * Check if date is between minDate and maxDate
    * @param date {object} - date object
    * @param type {string} - cell type
    * @returns {boolean}
    * @private
    */
			_isInRange: function _isInRange(date, type) {
				var time = date.getTime(),
				    d = datepicker.getParsedDate(date),
				    min = datepicker.getParsedDate(this.minDate),
				    max = datepicker.getParsedDate(this.maxDate),
				    dMinTime = new Date(d.year, d.month, min.date).getTime(),
				    dMaxTime = new Date(d.year, d.month, max.date).getTime(),
				    types = {
					day: time >= this.minTime && time <= this.maxTime,
					month: dMinTime >= this.minTime && dMaxTime <= this.maxTime,
					year: d.year >= min.year && d.year <= max.year
				};
				return type ? types[type] : types.day;
			},

			_getDimensions: function _getDimensions($el) {
				var offset = $el.offset();

				return {
					width: $el.outerWidth(),
					height: $el.outerHeight(),
					left: offset.left,
					top: offset.top
				};
			},

			_getDateFromCell: function _getDateFromCell(cell) {
				var curDate = this.parsedDate,
				    year = cell.data('year') || curDate.year,
				    month = cell.data('month') == undefined ? curDate.month : cell.data('month'),
				    date = cell.data('date') || 1;

				return new Date(year, month, date);
			},

			_setPositionClasses: function _setPositionClasses(pos) {
				pos = pos.split(' ');
				var main = pos[0],
				    sec = pos[1],
				    classes = 'datepicker -' + main + '-' + sec + '- -from-' + main + '-';

				if (this.visible) classes += ' active';

				this.$datepicker.removeAttr('class').addClass(classes);
			},

			setPosition: function setPosition(position) {
				position = position || this.opts.position;

				var dims = this._getDimensions(this.$el),
				    selfDims = this._getDimensions(this.$datepicker),
				    pos = position.split(' '),
				    top,
				    left,
				    offset = this.opts.offset,
				    main = pos[0],
				    secondary = pos[1];

				switch (main) {
					case 'top':
						top = dims.top - selfDims.height - offset;
						break;
					case 'right':
						left = dims.left + dims.width + offset;
						break;
					case 'bottom':
						top = dims.top + dims.height + offset;
						break;
					case 'left':
						left = dims.left - selfDims.width - offset;
						break;
				}

				switch (secondary) {
					case 'top':
						top = dims.top;
						break;
					case 'right':
						left = dims.left + dims.width - selfDims.width;
						break;
					case 'bottom':
						top = dims.top + dims.height - selfDims.height;
						break;
					case 'left':
						left = dims.left;
						break;
					case 'center':
						if (/left|right/.test(main)) {
							top = dims.top + dims.height / 2 - selfDims.height / 2;
						} else {
							left = dims.left + dims.width / 2 - selfDims.width / 2;
						}
				}

				this.$datepicker.css({
					left: left,
					top: top
				});
			},

			show: function show() {
				var onShow = this.opts.onShow;

				this.setPosition(this.opts.position);
				this.$datepicker.addClass('active');
				this.visible = true;

				if (onShow) {
					this._bindVisionEvents(onShow);
				}
			},

			hide: function hide() {
				var onHide = this.opts.onHide;

				this.$datepicker.removeClass('active').css({
					left: '-100000px'
				});

				this.focused = '';
				this.keys = [];

				this.inFocus = false;
				this.visible = false;
				this.$el.blur();

				if (onHide) {
					this._bindVisionEvents(onHide);
				}
			},

			down: function down(date) {
				this._changeView(date, 'down');
			},

			up: function up(date) {
				this._changeView(date, 'up');
			},

			_bindVisionEvents: function _bindVisionEvents(event) {
				this.$datepicker.off('transitionend.dp');
				event(this, false);
				this.$datepicker.one('transitionend.dp', event.bind(this, this, true));
			},

			_changeView: function _changeView(date, dir) {
				date = date || this.focused || this.date;

				var nextView = dir == 'up' ? this.viewIndex + 1 : this.viewIndex - 1;
				if (nextView > 2) nextView = 2;
				if (nextView < 0) nextView = 0;

				this.silent = true;
				this.date = new Date(date.getFullYear(), date.getMonth(), 1);
				this.silent = false;
				this.view = this.viewIndexes[nextView];
			},

			_handleHotKey: function _handleHotKey(key) {
				var date = datepicker.getParsedDate(this._getFocusedDate()),
				    focusedParsed,
				    o = this.opts,
				    newDate,
				    totalDaysInNextMonth,
				    monthChanged = false,
				    yearChanged = false,
				    decadeChanged = false,
				    y = date.year,
				    m = date.month,
				    d = date.date;

				switch (key) {
					case 'ctrlRight':
					case 'ctrlUp':
						m += 1;
						monthChanged = true;
						break;
					case 'ctrlLeft':
					case 'ctrlDown':
						m -= 1;
						monthChanged = true;
						break;
					case 'shiftRight':
					case 'shiftUp':
						yearChanged = true;
						y += 1;
						break;
					case 'shiftLeft':
					case 'shiftDown':
						yearChanged = true;
						y -= 1;
						break;
					case 'altRight':
					case 'altUp':
						decadeChanged = true;
						y += 10;
						break;
					case 'altLeft':
					case 'altDown':
						decadeChanged = true;
						y -= 10;
						break;
					case 'ctrlShiftUp':
						this.up();
						break;
				}

				totalDaysInNextMonth = datepicker.getDaysCount(new Date(y, m));
				newDate = new Date(y, m, d);

				// If next month has less days than current, set date to total days in that month
				if (totalDaysInNextMonth < d) d = totalDaysInNextMonth;

				// Check if newDate is in valid range
				if (newDate.getTime() < this.minTime) {
					newDate = this.minDate;
				} else if (newDate.getTime() > this.maxTime) {
					newDate = this.maxDate;
				}

				this.focused = newDate;

				focusedParsed = datepicker.getParsedDate(newDate);
				if (monthChanged && o.onChangeMonth) {
					o.onChangeMonth(focusedParsed.month, focusedParsed.year);
				}
				if (yearChanged && o.onChangeYear) {
					o.onChangeYear(focusedParsed.year);
				}
				if (decadeChanged && o.onChangeDecade) {
					o.onChangeDecade(this.curDecade);
				}
			},

			_registerKey: function _registerKey(key) {
				var exists = this.keys.some(function (curKey) {
					return curKey == key;
				});

				if (!exists) {
					this.keys.push(key);
				}
			},

			_unRegisterKey: function _unRegisterKey(key) {
				var index = this.keys.indexOf(key);

				this.keys.splice(index, 1);
			},

			_isHotKeyPressed: function _isHotKeyPressed() {
				var currentHotKey,
				    found = false,
				    _this = this,
				    pressedKeys = this.keys.sort();

				for (var hotKey in hotKeys) {
					currentHotKey = hotKeys[hotKey];
					if (pressedKeys.length != currentHotKey.length) continue;

					if (currentHotKey.every(function (key, i) {
						return key == pressedKeys[i];
					})) {
						_this._trigger('hotKey', hotKey);
						found = true;
					}
				}

				return found;
			},

			_trigger: function _trigger(event, args) {
				this.$el.trigger(event, args);
			},

			_focusNextCell: function _focusNextCell(keyCode, type) {
				type = type || this.cellType;

				var date = datepicker.getParsedDate(this._getFocusedDate()),
				    y = date.year,
				    m = date.month,
				    d = date.date;

				if (this._isHotKeyPressed()) {
					return;
				}

				switch (keyCode) {
					case 37:
						// left
						type == 'day' ? d -= 1 : '';
						type == 'month' ? m -= 1 : '';
						type == 'year' ? y -= 1 : '';
						break;
					case 38:
						// up
						type == 'day' ? d -= 7 : '';
						type == 'month' ? m -= 3 : '';
						type == 'year' ? y -= 4 : '';
						break;
					case 39:
						// right
						type == 'day' ? d += 1 : '';
						type == 'month' ? m += 1 : '';
						type == 'year' ? y += 1 : '';
						break;
					case 40:
						// down
						type == 'day' ? d += 7 : '';
						type == 'month' ? m += 3 : '';
						type == 'year' ? y += 4 : '';
						break;
				}

				var nd = new Date(y, m, d);
				if (nd.getTime() < this.minTime) {
					nd = this.minDate;
				} else if (nd.getTime() > this.maxTime) {
					nd = this.maxDate;
				}

				this.focused = nd;
			},

			_getFocusedDate: function _getFocusedDate() {
				var focused = this.focused || this.selectedDates[this.selectedDates.length - 1],
				    d = this.parsedDate;

				if (!focused) {
					switch (this.view) {
						case 'days':
							focused = new Date(d.year, d.month, new Date().getDate());
							break;
						case 'months':
							focused = new Date(d.year, d.month, 1);
							break;
						case 'years':
							focused = new Date(d.year, 0, 1);
							break;
					}
				}

				return focused;
			},

			_getCell: function _getCell(date, type) {
				type = type || this.cellType;

				var d = datepicker.getParsedDate(date),
				    selector = '.datepicker--cell[data-year="' + d.year + '"]',
				    $cell;

				switch (type) {
					case 'month':
						selector = '[data-month="' + d.month + '"]';
						break;
					case 'day':
						selector += '[data-month="' + d.month + '"][data-date="' + d.date + '"]';
						break;
				}
				$cell = this.views[this.currentView].$el.find(selector);

				return $cell.length ? $cell : $('');
			},

			destroy: function destroy() {
				var _this = this;
				_this.$el.off('.adp').data('datepicker', '');

				_this.selectedDates = [];
				_this.focused = '';
				_this.views = {};
				_this.keys = [];
				_this.minRange = '';
				_this.maxRange = '';

				if (_this.opts.inline || !_this.elIsInput) {
					_this.$datepicker.closest('.datepicker-inline').remove();
				} else {
					_this.$datepicker.remove();
				}
			},

			_handleAlreadySelectedDates: function _handleAlreadySelectedDates(alreadySelected, selectedDate) {
				if (this.opts.range) {
					if (!this.opts.toggleSelected) {
						// Add possibility to select same date when range is true
						if (this.selectedDates.length != 2) {
							this._trigger('clickCell', selectedDate);
						}
					} else {
						this.removeDate(selectedDate);
					}
				} else if (this.opts.toggleSelected) {
					this.removeDate(selectedDate);
				}

				// Change last selected date to be able to change time when clicking on this cell
				if (!this.opts.toggleSelected) {
					this.lastSelectedDate = alreadySelected;
					if (this.opts.timepicker) {
						this.timepicker._setTime(alreadySelected);
						this.timepicker.update();
					}
				}
			},

			_onShowEvent: function _onShowEvent(e) {
				if (!this.visible) {
					this.show();
				}
			},

			_onBlur: function _onBlur() {
				if (!this.inFocus && this.visible) {
					this.hide();
				}
			},

			_onMouseDownDatepicker: function _onMouseDownDatepicker(e) {
				this.inFocus = true;
			},

			_onMouseUpDatepicker: function _onMouseUpDatepicker(e) {
				this.inFocus = false;
				e.originalEvent.inFocus = true;
				if (!e.originalEvent.timepickerFocus) this.$el.focus();
			},

			_onKeyUpGeneral: function _onKeyUpGeneral(e) {
				var val = this.$el.val();

				if (!val) {
					this.clear();
				}
			},

			_onResize: function _onResize() {
				if (this.visible) {
					this.setPosition();
				}
			},

			_onMouseUpBody: function _onMouseUpBody(e) {
				if (e.originalEvent.inFocus) return;

				if (this.visible && !this.inFocus) {
					this.hide();
				}
			},

			_onMouseUpEl: function _onMouseUpEl(e) {
				e.originalEvent.inFocus = true;
				setTimeout(this._onKeyUpGeneral.bind(this), 4);
			},

			_onKeyDown: function _onKeyDown(e) {
				var code = e.which;
				this._registerKey(code);

				// Arrows
				if (code >= 37 && code <= 40) {
					e.preventDefault();
					this._focusNextCell(code);
				}

				// Enter
				if (code == 13) {
					if (this.focused) {
						if (this._getCell(this.focused).hasClass('-disabled-')) return;
						if (this.view != this.opts.minView) {
							this.down();
						} else {
							var alreadySelected = this._isSelected(this.focused, this.cellType);

							if (!alreadySelected) {
								if (this.timepicker) {
									this.focused.setHours(this.timepicker.hours);
									this.focused.setMinutes(this.timepicker.minutes);
								}
								this.selectDate(this.focused);
								return;
							}
							this._handleAlreadySelectedDates(alreadySelected, this.focused);
						}
					}
				}

				// Esc
				if (code == 27) {
					this.hide();
				}
			},

			_onKeyUp: function _onKeyUp(e) {
				var code = e.which;
				this._unRegisterKey(code);
			},

			_onHotKey: function _onHotKey(e, hotKey) {
				this._handleHotKey(hotKey);
			},

			_onMouseEnterCell: function _onMouseEnterCell(e) {
				var $cell = $(e.target).closest('.datepicker--cell'),
				    date = this._getDateFromCell($cell);

				// Prevent from unnecessary rendering and setting new currentDate
				this.silent = true;

				if (this.focused) {
					this.focused = '';
				}

				$cell.addClass('-focus-');

				this.focused = date;
				this.silent = false;

				if (this.opts.range && this.selectedDates.length == 1) {
					this.minRange = this.selectedDates[0];
					this.maxRange = '';
					if (datepicker.less(this.minRange, this.focused)) {
						this.maxRange = this.minRange;
						this.minRange = '';
					}
					this.views[this.currentView]._update();
				}
			},

			_onMouseLeaveCell: function _onMouseLeaveCell(e) {
				var $cell = $(e.target).closest('.datepicker--cell');

				$cell.removeClass('-focus-');

				this.silent = true;
				this.focused = '';
				this.silent = false;
			},

			_onTimeChange: function _onTimeChange(e, h, m) {
				var date = new Date(),
				    selectedDates = this.selectedDates,
				    selected = false;

				if (selectedDates.length) {
					selected = true;
					date = this.lastSelectedDate;
				}

				date.setHours(h);
				date.setMinutes(m);

				if (!selected && !this._getCell(date).hasClass('-disabled-')) {
					this.selectDate(date);
				} else {
					this._setInputValue();
					if (this.opts.onSelect) {
						this._triggerOnChange();
					}
				}
			},

			_onClickCell: function _onClickCell(e, date) {
				if (this.timepicker) {
					date.setHours(this.timepicker.hours);
					date.setMinutes(this.timepicker.minutes);
				}
				this.selectDate(date);
			},

			set focused(val) {
				if (!val && this.focused) {
					var $cell = this._getCell(this.focused);

					if ($cell.length) {
						$cell.removeClass('-focus-');
					}
				}
				this._focused = val;
				if (this.opts.range && this.selectedDates.length == 1) {
					this.minRange = this.selectedDates[0];
					this.maxRange = '';
					if (datepicker.less(this.minRange, this._focused)) {
						this.maxRange = this.minRange;
						this.minRange = '';
					}
				}
				if (this.silent) return;
				this.date = val;
			},

			get focused() {
				return this._focused;
			},

			get parsedDate() {
				return datepicker.getParsedDate(this.date);
			},

			set date(val) {
				if (!(val instanceof Date)) return;

				this.currentDate = val;

				if (this.inited && !this.silent) {
					this.views[this.view]._render();
					this.nav._render();
					if (this.visible && this.elIsInput) {
						this.setPosition();
					}
				}
				return val;
			},

			get date() {
				return this.currentDate;
			},

			set view(val) {
				this.viewIndex = this.viewIndexes.indexOf(val);

				if (this.viewIndex < 0) {
					return;
				}

				this.prevView = this.currentView;
				this.currentView = val;

				if (this.inited) {
					if (!this.views[val]) {
						this.views[val] = new $.fn.datepicker.Body(this, val, this.opts);
					} else {
						this.views[val]._render();
					}

					this.views[this.prevView].hide();
					this.views[val].show();
					this.nav._render();

					if (this.opts.onChangeView) {
						this.opts.onChangeView(val);
					}
					if (this.elIsInput && this.visible) this.setPosition();
				}

				return val;
			},

			get view() {
				return this.currentView;
			},

			get cellType() {
				return this.view.substring(0, this.view.length - 1);
			},

			get minTime() {
				var min = datepicker.getParsedDate(this.minDate);
				return new Date(min.year, min.month, min.date).getTime();
			},

			get maxTime() {
				var max = datepicker.getParsedDate(this.maxDate);
				return new Date(max.year, max.month, max.date).getTime();
			},

			get curDecade() {
				return datepicker.getDecade(this.date);
			}
		};

		//  Utils
		// -------------------------------------------------

		datepicker.getDaysCount = function (date) {
			return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
		};

		datepicker.getParsedDate = function (date) {
			return {
				year: date.getFullYear(),
				month: date.getMonth(),
				fullMonth: date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1, // One based
				date: date.getDate(),
				fullDate: date.getDate() < 10 ? '0' + date.getDate() : date.getDate(),
				day: date.getDay(),
				hours: date.getHours(),
				fullHours: date.getHours() < 10 ? '0' + date.getHours() : date.getHours(),
				minutes: date.getMinutes(),
				fullMinutes: date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()
			};
		};

		datepicker.getDecade = function (date) {
			var firstYear = Math.floor(date.getFullYear() / 10) * 10;

			return [firstYear, firstYear + 9];
		};

		datepicker.template = function (str, data) {
			return str.replace(/#\{([\w]+)\}/g, function (source, match) {
				if (data[match] || data[match] === 0) {
					return data[match];
				}
			});
		};

		datepicker.isSame = function (date1, date2, type) {
			if (!date1 || !date2) return false;
			var d1 = datepicker.getParsedDate(date1),
			    d2 = datepicker.getParsedDate(date2),
			    _type = type ? type : 'day',
			    conditions = {
				day: d1.date == d2.date && d1.month == d2.month && d1.year == d2.year,
				month: d1.month == d2.month && d1.year == d2.year,
				year: d1.year == d2.year
			};

			return conditions[_type];
		};

		datepicker.less = function (dateCompareTo, date, type) {
			if (!dateCompareTo || !date) return false;
			return date.getTime() < dateCompareTo.getTime();
		};

		datepicker.bigger = function (dateCompareTo, date, type) {
			if (!dateCompareTo || !date) return false;
			return date.getTime() > dateCompareTo.getTime();
		};

		datepicker.getLeadingZeroNum = function (num) {
			return parseInt(num) < 10 ? '0' + num : num;
		};

		/**
   * Returns copy of date with hours and minutes equals to 0
   * @param date {Date}
   */
		datepicker.resetTime = function (date) {
			if ((typeof date === 'undefined' ? 'undefined' : _typeof(date)) != 'object') return;
			date = datepicker.getParsedDate(date);
			return new Date(date.year, date.month, date.date);
		};

		$.fn.datepicker = function (options) {
			return this.each(function () {
				if (!$.data(this, pluginName)) {
					$.data(this, pluginName, new Datepicker(this, options));
				} else {
					var _this = $.data(this, pluginName);

					_this.opts = $.extend(true, _this.opts, options);
					_this.update();
				}
			});
		};

		$.fn.datepicker.Constructor = Datepicker;

		$.fn.datepicker.language = {
			ru: {
				days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
				daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],
				daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
				months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
				monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
				today: 'Сегодня',
				clear: 'Очистить',
				dateFormat: 'dd.mm.yyyy',
				timeFormat: 'hh:ii',
				firstDay: 1
			}
		};

		$(function () {
			$(autoInitSelector).datepicker();
		});
	})();

	;(function () {
		var templates = {
			days: '' + '<div class="datepicker--days datepicker--body">' + '<div class="datepicker--days-names"></div>' + '<div class="datepicker--cells datepicker--cells-days"></div>' + '</div>',
			months: '' + '<div class="datepicker--months datepicker--body">' + '<div class="datepicker--cells datepicker--cells-months"></div>' + '</div>',
			years: '' + '<div class="datepicker--years datepicker--body">' + '<div class="datepicker--cells datepicker--cells-years"></div>' + '</div>'
		},
		    datepicker = $.fn.datepicker,
		    dp = datepicker.Constructor;

		datepicker.Body = function (d, type, opts) {
			this.d = d;
			this.type = type;
			this.opts = opts;
			this.$el = $('');

			if (this.opts.onlyTimepicker) return;
			this.init();
		};

		datepicker.Body.prototype = {
			init: function init() {
				this._buildBaseHtml();
				this._render();

				this._bindEvents();
			},

			_bindEvents: function _bindEvents() {
				this.$el.on('click', '.datepicker--cell', $.proxy(this._onClickCell, this));
			},

			_buildBaseHtml: function _buildBaseHtml() {
				this.$el = $(templates[this.type]).appendTo(this.d.$content);
				this.$names = $('.datepicker--days-names', this.$el);
				this.$cells = $('.datepicker--cells', this.$el);
			},

			_getDayNamesHtml: function _getDayNamesHtml(firstDay, curDay, html, i) {
				curDay = curDay != undefined ? curDay : firstDay;
				html = html ? html : '';
				i = i != undefined ? i : 0;

				if (i > 7) return html;
				if (curDay == 7) return this._getDayNamesHtml(firstDay, 0, html, ++i);

				html += '<div class="datepicker--day-name' + (this.d.isWeekend(curDay) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[curDay] + '</div>';

				return this._getDayNamesHtml(firstDay, ++curDay, html, ++i);
			},

			_getCellContents: function _getCellContents(date, type) {
				var classes = "datepicker--cell datepicker--cell-" + type,
				    currentDate = new Date(),
				    parent = this.d,
				    minRange = dp.resetTime(parent.minRange),
				    maxRange = dp.resetTime(parent.maxRange),
				    opts = parent.opts,
				    d = dp.getParsedDate(date),
				    render = {},
				    html = d.date;

				switch (type) {
					case 'day':
						if (parent.isWeekend(d.day)) classes += " -weekend-";
						if (d.month != this.d.parsedDate.month) {
							classes += " -other-month-";
							if (!opts.selectOtherMonths) {
								classes += " -disabled-";
							}
							if (!opts.showOtherMonths) html = '';
						}
						break;
					case 'month':
						html = parent.loc[parent.opts.monthsField][d.month];
						break;
					case 'year':
						var decade = parent.curDecade;
						html = d.year;
						if (d.year < decade[0] || d.year > decade[1]) {
							classes += ' -other-decade-';
							if (!opts.selectOtherYears) {
								classes += " -disabled-";
							}
							if (!opts.showOtherYears) html = '';
						}
						break;
				}

				if (opts.onRenderCell) {
					render = opts.onRenderCell(date, type) || {};
					html = render.html ? render.html : html;
					classes += render.classes ? ' ' + render.classes : '';
				}

				if (opts.range) {
					if (dp.isSame(minRange, date, type)) classes += ' -range-from-';
					if (dp.isSame(maxRange, date, type)) classes += ' -range-to-';

					if (parent.selectedDates.length == 1 && parent.focused) {
						if (dp.bigger(minRange, date) && dp.less(parent.focused, date) || dp.less(maxRange, date) && dp.bigger(parent.focused, date)) {
							classes += ' -in-range-';
						}

						if (dp.less(maxRange, date) && dp.isSame(parent.focused, date)) {
							classes += ' -range-from-';
						}
						if (dp.bigger(minRange, date) && dp.isSame(parent.focused, date)) {
							classes += ' -range-to-';
						}
					} else if (parent.selectedDates.length == 2) {
						if (dp.bigger(minRange, date) && dp.less(maxRange, date)) {
							classes += ' -in-range-';
						}
					}
				}

				if (dp.isSame(currentDate, date, type)) classes += ' -current-';
				if (parent.focused && dp.isSame(date, parent.focused, type)) classes += ' -focus-';
				if (parent._isSelected(date, type)) classes += ' -selected-';
				if (!parent._isInRange(date, type) || render.disabled) classes += ' -disabled-';

				return {
					html: html,
					classes: classes
				};
			},

			/**
    * Calculates days number to render. Generates days html and returns it.
    * @param {object} date - Date object
    * @returns {string}
    * @private
    */
			_getDaysHtml: function _getDaysHtml(date) {
				var totalMonthDays = dp.getDaysCount(date),
				    firstMonthDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay(),
				    lastMonthDay = new Date(date.getFullYear(), date.getMonth(), totalMonthDays).getDay(),
				    daysFromPevMonth = firstMonthDay - this.d.loc.firstDay,
				    daysFromNextMonth = 6 - lastMonthDay + this.d.loc.firstDay;

				daysFromPevMonth = daysFromPevMonth < 0 ? daysFromPevMonth + 7 : daysFromPevMonth;
				daysFromNextMonth = daysFromNextMonth > 6 ? daysFromNextMonth - 7 : daysFromNextMonth;

				var startDayIndex = -daysFromPevMonth + 1,
				    m,
				    y,
				    html = '';

				for (var i = startDayIndex, max = totalMonthDays + daysFromNextMonth; i <= max; i++) {
					y = date.getFullYear();
					m = date.getMonth();

					html += this._getDayHtml(new Date(y, m, i));
				}

				return html;
			},

			_getDayHtml: function _getDayHtml(date) {
				var content = this._getCellContents(date, 'day');

				return '<div class="' + content.classes + '" ' + 'data-date="' + date.getDate() + '" ' + 'data-month="' + date.getMonth() + '" ' + 'data-year="' + date.getFullYear() + '">' + content.html + '</div>';
			},

			/**
    * Generates months html
    * @param {object} date - date instance
    * @returns {string}
    * @private
    */
			_getMonthsHtml: function _getMonthsHtml(date) {
				var html = '',
				    d = dp.getParsedDate(date),
				    i = 0;

				while (i < 12) {
					html += this._getMonthHtml(new Date(d.year, i));
					i++;
				}

				return html;
			},

			_getMonthHtml: function _getMonthHtml(date) {
				var content = this._getCellContents(date, 'month');

				return '<div class="' + content.classes + '" data-month="' + date.getMonth() + '">' + content.html + '</div>';
			},

			_getYearsHtml: function _getYearsHtml(date) {
				var d = dp.getParsedDate(date),
				    decade = dp.getDecade(date),
				    firstYear = decade[0] - 1,
				    html = '',
				    i = firstYear;

				for (i; i <= decade[1] + 1; i++) {
					html += this._getYearHtml(new Date(i, 0));
				}

				return html;
			},

			_getYearHtml: function _getYearHtml(date) {
				var content = this._getCellContents(date, 'year');

				return '<div class="' + content.classes + '" data-year="' + date.getFullYear() + '">' + content.html + '</div>';
			},

			_renderTypes: {
				days: function days() {
					var dayNames = this._getDayNamesHtml(this.d.loc.firstDay),
					    days = this._getDaysHtml(this.d.currentDate);

					this.$cells.html(days);
					this.$names.html(dayNames);
				},
				months: function months() {
					var html = this._getMonthsHtml(this.d.currentDate);

					this.$cells.html(html);
				},
				years: function years() {
					var html = this._getYearsHtml(this.d.currentDate);

					this.$cells.html(html);
				}
			},

			_render: function _render() {
				if (this.opts.onlyTimepicker) return;
				this._renderTypes[this.type].bind(this)();
			},

			_update: function _update() {
				var $cells = $('.datepicker--cell', this.$cells),
				    _this = this,
				    classes,
				    $cell,
				    date;
				$cells.each(function (cell, i) {
					$cell = $(this);
					date = _this.d._getDateFromCell($(this));
					classes = _this._getCellContents(date, _this.d.cellType);
					$cell.attr('class', classes.classes);
				});
			},

			show: function show() {
				if (this.opts.onlyTimepicker) return;
				this.$el.addClass('active');
				this.acitve = true;
			},

			hide: function hide() {
				this.$el.removeClass('active');
				this.active = false;
			},

			//  Events
			// -------------------------------------------------

			_handleClick: function _handleClick(el) {
				var date = el.data('date') || 1,
				    month = el.data('month') || 0,
				    year = el.data('year') || this.d.parsedDate.year,
				    dp = this.d;
				// Change view if min view does not reach yet
				if (dp.view != this.opts.minView) {
					dp.down(new Date(year, month, date));
					return;
				}
				// Select date if min view is reached
				var selectedDate = new Date(year, month, date),
				    alreadySelected = this.d._isSelected(selectedDate, this.d.cellType);

				if (!alreadySelected) {
					dp._trigger('clickCell', selectedDate);
					return;
				}

				dp._handleAlreadySelectedDates.bind(dp, alreadySelected, selectedDate)();
			},

			_onClickCell: function _onClickCell(e) {
				var $el = $(e.target).closest('.datepicker--cell');

				if ($el.hasClass('-disabled-')) return;

				this._handleClick.bind(this)($el);
			}
		};
	})();

	;(function () {
		var template = '' + '<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div>' + '<div class="datepicker--nav-title">#{title}</div>' + '<div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',
		    buttonsContainerTemplate = '<div class="datepicker--buttons"></div>',
		    button = '<span class="datepicker--button" data-action="#{action}">#{label}</span>',
		    datepicker = $.fn.datepicker,
		    dp = datepicker.Constructor;

		datepicker.Navigation = function (d, opts) {
			this.d = d;
			this.opts = opts;

			this.$buttonsContainer = '';

			this.init();
		};

		datepicker.Navigation.prototype = {
			init: function init() {
				this._buildBaseHtml();
				this._bindEvents();
			},

			_bindEvents: function _bindEvents() {
				this.d.$nav.on('click', '.datepicker--nav-action', $.proxy(this._onClickNavButton, this));
				this.d.$nav.on('click', '.datepicker--nav-title', $.proxy(this._onClickNavTitle, this));
				this.d.$datepicker.on('click', '.datepicker--button', $.proxy(this._onClickNavButton, this));
			},

			_buildBaseHtml: function _buildBaseHtml() {
				if (!this.opts.onlyTimepicker) {
					this._render();
				}
				this._addButtonsIfNeed();
			},

			_addButtonsIfNeed: function _addButtonsIfNeed() {
				if (this.opts.todayButton) {
					this._addButton('today');
				}
				if (this.opts.clearButton) {
					this._addButton('clear');
				}
			},

			_render: function _render() {
				var title = this._getTitle(this.d.currentDate),
				    html = dp.template(template, $.extend({ title: title }, this.opts));
				this.d.$nav.html(html);
				if (this.d.view == 'years') {
					$('.datepicker--nav-title', this.d.$nav).addClass('-disabled-');
				}
				this.setNavStatus();
			},

			_getTitle: function _getTitle(date) {
				return this.d.formatDate(this.opts.navTitles[this.d.view], date);
			},

			_addButton: function _addButton(type) {
				if (!this.$buttonsContainer.length) {
					this._addButtonsContainer();
				}

				var data = {
					action: type,
					label: this.d.loc[type]
				},
				    html = dp.template(button, data);

				if ($('[data-action=' + type + ']', this.$buttonsContainer).length) return;
				this.$buttonsContainer.append(html);
			},

			_addButtonsContainer: function _addButtonsContainer() {
				this.d.$datepicker.append(buttonsContainerTemplate);
				this.$buttonsContainer = $('.datepicker--buttons', this.d.$datepicker);
			},

			setNavStatus: function setNavStatus() {
				if (!(this.opts.minDate || this.opts.maxDate) || !this.opts.disableNavWhenOutOfRange) return;

				var date = this.d.parsedDate,
				    m = date.month,
				    y = date.year,
				    d = date.date;

				switch (this.d.view) {
					case 'days':
						if (!this.d._isInRange(new Date(y, m - 1, 1), 'month')) {
							this._disableNav('prev');
						}
						if (!this.d._isInRange(new Date(y, m + 1, 1), 'month')) {
							this._disableNav('next');
						}
						break;
					case 'months':
						if (!this.d._isInRange(new Date(y - 1, m, d), 'year')) {
							this._disableNav('prev');
						}
						if (!this.d._isInRange(new Date(y + 1, m, d), 'year')) {
							this._disableNav('next');
						}
						break;
					case 'years':
						var decade = dp.getDecade(this.d.date);
						if (!this.d._isInRange(new Date(decade[0] - 1, 0, 1), 'year')) {
							this._disableNav('prev');
						}
						if (!this.d._isInRange(new Date(decade[1] + 1, 0, 1), 'year')) {
							this._disableNav('next');
						}
						break;
				}
			},

			_disableNav: function _disableNav(nav) {
				$('[data-action="' + nav + '"]', this.d.$nav).addClass('-disabled-');
			},

			_activateNav: function _activateNav(nav) {
				$('[data-action="' + nav + '"]', this.d.$nav).removeClass('-disabled-');
			},

			_onClickNavButton: function _onClickNavButton(e) {
				var $el = $(e.target).closest('[data-action]'),
				    action = $el.data('action');

				this.d[action]();
			},

			_onClickNavTitle: function _onClickNavTitle(e) {
				if ($(e.target).hasClass('-disabled-')) return;

				if (this.d.view == 'days') {
					return this.d.view = 'months';
				}

				this.d.view = 'years';
			}
		};
	})();

	;(function () {
		var template = '<div class="datepicker--time">' + '<div class="datepicker--time-current">' + '   <span class="datepicker--time-current-hours">#{hourVisible}</span>' + '   <span class="datepicker--time-current-colon">:</span>' + '   <span class="datepicker--time-current-minutes">#{minValue}</span>' + '</div>' + '<div class="datepicker--time-sliders">' + '   <div class="datepicker--time-row">' + '	  <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>' + '   </div>' + '   <div class="datepicker--time-row">' + '	  <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>' + '   </div>' + '</div>' + '</div>',
		    datepicker = $.fn.datepicker,
		    dp = datepicker.Constructor;

		datepicker.Timepicker = function (inst, opts) {
			this.d = inst;
			this.opts = opts;

			this.init();
		};

		datepicker.Timepicker.prototype = {
			init: function init() {
				var input = 'input';
				this._setTime(this.d.date);
				this._buildHTML();

				if (navigator.userAgent.match(/trident/gi)) {
					input = 'change';
				}

				this.d.$el.on('selectDate', this._onSelectDate.bind(this));
				this.$ranges.on(input, this._onChangeRange.bind(this));
				this.$ranges.on('mouseup', this._onMouseUpRange.bind(this));
				this.$ranges.on('mousemove focus ', this._onMouseEnterRange.bind(this));
				this.$ranges.on('mouseout blur', this._onMouseOutRange.bind(this));
			},

			_setTime: function _setTime(date) {
				var _date = dp.getParsedDate(date);

				this._handleDate(date);
				this.hours = _date.hours < this.minHours ? this.minHours : _date.hours;
				this.minutes = _date.minutes < this.minMinutes ? this.minMinutes : _date.minutes;
			},

			/**
    * Sets minHours and minMinutes from date (usually it's a minDate)
    * Also changes minMinutes if current hours are bigger then @date hours
    * @param date {Date}
    * @private
    */
			_setMinTimeFromDate: function _setMinTimeFromDate(date) {
				this.minHours = date.getHours();
				this.minMinutes = date.getMinutes();

				// If, for example, min hours are 10, and current hours are 12,
				// update minMinutes to default value, to be able to choose whole range of values
				if (this.d.lastSelectedDate) {
					if (this.d.lastSelectedDate.getHours() > date.getHours()) {
						this.minMinutes = this.opts.minMinutes;
					}
				}
			},

			_setMaxTimeFromDate: function _setMaxTimeFromDate(date) {
				this.maxHours = date.getHours();
				this.maxMinutes = date.getMinutes();

				if (this.d.lastSelectedDate) {
					if (this.d.lastSelectedDate.getHours() < date.getHours()) {
						this.maxMinutes = this.opts.maxMinutes;
					}
				}
			},

			_setDefaultMinMaxTime: function _setDefaultMinMaxTime() {
				var maxHours = 23,
				    maxMinutes = 59,
				    opts = this.opts;

				this.minHours = opts.minHours < 0 || opts.minHours > maxHours ? 0 : opts.minHours;
				this.minMinutes = opts.minMinutes < 0 || opts.minMinutes > maxMinutes ? 0 : opts.minMinutes;
				this.maxHours = opts.maxHours < 0 || opts.maxHours > maxHours ? maxHours : opts.maxHours;
				this.maxMinutes = opts.maxMinutes < 0 || opts.maxMinutes > maxMinutes ? maxMinutes : opts.maxMinutes;
			},

			/**
    * Looks for min/max hours/minutes and if current values
    * are out of range sets valid values.
    * @private
    */
			_validateHoursMinutes: function _validateHoursMinutes(date) {
				if (this.hours < this.minHours) {
					this.hours = this.minHours;
				} else if (this.hours > this.maxHours) {
					this.hours = this.maxHours;
				}

				if (this.minutes < this.minMinutes) {
					this.minutes = this.minMinutes;
				} else if (this.minutes > this.maxMinutes) {
					this.minutes = this.maxMinutes;
				}
			},

			_buildHTML: function _buildHTML() {
				var lz = dp.getLeadingZeroNum,
				    data = {
					hourMin: this.minHours,
					hourMax: lz(this.maxHours),
					hourStep: this.opts.hoursStep,
					hourValue: this.hours,
					hourVisible: lz(this.displayHours),
					minMin: this.minMinutes,
					minMax: lz(this.maxMinutes),
					minStep: this.opts.minutesStep,
					minValue: lz(this.minutes)
				},
				    _template = dp.template(template, data);

				this.$timepicker = $(_template).appendTo(this.d.$datepicker);
				this.$ranges = $('[type="range"]', this.$timepicker);
				this.$hours = $('[name="hours"]', this.$timepicker);
				this.$minutes = $('[name="minutes"]', this.$timepicker);
				this.$hoursText = $('.datepicker--time-current-hours', this.$timepicker);
				this.$minutesText = $('.datepicker--time-current-minutes', this.$timepicker);

				if (this.d.ampm) {
					this.$ampm = $('<span class="datepicker--time-current-ampm">').appendTo($('.datepicker--time-current', this.$timepicker)).html(this.dayPeriod);

					this.$timepicker.addClass('-am-pm-');
				}
			},

			_updateCurrentTime: function _updateCurrentTime() {
				var h = dp.getLeadingZeroNum(this.displayHours),
				    m = dp.getLeadingZeroNum(this.minutes);

				this.$hoursText.html(h);
				this.$minutesText.html(m);

				if (this.d.ampm) {
					this.$ampm.html(this.dayPeriod);
				}
			},

			_updateRanges: function _updateRanges() {
				this.$hours.attr({
					min: this.minHours,
					max: this.maxHours
				}).val(this.hours);

				this.$minutes.attr({
					min: this.minMinutes,
					max: this.maxMinutes
				}).val(this.minutes);
			},

			/**
    * Sets minHours, minMinutes etc. from date. If date is not passed, than sets
    * values from options
    * @param [date] {object} - Date object, to get values from
    * @private
    */
			_handleDate: function _handleDate(date) {
				this._setDefaultMinMaxTime();
				if (date) {
					if (dp.isSame(date, this.d.opts.minDate)) {
						this._setMinTimeFromDate(this.d.opts.minDate);
					} else if (dp.isSame(date, this.d.opts.maxDate)) {
						this._setMaxTimeFromDate(this.d.opts.maxDate);
					}
				}

				this._validateHoursMinutes(date);
			},

			update: function update() {
				this._updateRanges();
				this._updateCurrentTime();
			},

			/**
    * Calculates valid hour value to display in text input and datepicker's body.
    * @param date {Date|Number} - date or hours
    * @param [ampm] {Boolean} - 12 hours mode
    * @returns {{hours: *, dayPeriod: string}}
    * @private
    */
			_getValidHoursFromDate: function _getValidHoursFromDate(date, ampm) {
				var d = date,
				    hours = date;

				if (date instanceof Date) {
					d = dp.getParsedDate(date);
					hours = d.hours;
				}

				var _ampm = ampm || this.d.ampm,
				    dayPeriod = 'am';

				if (_ampm) {
					switch (true) {
						case hours == 0:
							hours = 12;
							break;
						case hours == 12:
							dayPeriod = 'pm';
							break;
						case hours > 11:
							hours = hours - 12;
							dayPeriod = 'pm';
							break;
						default:
							break;
					}
				}

				return {
					hours: hours,
					dayPeriod: dayPeriod
				};
			},

			set hours(val) {
				this._hours = val;

				var displayHours = this._getValidHoursFromDate(val);

				this.displayHours = displayHours.hours;
				this.dayPeriod = displayHours.dayPeriod;
			},

			get hours() {
				return this._hours;
			},

			//  Events
			// -------------------------------------------------

			_onChangeRange: function _onChangeRange(e) {
				var $target = $(e.target),
				    name = $target.attr('name');

				this.d.timepickerIsActive = true;

				this[name] = $target.val();
				this._updateCurrentTime();
				this.d._trigger('timeChange', [this.hours, this.minutes]);

				this._handleDate(this.d.lastSelectedDate);
				this.update();
			},

			_onSelectDate: function _onSelectDate(e, data) {
				this._handleDate(data);
				this.update();
			},

			_onMouseEnterRange: function _onMouseEnterRange(e) {
				var name = $(e.target).attr('name');
				$('.datepicker--time-current-' + name, this.$timepicker).addClass('-focus-');
			},

			_onMouseOutRange: function _onMouseOutRange(e) {
				var name = $(e.target).attr('name');
				if (this.d.inFocus) return; // Prevent removing focus when mouse out of range slider
				$('.datepicker--time-current-' + name, this.$timepicker).removeClass('-focus-');
			},

			_onMouseUpRange: function _onMouseUpRange(e) {
				this.d.timepickerIsActive = false;
			}
		};
	})();
})(window, jQuery);

;(function ($) {
	$.fn.datepicker.language['ja'] = {
		days: ['日', '月', '火', '水', '木', '金', '土'],
		daysShort: ['日', '月', '火', '水', '木', '金', '土'],
		daysMin: ['日', '月', '火', '水', '木', '金', '土'],
		months: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
		monthsShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
		today: '今日',
		clear: 'クリア',
		dateFormat: 'yyyy-mm-dd',
		timeFormat: 'hh:ii',
		firstDay: 0
	};
})(jQuery);

/***/ }),

/***/ "./mock/admin/src/js/libraries/app.js":
/*!********************************************!*\
  !*** ./mock/admin/src/js/libraries/app.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*****
* CONFIGURATION
*/

//Main navigation
$.navigation = $('nav > ul.nav');

$.panelIconOpened = 'icon-arrow-up';
$.panelIconClosed = 'icon-arrow-down';

//Default colours
$.brandPrimary = '#20a8d8';
$.brandSuccess = '#4dbd74';
$.brandInfo = '#63c2de';
$.brandWarning = '#f8cb00';
$.brandDanger = '#f86c6b';

$.grayDark = '#2a2c36';
$.gray = '#55595c';
$.grayLight = '#818a91';
$.grayLighter = '#d1d4d7';
$.grayLightest = '#f8f9fa';

'use strict';

/****
* MAIN NAVIGATION
*/

$(document).ready(function ($) {

	// Add class .active to current link
	$.navigation.find('a').each(function () {

		var cUrl = String(window.location).split('?')[0];

		if (cUrl.substr(cUrl.length - 1) == '#') {
			cUrl = cUrl.slice(0, -1);
		}

		if ($($(this))[0].href == cUrl) {
			$(this).addClass('active');

			$(this).parents('ul').add(this).each(function () {
				$(this).parent().addClass('open');
			});
		}
	});

	// Dropdown Menu
	$.navigation.on('click', 'a', function (e) {

		if ($.ajaxLoad) {
			e.preventDefault();
		}

		if ($(this).hasClass('nav-dropdown-toggle')) {
			$(this).parent().toggleClass('open');
			resizeBroadcast();
		}
	});

	function resizeBroadcast() {

		var timesRun = 0;
		var interval = setInterval(function () {
			timesRun += 1;
			if (timesRun === 5) {
				clearInterval(interval);
			}
			window.dispatchEvent(new Event('resize'));
		}, 62.5);
	}

	/* ---------- Main Menu Open/Close, Min/Full ---------- */
	$('.sidebar-toggler').click(function () {
		$('body').toggleClass('sidebar-hidden');
		resizeBroadcast();
	});

	$('.sidebar-minimizer').click(function () {
		$('body').toggleClass('sidebar-minimized');
		resizeBroadcast();
	});

	$('.brand-minimizer').click(function () {
		$('body').toggleClass('brand-minimized');
	});

	$('.aside-menu-toggler').click(function () {
		$('body').toggleClass('aside-menu-hidden');
		resizeBroadcast();
	});

	$('.mobile-sidebar-toggler').click(function () {
		$('body').toggleClass('sidebar-mobile-show');
		resizeBroadcast();
	});

	$('.sidebar-close').click(function () {
		$('body').toggleClass('sidebar-opened').parent().toggleClass('sidebar-opened');
	});

	/* ---------- Disable moving to top ---------- */
	$('a[href="#"][data-top!=true]').click(function (e) {
		e.preventDefault();
	});
});

/****
* CARDS ACTIONS
*/

$(document).on('click', '.card-actions a', function (e) {
	e.preventDefault();

	if ($(this).hasClass('btn-close')) {
		$(this).parent().parent().parent().fadeOut();
	} else if ($(this).hasClass('btn-minimize')) {
		var $target = $(this).parent().parent().next('.card-body');
		if (!$(this).hasClass('collapsed')) {
			$('i', $(this)).removeClass($.panelIconOpened).addClass($.panelIconClosed);
		} else {
			$('i', $(this)).removeClass($.panelIconClosed).addClass($.panelIconOpened);
		}
	} else if ($(this).hasClass('btn-setting')) {
		$('#myModal').modal('show');
	}
});

function capitalizeFirstLetter(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

function init(url) {

	/* ---------- Tooltip ---------- */
	$('[rel="tooltip"],[data-rel="tooltip"]').tooltip({ "placement": "bottom", delay: { show: 400, hide: 200 } });

	/* ---------- Popover ---------- */
	$('[rel="popover"],[data-rel="popover"],[data-toggle="popover"]').popover();
}

/***/ }),

/***/ "./mock/admin/src/js/libraries/bootstrap.min.js":
/*!******************************************************!*\
  !*** ./mock/admin/src/js/libraries/bootstrap.min.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
  * Bootstrap v4.0.0-beta.2 (https://getbootstrap.com)
  * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
var bootstrap = function (t, e, n) {
  "use strict";
  function i(t, e) {
    for (var n = 0; n < e.length; n++) {
      var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
    }
  }e = e && e.hasOwnProperty("default") ? e.default : e, n = n && n.hasOwnProperty("default") ? n.default : n;var s = function () {
    function t(t) {
      return {}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    }function n() {
      return { bindType: r.end, delegateType: r.end, handle: function handle(t) {
          if (e(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
        } };
    }function i() {
      if (window.QUnit) return !1;var t = document.createElement("bootstrap");for (var e in o) {
        if ("undefined" != typeof t.style[e]) return { end: o[e] };
      }return !1;
    }function s(t) {
      var n = this,
          i = !1;return e(this).one(a.TRANSITION_END, function () {
        i = !0;
      }), setTimeout(function () {
        i || a.triggerTransitionEnd(n);
      }, t), this;
    }var r = !1,
        o = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" },
        a = { TRANSITION_END: "bsTransitionEnd", getUID: function getUID(t) {
        do {
          t += ~~(1e6 * Math.random());
        } while (document.getElementById(t));return t;
      }, getSelectorFromElement: function getSelectorFromElement(t) {
        var n = t.getAttribute("data-target");n && "#" !== n || (n = t.getAttribute("href") || "");try {
          return e(document).find(n).length > 0 ? n : null;
        } catch (t) {
          return null;
        }
      }, reflow: function reflow(t) {
        return t.offsetHeight;
      }, triggerTransitionEnd: function triggerTransitionEnd(t) {
        e(t).trigger(r.end);
      }, supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(r);
      }, isElement: function isElement(t) {
        return (t[0] || t).nodeType;
      }, typeCheckConfig: function typeCheckConfig(e, n, i) {
        for (var s in i) {
          if (Object.prototype.hasOwnProperty.call(i, s)) {
            var r = i[s],
                o = n[s],
                l = o && a.isElement(o) ? "element" : t(o);if (!new RegExp(r).test(l)) throw new Error(e.toUpperCase() + ': Option "' + s + '" provided type "' + l + '" but expected type "' + r + '".');
          }
        }
      } };return r = i(), e.fn.emulateTransitionEnd = s, a.supportsTransitionEnd() && (e.event.special[a.TRANSITION_END] = n()), a;
  }(),
      r = function r(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  },
      o = function o(t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
  },
      a = function () {
    var t = "alert",
        n = e.fn[t],
        i = { CLOSE: "close.bs.alert", CLOSED: "closed.bs.alert", CLICK_DATA_API: "click.bs.alert.data-api" },
        o = { ALERT: "alert", FADE: "fade", SHOW: "show" },
        a = function () {
      function t(t) {
        this._element = t;
      }var n = t.prototype;return n.close = function (t) {
        t = t || this._element;var e = this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
      }, n.dispose = function () {
        e.removeData(this._element, "bs.alert"), this._element = null;
      }, n._getRootElement = function (t) {
        var n = s.getSelectorFromElement(t),
            i = !1;return n && (i = e(n)[0]), i || (i = e(t).closest("." + o.ALERT)[0]), i;
      }, n._triggerCloseEvent = function (t) {
        var n = e.Event(i.CLOSE);return e(t).trigger(n), n;
      }, n._removeElement = function (t) {
        var n = this;e(t).removeClass(o.SHOW), s.supportsTransitionEnd() && e(t).hasClass(o.FADE) ? e(t).one(s.TRANSITION_END, function (e) {
          return n._destroyElement(t, e);
        }).emulateTransitionEnd(150) : this._destroyElement(t);
      }, n._destroyElement = function (t) {
        e(t).detach().trigger(i.CLOSED).remove();
      }, t._jQueryInterface = function (n) {
        return this.each(function () {
          var i = e(this),
              s = i.data("bs.alert");s || (s = new t(this), i.data("bs.alert", s)), "close" === n && s[n](this);
        });
      }, t._handleDismiss = function (t) {
        return function (e) {
          e && e.preventDefault(), t.close(this);
        };
      }, r(t, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }]), t;
    }();return e(document).on(i.CLICK_DATA_API, { DISMISS: '[data-dismiss="alert"]' }.DISMISS, a._handleDismiss(new a())), e.fn[t] = a._jQueryInterface, e.fn[t].Constructor = a, e.fn[t].noConflict = function () {
      return e.fn[t] = n, a._jQueryInterface;
    }, a;
  }(),
      l = function () {
    var t = "button",
        n = e.fn[t],
        i = { ACTIVE: "active", BUTTON: "btn", FOCUS: "focus" },
        s = { DATA_TOGGLE_CARROT: '[data-toggle^="button"]', DATA_TOGGLE: '[data-toggle="buttons"]', INPUT: "input", ACTIVE: ".active", BUTTON: ".btn" },
        o = { CLICK_DATA_API: "click.bs.button.data-api", FOCUS_BLUR_DATA_API: "focus.bs.button.data-api blur.bs.button.data-api" },
        a = function () {
      function t(t) {
        this._element = t;
      }var n = t.prototype;return n.toggle = function () {
        var t = !0,
            n = !0,
            r = e(this._element).closest(s.DATA_TOGGLE)[0];if (r) {
          var o = e(this._element).find(s.INPUT)[0];if (o) {
            if ("radio" === o.type) if (o.checked && e(this._element).hasClass(i.ACTIVE)) t = !1;else {
              var a = e(r).find(s.ACTIVE)[0];a && e(a).removeClass(i.ACTIVE);
            }if (t) {
              if (o.hasAttribute("disabled") || r.hasAttribute("disabled") || o.classList.contains("disabled") || r.classList.contains("disabled")) return;o.checked = !e(this._element).hasClass(i.ACTIVE), e(o).trigger("change");
            }o.focus(), n = !1;
          }
        }n && this._element.setAttribute("aria-pressed", !e(this._element).hasClass(i.ACTIVE)), t && e(this._element).toggleClass(i.ACTIVE);
      }, n.dispose = function () {
        e.removeData(this._element, "bs.button"), this._element = null;
      }, t._jQueryInterface = function (n) {
        return this.each(function () {
          var i = e(this).data("bs.button");i || (i = new t(this), e(this).data("bs.button", i)), "toggle" === n && i[n]();
        });
      }, r(t, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }]), t;
    }();return e(document).on(o.CLICK_DATA_API, s.DATA_TOGGLE_CARROT, function (t) {
      t.preventDefault();var n = t.target;e(n).hasClass(i.BUTTON) || (n = e(n).closest(s.BUTTON)), a._jQueryInterface.call(e(n), "toggle");
    }).on(o.FOCUS_BLUR_DATA_API, s.DATA_TOGGLE_CARROT, function (t) {
      var n = e(t.target).closest(s.BUTTON)[0];e(n).toggleClass(i.FOCUS, /^focus(in)?$/.test(t.type));
    }), e.fn[t] = a._jQueryInterface, e.fn[t].Constructor = a, e.fn[t].noConflict = function () {
      return e.fn[t] = n, a._jQueryInterface;
    }, a;
  }(),
      h = function () {
    var t = "carousel",
        n = "bs.carousel",
        i = "." + n,
        o = e.fn[t],
        a = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0 },
        l = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean" },
        h = { NEXT: "next", PREV: "prev", LEFT: "left", RIGHT: "right" },
        c = { SLIDE: "slide" + i, SLID: "slid" + i, KEYDOWN: "keydown" + i, MOUSEENTER: "mouseenter" + i, MOUSELEAVE: "mouseleave" + i, TOUCHEND: "touchend" + i, LOAD_DATA_API: "load.bs.carousel.data-api", CLICK_DATA_API: "click.bs.carousel.data-api" },
        u = { CAROUSEL: "carousel", ACTIVE: "active", SLIDE: "slide", RIGHT: "carousel-item-right", LEFT: "carousel-item-left", NEXT: "carousel-item-next", PREV: "carousel-item-prev", ITEM: "carousel-item" },
        d = { ACTIVE: ".active", ACTIVE_ITEM: ".active.carousel-item", ITEM: ".carousel-item", NEXT_PREV: ".carousel-item-next, .carousel-item-prev", INDICATORS: ".carousel-indicators", DATA_SLIDE: "[data-slide], [data-slide-to]", DATA_RIDE: '[data-ride="carousel"]' },
        f = function () {
      function o(t, n) {
        this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(n), this._element = e(t)[0], this._indicatorsElement = e(this._element).find(d.INDICATORS)[0], this._addEventListeners();
      }var f = o.prototype;return f.next = function () {
        this._isSliding || this._slide(h.NEXT);
      }, f.nextWhenVisible = function () {
        !document.hidden && e(this._element).is(":visible") && "hidden" !== e(this._element).css("visibility") && this.next();
      }, f.prev = function () {
        this._isSliding || this._slide(h.PREV);
      }, f.pause = function (t) {
        t || (this._isPaused = !0), e(this._element).find(d.NEXT_PREV)[0] && s.supportsTransitionEnd() && (s.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
      }, f.cycle = function (t) {
        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, f.to = function (t) {
        var n = this;this._activeElement = e(this._element).find(d.ACTIVE_ITEM)[0];var i = this._getItemIndex(this._activeElement);if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) e(this._element).one(c.SLID, function () {
          return n.to(t);
        });else {
          if (i === t) return this.pause(), void this.cycle();var s = t > i ? h.NEXT : h.PREV;this._slide(s, this._items[t]);
        }
      }, f.dispose = function () {
        e(this._element).off(i), e.removeData(this._element, n), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, f._getConfig = function (n) {
        return n = e.extend({}, a, n), s.typeCheckConfig(t, n, l), n;
      }, f._addEventListeners = function () {
        var t = this;this._config.keyboard && e(this._element).on(c.KEYDOWN, function (e) {
          return t._keydown(e);
        }), "hover" === this._config.pause && (e(this._element).on(c.MOUSEENTER, function (e) {
          return t.pause(e);
        }).on(c.MOUSELEAVE, function (e) {
          return t.cycle(e);
        }), "ontouchstart" in document.documentElement && e(this._element).on(c.TOUCHEND, function () {
          t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {
            return t.cycle(e);
          }, 500 + t._config.interval);
        }));
      }, f._keydown = function (t) {
        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {case 37:
            t.preventDefault(), this.prev();break;case 39:
            t.preventDefault(), this.next();break;default:
            return;}
      }, f._getItemIndex = function (t) {
        return this._items = e.makeArray(e(t).parent().find(d.ITEM)), this._items.indexOf(t);
      }, f._getItemByDirection = function (t, e) {
        var n = t === h.NEXT,
            i = t === h.PREV,
            s = this._getItemIndex(e),
            r = this._items.length - 1;if ((i && 0 === s || n && s === r) && !this._config.wrap) return e;var o = (s + (t === h.PREV ? -1 : 1)) % this._items.length;return -1 === o ? this._items[this._items.length - 1] : this._items[o];
      }, f._triggerSlideEvent = function (t, n) {
        var i = this._getItemIndex(t),
            s = this._getItemIndex(e(this._element).find(d.ACTIVE_ITEM)[0]),
            r = e.Event(c.SLIDE, { relatedTarget: t, direction: n, from: s, to: i });return e(this._element).trigger(r), r;
      }, f._setActiveIndicatorElement = function (t) {
        if (this._indicatorsElement) {
          e(this._indicatorsElement).find(d.ACTIVE).removeClass(u.ACTIVE);var n = this._indicatorsElement.children[this._getItemIndex(t)];n && e(n).addClass(u.ACTIVE);
        }
      }, f._slide = function (t, n) {
        var i,
            r,
            o,
            a = this,
            l = e(this._element).find(d.ACTIVE_ITEM)[0],
            f = this._getItemIndex(l),
            _ = n || l && this._getItemByDirection(t, l),
            g = this._getItemIndex(_),
            m = Boolean(this._interval);if (t === h.NEXT ? (i = u.LEFT, r = u.NEXT, o = h.LEFT) : (i = u.RIGHT, r = u.PREV, o = h.RIGHT), _ && e(_).hasClass(u.ACTIVE)) this._isSliding = !1;else if (!this._triggerSlideEvent(_, o).isDefaultPrevented() && l && _) {
          this._isSliding = !0, m && this.pause(), this._setActiveIndicatorElement(_);var p = e.Event(c.SLID, { relatedTarget: _, direction: o, from: f, to: g });s.supportsTransitionEnd() && e(this._element).hasClass(u.SLIDE) ? (e(_).addClass(r), s.reflow(_), e(l).addClass(i), e(_).addClass(i), e(l).one(s.TRANSITION_END, function () {
            e(_).removeClass(i + " " + r).addClass(u.ACTIVE), e(l).removeClass(u.ACTIVE + " " + r + " " + i), a._isSliding = !1, setTimeout(function () {
              return e(a._element).trigger(p);
            }, 0);
          }).emulateTransitionEnd(600)) : (e(l).removeClass(u.ACTIVE), e(_).addClass(u.ACTIVE), this._isSliding = !1, e(this._element).trigger(p)), m && this.cycle();
        }
      }, o._jQueryInterface = function (t) {
        return this.each(function () {
          var i = e(this).data(n),
              s = e.extend({}, a, e(this).data());"object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && e.extend(s, t);var r = "string" == typeof t ? t : s.slide;if (i || (i = new o(this, s), e(this).data(n, i)), "number" == typeof t) i.to(t);else if ("string" == typeof r) {
            if ("undefined" == typeof i[r]) throw new Error('No method named "' + r + '"');i[r]();
          } else s.interval && (i.pause(), i.cycle());
        });
      }, o._dataApiClickHandler = function (t) {
        var i = s.getSelectorFromElement(this);if (i) {
          var r = e(i)[0];if (r && e(r).hasClass(u.CAROUSEL)) {
            var a = e.extend({}, e(r).data(), e(this).data()),
                l = this.getAttribute("data-slide-to");l && (a.interval = !1), o._jQueryInterface.call(e(r), a), l && e(r).data(n).to(l), t.preventDefault();
          }
        }
      }, r(o, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return a;
        } }]), o;
    }();return e(document).on(c.CLICK_DATA_API, d.DATA_SLIDE, f._dataApiClickHandler), e(window).on(c.LOAD_DATA_API, function () {
      e(d.DATA_RIDE).each(function () {
        var t = e(this);f._jQueryInterface.call(t, t.data());
      });
    }), e.fn[t] = f._jQueryInterface, e.fn[t].Constructor = f, e.fn[t].noConflict = function () {
      return e.fn[t] = o, f._jQueryInterface;
    }, f;
  }(),
      c = function () {
    var t = "collapse",
        n = "bs.collapse",
        i = e.fn[t],
        o = { toggle: !0, parent: "" },
        a = { toggle: "boolean", parent: "(string|element)" },
        l = { SHOW: "show.bs.collapse", SHOWN: "shown.bs.collapse", HIDE: "hide.bs.collapse", HIDDEN: "hidden.bs.collapse", CLICK_DATA_API: "click.bs.collapse.data-api" },
        h = { SHOW: "show", COLLAPSE: "collapse", COLLAPSING: "collapsing", COLLAPSED: "collapsed" },
        c = { WIDTH: "width", HEIGHT: "height" },
        u = { ACTIVES: ".show, .collapsing", DATA_TOGGLE: '[data-toggle="collapse"]' },
        d = function () {
      function i(t, n) {
        this._isTransitioning = !1, this._element = t, this._config = this._getConfig(n), this._triggerArray = e.makeArray(e('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));for (var i = e(u.DATA_TOGGLE), r = 0; r < i.length; r++) {
          var o = i[r],
              a = s.getSelectorFromElement(o);null !== a && e(a).filter(t).length > 0 && this._triggerArray.push(o);
        }this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
      }var d = i.prototype;return d.toggle = function () {
        e(this._element).hasClass(h.SHOW) ? this.hide() : this.show();
      }, d.show = function () {
        var t = this;if (!this._isTransitioning && !e(this._element).hasClass(h.SHOW)) {
          var r, o;if (this._parent && ((r = e.makeArray(e(this._parent).children().children(u.ACTIVES))).length || (r = null)), !(r && (o = e(r).data(n)) && o._isTransitioning)) {
            var a = e.Event(l.SHOW);if (e(this._element).trigger(a), !a.isDefaultPrevented()) {
              r && (i._jQueryInterface.call(e(r), "hide"), o || e(r).data(n, null));var c = this._getDimension();e(this._element).removeClass(h.COLLAPSE).addClass(h.COLLAPSING), this._element.style[c] = 0, this._triggerArray.length && e(this._triggerArray).removeClass(h.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);var d = function d() {
                e(t._element).removeClass(h.COLLAPSING).addClass(h.COLLAPSE).addClass(h.SHOW), t._element.style[c] = "", t.setTransitioning(!1), e(t._element).trigger(l.SHOWN);
              };if (s.supportsTransitionEnd()) {
                var f = "scroll" + (c[0].toUpperCase() + c.slice(1));e(this._element).one(s.TRANSITION_END, d).emulateTransitionEnd(600), this._element.style[c] = this._element[f] + "px";
              } else d();
            }
          }
        }
      }, d.hide = function () {
        var t = this;if (!this._isTransitioning && e(this._element).hasClass(h.SHOW)) {
          var n = e.Event(l.HIDE);if (e(this._element).trigger(n), !n.isDefaultPrevented()) {
            var i = this._getDimension();if (this._element.style[i] = this._element.getBoundingClientRect()[i] + "px", s.reflow(this._element), e(this._element).addClass(h.COLLAPSING).removeClass(h.COLLAPSE).removeClass(h.SHOW), this._triggerArray.length) for (var r = 0; r < this._triggerArray.length; r++) {
              var o = this._triggerArray[r],
                  a = s.getSelectorFromElement(o);null !== a && (e(a).hasClass(h.SHOW) || e(o).addClass(h.COLLAPSED).attr("aria-expanded", !1));
            }this.setTransitioning(!0);var c = function c() {
              t.setTransitioning(!1), e(t._element).removeClass(h.COLLAPSING).addClass(h.COLLAPSE).trigger(l.HIDDEN);
            };this._element.style[i] = "", s.supportsTransitionEnd() ? e(this._element).one(s.TRANSITION_END, c).emulateTransitionEnd(600) : c();
          }
        }
      }, d.setTransitioning = function (t) {
        this._isTransitioning = t;
      }, d.dispose = function () {
        e.removeData(this._element, n), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
      }, d._getConfig = function (n) {
        return n = e.extend({}, o, n), n.toggle = Boolean(n.toggle), s.typeCheckConfig(t, n, a), n;
      }, d._getDimension = function () {
        return e(this._element).hasClass(c.WIDTH) ? c.WIDTH : c.HEIGHT;
      }, d._getParent = function () {
        var t = this,
            n = null;s.isElement(this._config.parent) ? (n = this._config.parent, "undefined" != typeof this._config.parent.jquery && (n = this._config.parent[0])) : n = e(this._config.parent)[0];var r = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';return e(n).find(r).each(function (e, n) {
          t._addAriaAndCollapsedClass(i._getTargetFromElement(n), [n]);
        }), n;
      }, d._addAriaAndCollapsedClass = function (t, n) {
        if (t) {
          var i = e(t).hasClass(h.SHOW);n.length && e(n).toggleClass(h.COLLAPSED, !i).attr("aria-expanded", i);
        }
      }, i._getTargetFromElement = function (t) {
        var n = s.getSelectorFromElement(t);return n ? e(n)[0] : null;
      }, i._jQueryInterface = function (t) {
        return this.each(function () {
          var s = e(this),
              r = s.data(n),
              a = e.extend({}, o, s.data(), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t);if (!r && a.toggle && /show|hide/.test(t) && (a.toggle = !1), r || (r = new i(this, a), s.data(n, r)), "string" == typeof t) {
            if ("undefined" == typeof r[t]) throw new Error('No method named "' + t + '"');r[t]();
          }
        });
      }, r(i, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return o;
        } }]), i;
    }();return e(document).on(l.CLICK_DATA_API, u.DATA_TOGGLE, function (t) {
      "A" === t.currentTarget.tagName && t.preventDefault();var i = e(this),
          r = s.getSelectorFromElement(this);e(r).each(function () {
        var t = e(this),
            s = t.data(n) ? "toggle" : i.data();d._jQueryInterface.call(t, s);
      });
    }), e.fn[t] = d._jQueryInterface, e.fn[t].Constructor = d, e.fn[t].noConflict = function () {
      return e.fn[t] = i, d._jQueryInterface;
    }, d;
  }(),
      u = function () {
    if ("undefined" == typeof n) throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var t = "dropdown",
        i = "bs.dropdown",
        o = "." + i,
        a = e.fn[t],
        l = new RegExp("38|40|27"),
        h = { HIDE: "hide" + o, HIDDEN: "hidden" + o, SHOW: "show" + o, SHOWN: "shown" + o, CLICK: "click" + o, CLICK_DATA_API: "click.bs.dropdown.data-api", KEYDOWN_DATA_API: "keydown.bs.dropdown.data-api", KEYUP_DATA_API: "keyup.bs.dropdown.data-api" },
        c = { DISABLED: "disabled", SHOW: "show", DROPUP: "dropup", MENURIGHT: "dropdown-menu-right", MENULEFT: "dropdown-menu-left" },
        u = { DATA_TOGGLE: '[data-toggle="dropdown"]', FORM_CHILD: ".dropdown form", MENU: ".dropdown-menu", NAVBAR_NAV: ".navbar-nav", VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled)" },
        d = { TOP: "top-start", TOPEND: "top-end", BOTTOM: "bottom-start", BOTTOMEND: "bottom-end" },
        f = { offset: 0, flip: !0 },
        _ = { offset: "(number|string|function)", flip: "boolean" },
        g = function () {
      function a(t, e) {
        this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
      }var g = a.prototype;return g.toggle = function () {
        if (!this._element.disabled && !e(this._element).hasClass(c.DISABLED)) {
          var t = a._getParentFromElement(this._element),
              i = e(this._menu).hasClass(c.SHOW);if (a._clearMenus(), !i) {
            var s = { relatedTarget: this._element },
                r = e.Event(h.SHOW, s);if (e(t).trigger(r), !r.isDefaultPrevented()) {
              var o = this._element;e(t).hasClass(c.DROPUP) && (e(this._menu).hasClass(c.MENULEFT) || e(this._menu).hasClass(c.MENURIGHT)) && (o = t), this._popper = new n(o, this._menu, this._getPopperConfig()), "ontouchstart" in document.documentElement && !e(t).closest(u.NAVBAR_NAV).length && e("body").children().on("mouseover", null, e.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), e(this._menu).toggleClass(c.SHOW), e(t).toggleClass(c.SHOW).trigger(e.Event(h.SHOWN, s));
            }
          }
        }
      }, g.dispose = function () {
        e.removeData(this._element, i), e(this._element).off(o), this._element = null, this._menu = null, null !== this._popper && this._popper.destroy(), this._popper = null;
      }, g.update = function () {
        this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
      }, g._addEventListeners = function () {
        var t = this;e(this._element).on(h.CLICK, function (e) {
          e.preventDefault(), e.stopPropagation(), t.toggle();
        });
      }, g._getConfig = function (n) {
        return n = e.extend({}, this.constructor.Default, e(this._element).data(), n), s.typeCheckConfig(t, n, this.constructor.DefaultType), n;
      }, g._getMenuElement = function () {
        if (!this._menu) {
          var t = a._getParentFromElement(this._element);this._menu = e(t).find(u.MENU)[0];
        }return this._menu;
      }, g._getPlacement = function () {
        var t = e(this._element).parent(),
            n = d.BOTTOM;return t.hasClass(c.DROPUP) ? (n = d.TOP, e(this._menu).hasClass(c.MENURIGHT) && (n = d.TOPEND)) : e(this._menu).hasClass(c.MENURIGHT) && (n = d.BOTTOMEND), n;
      }, g._detectNavbar = function () {
        return e(this._element).closest(".navbar").length > 0;
      }, g._getPopperConfig = function () {
        var t = this,
            n = {};"function" == typeof this._config.offset ? n.fn = function (n) {
          return n.offsets = e.extend({}, n.offsets, t._config.offset(n.offsets) || {}), n;
        } : n.offset = this._config.offset;var i = { placement: this._getPlacement(), modifiers: { offset: n, flip: { enabled: this._config.flip } } };return this._inNavbar && (i.modifiers.applyStyle = { enabled: !this._inNavbar }), i;
      }, a._jQueryInterface = function (t) {
        return this.each(function () {
          var n = e(this).data(i),
              s = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t : null;if (n || (n = new a(this, s), e(this).data(i, n)), "string" == typeof t) {
            if ("undefined" == typeof n[t]) throw new Error('No method named "' + t + '"');n[t]();
          }
        });
      }, a._clearMenus = function (t) {
        if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var n = e.makeArray(e(u.DATA_TOGGLE)), s = 0; s < n.length; s++) {
          var r = a._getParentFromElement(n[s]),
              o = e(n[s]).data(i),
              l = { relatedTarget: n[s] };if (o) {
            var d = o._menu;if (e(r).hasClass(c.SHOW) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && e.contains(r, t.target))) {
              var f = e.Event(h.HIDE, l);e(r).trigger(f), f.isDefaultPrevented() || ("ontouchstart" in document.documentElement && e("body").children().off("mouseover", null, e.noop), n[s].setAttribute("aria-expanded", "false"), e(d).removeClass(c.SHOW), e(r).removeClass(c.SHOW).trigger(e.Event(h.HIDDEN, l)));
            }
          }
        }
      }, a._getParentFromElement = function (t) {
        var n,
            i = s.getSelectorFromElement(t);return i && (n = e(i)[0]), n || t.parentNode;
      }, a._dataApiKeydownHandler = function (t) {
        if (!(!l.test(t.which) || /button/i.test(t.target.tagName) && 32 === t.which || /input|textarea/i.test(t.target.tagName) || (t.preventDefault(), t.stopPropagation(), this.disabled || e(this).hasClass(c.DISABLED)))) {
          var n = a._getParentFromElement(this),
              i = e(n).hasClass(c.SHOW);if ((i || 27 === t.which && 32 === t.which) && (!i || 27 !== t.which && 32 !== t.which)) {
            var s = e(n).find(u.VISIBLE_ITEMS).get();if (s.length) {
              var r = s.indexOf(t.target);38 === t.which && r > 0 && r--, 40 === t.which && r < s.length - 1 && r++, r < 0 && (r = 0), s[r].focus();
            }
          } else {
            if (27 === t.which) {
              var o = e(n).find(u.DATA_TOGGLE)[0];e(o).trigger("focus");
            }e(this).trigger("click");
          }
        }
      }, r(a, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return f;
        } }, { key: "DefaultType", get: function get() {
          return _;
        } }]), a;
    }();return e(document).on(h.KEYDOWN_DATA_API, u.DATA_TOGGLE, g._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API, u.MENU, g._dataApiKeydownHandler).on(h.CLICK_DATA_API + " " + h.KEYUP_DATA_API, g._clearMenus).on(h.CLICK_DATA_API, u.DATA_TOGGLE, function (t) {
      t.preventDefault(), t.stopPropagation(), g._jQueryInterface.call(e(this), "toggle");
    }).on(h.CLICK_DATA_API, u.FORM_CHILD, function (t) {
      t.stopPropagation();
    }), e.fn[t] = g._jQueryInterface, e.fn[t].Constructor = g, e.fn[t].noConflict = function () {
      return e.fn[t] = a, g._jQueryInterface;
    }, g;
  }(),
      d = function () {
    var t = "modal",
        n = ".bs.modal",
        i = e.fn[t],
        o = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
        a = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" },
        l = { HIDE: "hide.bs.modal", HIDDEN: "hidden.bs.modal", SHOW: "show.bs.modal", SHOWN: "shown.bs.modal", FOCUSIN: "focusin.bs.modal", RESIZE: "resize.bs.modal", CLICK_DISMISS: "click.dismiss.bs.modal", KEYDOWN_DISMISS: "keydown.dismiss.bs.modal", MOUSEUP_DISMISS: "mouseup.dismiss.bs.modal", MOUSEDOWN_DISMISS: "mousedown.dismiss.bs.modal", CLICK_DATA_API: "click.bs.modal.data-api" },
        h = { SCROLLBAR_MEASURER: "modal-scrollbar-measure", BACKDROP: "modal-backdrop", OPEN: "modal-open", FADE: "fade", SHOW: "show" },
        c = { DIALOG: ".modal-dialog", DATA_TOGGLE: '[data-toggle="modal"]', DATA_DISMISS: '[data-dismiss="modal"]', FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", STICKY_CONTENT: ".sticky-top", NAVBAR_TOGGLER: ".navbar-toggler" },
        u = function () {
      function i(t, n) {
        this._config = this._getConfig(n), this._element = t, this._dialog = e(t).find(c.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0;
      }var u = i.prototype;return u.toggle = function (t) {
        return this._isShown ? this.hide() : this.show(t);
      }, u.show = function (t) {
        var n = this;if (!this._isTransitioning && !this._isShown) {
          s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE) && (this._isTransitioning = !0);var i = e.Event(l.SHOW, { relatedTarget: t });e(this._element).trigger(i), this._isShown || i.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), e(document.body).addClass(h.OPEN), this._setEscapeEvent(), this._setResizeEvent(), e(this._element).on(l.CLICK_DISMISS, c.DATA_DISMISS, function (t) {
            return n.hide(t);
          }), e(this._dialog).on(l.MOUSEDOWN_DISMISS, function () {
            e(n._element).one(l.MOUSEUP_DISMISS, function (t) {
              e(t.target).is(n._element) && (n._ignoreBackdropClick = !0);
            });
          }), this._showBackdrop(function () {
            return n._showElement(t);
          }));
        }
      }, u.hide = function (t) {
        var n = this;if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
          var i = e.Event(l.HIDE);if (e(this._element).trigger(i), this._isShown && !i.isDefaultPrevented()) {
            this._isShown = !1;var r = s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE);r && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), e(document).off(l.FOCUSIN), e(this._element).removeClass(h.SHOW), e(this._element).off(l.CLICK_DISMISS), e(this._dialog).off(l.MOUSEDOWN_DISMISS), r ? e(this._element).one(s.TRANSITION_END, function (t) {
              return n._hideModal(t);
            }).emulateTransitionEnd(300) : this._hideModal();
          }
        }
      }, u.dispose = function () {
        e.removeData(this._element, "bs.modal"), e(window, document, this._element, this._backdrop).off(n), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
      }, u.handleUpdate = function () {
        this._adjustDialog();
      }, u._getConfig = function (n) {
        return n = e.extend({}, o, n), s.typeCheckConfig(t, n, a), n;
      }, u._showElement = function (t) {
        var n = this,
            i = s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, i && s.reflow(this._element), e(this._element).addClass(h.SHOW), this._config.focus && this._enforceFocus();var r = e.Event(l.SHOWN, { relatedTarget: t }),
            o = function o() {
          n._config.focus && n._element.focus(), n._isTransitioning = !1, e(n._element).trigger(r);
        };i ? e(this._dialog).one(s.TRANSITION_END, o).emulateTransitionEnd(300) : o();
      }, u._enforceFocus = function () {
        var t = this;e(document).off(l.FOCUSIN).on(l.FOCUSIN, function (n) {
          document === n.target || t._element === n.target || e(t._element).has(n.target).length || t._element.focus();
        });
      }, u._setEscapeEvent = function () {
        var t = this;this._isShown && this._config.keyboard ? e(this._element).on(l.KEYDOWN_DISMISS, function (e) {
          27 === e.which && (e.preventDefault(), t.hide());
        }) : this._isShown || e(this._element).off(l.KEYDOWN_DISMISS);
      }, u._setResizeEvent = function () {
        var t = this;this._isShown ? e(window).on(l.RESIZE, function (e) {
          return t.handleUpdate(e);
        }) : e(window).off(l.RESIZE);
      }, u._hideModal = function () {
        var t = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
          e(document.body).removeClass(h.OPEN), t._resetAdjustments(), t._resetScrollbar(), e(t._element).trigger(l.HIDDEN);
        });
      }, u._removeBackdrop = function () {
        this._backdrop && (e(this._backdrop).remove(), this._backdrop = null);
      }, u._showBackdrop = function (t) {
        var n = this,
            i = e(this._element).hasClass(h.FADE) ? h.FADE : "";if (this._isShown && this._config.backdrop) {
          var r = s.supportsTransitionEnd() && i;if (this._backdrop = document.createElement("div"), this._backdrop.className = h.BACKDROP, i && e(this._backdrop).addClass(i), e(this._backdrop).appendTo(document.body), e(this._element).on(l.CLICK_DISMISS, function (t) {
            n._ignoreBackdropClick ? n._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === n._config.backdrop ? n._element.focus() : n.hide());
          }), r && s.reflow(this._backdrop), e(this._backdrop).addClass(h.SHOW), !t) return;if (!r) return void t();e(this._backdrop).one(s.TRANSITION_END, t).emulateTransitionEnd(150);
        } else if (!this._isShown && this._backdrop) {
          e(this._backdrop).removeClass(h.SHOW);var o = function o() {
            n._removeBackdrop(), t && t();
          };s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE) ? e(this._backdrop).one(s.TRANSITION_END, o).emulateTransitionEnd(150) : o();
        } else t && t();
      }, u._adjustDialog = function () {
        var t = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, u._resetAdjustments = function () {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, u._checkScrollbar = function () {
        var t = document.body.getBoundingClientRect();this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, u._setScrollbar = function () {
        var t = this;if (this._isBodyOverflowing) {
          e(c.FIXED_CONTENT).each(function (n, i) {
            var s = e(i)[0].style.paddingRight,
                r = e(i).css("padding-right");e(i).data("padding-right", s).css("padding-right", parseFloat(r) + t._scrollbarWidth + "px");
          }), e(c.STICKY_CONTENT).each(function (n, i) {
            var s = e(i)[0].style.marginRight,
                r = e(i).css("margin-right");e(i).data("margin-right", s).css("margin-right", parseFloat(r) - t._scrollbarWidth + "px");
          }), e(c.NAVBAR_TOGGLER).each(function (n, i) {
            var s = e(i)[0].style.marginRight,
                r = e(i).css("margin-right");e(i).data("margin-right", s).css("margin-right", parseFloat(r) + t._scrollbarWidth + "px");
          });var n = document.body.style.paddingRight,
              i = e("body").css("padding-right");e("body").data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px");
        }
      }, u._resetScrollbar = function () {
        e(c.FIXED_CONTENT).each(function (t, n) {
          var i = e(n).data("padding-right");"undefined" != typeof i && e(n).css("padding-right", i).removeData("padding-right");
        }), e(c.STICKY_CONTENT + ", " + c.NAVBAR_TOGGLER).each(function (t, n) {
          var i = e(n).data("margin-right");"undefined" != typeof i && e(n).css("margin-right", i).removeData("margin-right");
        });var t = e("body").data("padding-right");"undefined" != typeof t && e("body").css("padding-right", t).removeData("padding-right");
      }, u._getScrollbarWidth = function () {
        var t = document.createElement("div");t.className = h.SCROLLBAR_MEASURER, document.body.appendChild(t);var e = t.getBoundingClientRect().width - t.clientWidth;return document.body.removeChild(t), e;
      }, i._jQueryInterface = function (t, n) {
        return this.each(function () {
          var s = e(this).data("bs.modal"),
              r = e.extend({}, i.Default, e(this).data(), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t);if (s || (s = new i(this, r), e(this).data("bs.modal", s)), "string" == typeof t) {
            if ("undefined" == typeof s[t]) throw new Error('No method named "' + t + '"');s[t](n);
          } else r.show && s.show(n);
        });
      }, r(i, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return o;
        } }]), i;
    }();return e(document).on(l.CLICK_DATA_API, c.DATA_TOGGLE, function (t) {
      var n,
          i = this,
          r = s.getSelectorFromElement(this);r && (n = e(r)[0]);var o = e(n).data("bs.modal") ? "toggle" : e.extend({}, e(n).data(), e(this).data());"A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();var a = e(n).one(l.SHOW, function (t) {
        t.isDefaultPrevented() || a.one(l.HIDDEN, function () {
          e(i).is(":visible") && i.focus();
        });
      });u._jQueryInterface.call(e(n), o, this);
    }), e.fn[t] = u._jQueryInterface, e.fn[t].Constructor = u, e.fn[t].noConflict = function () {
      return e.fn[t] = i, u._jQueryInterface;
    }, u;
  }(),
      f = function () {
    if ("undefined" == typeof n) throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var t = "tooltip",
        i = ".bs.tooltip",
        o = e.fn[t],
        a = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
        l = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(number|string)", container: "(string|element|boolean)", fallbackPlacement: "(string|array)" },
        h = { AUTO: "auto", TOP: "top", RIGHT: "right", BOTTOM: "bottom", LEFT: "left" },
        c = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: 0, container: !1, fallbackPlacement: "flip" },
        u = { SHOW: "show", OUT: "out" },
        d = { HIDE: "hide" + i, HIDDEN: "hidden" + i, SHOW: "show" + i, SHOWN: "shown" + i, INSERTED: "inserted" + i, CLICK: "click" + i, FOCUSIN: "focusin" + i, FOCUSOUT: "focusout" + i, MOUSEENTER: "mouseenter" + i, MOUSELEAVE: "mouseleave" + i },
        f = { FADE: "fade", SHOW: "show" },
        _ = { TOOLTIP: ".tooltip", TOOLTIP_INNER: ".tooltip-inner", ARROW: ".arrow" },
        g = { HOVER: "hover", FOCUS: "focus", CLICK: "click", MANUAL: "manual" },
        m = function () {
      function o(t, e) {
        this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
      }var m = o.prototype;return m.enable = function () {
        this._isEnabled = !0;
      }, m.disable = function () {
        this._isEnabled = !1;
      }, m.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, m.toggle = function (t) {
        if (this._isEnabled) if (t) {
          var n = this.constructor.DATA_KEY,
              i = e(t.currentTarget).data(n);i || (i = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(n, i)), i._activeTrigger.click = !i._activeTrigger.click, i._isWithActiveTrigger() ? i._enter(null, i) : i._leave(null, i);
        } else {
          if (e(this.getTipElement()).hasClass(f.SHOW)) return void this._leave(null, this);this._enter(null, this);
        }
      }, m.dispose = function () {
        clearTimeout(this._timeout), e.removeData(this.element, this.constructor.DATA_KEY), e(this.element).off(this.constructor.EVENT_KEY), e(this.element).closest(".modal").off("hide.bs.modal"), this.tip && e(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, null !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
      }, m.show = function () {
        var t = this;if ("none" === e(this.element).css("display")) throw new Error("Please use show on visible elements");var i = e.Event(this.constructor.Event.SHOW);if (this.isWithContent() && this._isEnabled) {
          e(this.element).trigger(i);var r = e.contains(this.element.ownerDocument.documentElement, this.element);if (i.isDefaultPrevented() || !r) return;var a = this.getTipElement(),
              l = s.getUID(this.constructor.NAME);a.setAttribute("id", l), this.element.setAttribute("aria-describedby", l), this.setContent(), this.config.animation && e(a).addClass(f.FADE);var h = "function" == typeof this.config.placement ? this.config.placement.call(this, a, this.element) : this.config.placement,
              c = this._getAttachment(h);this.addAttachmentClass(c);var d = !1 === this.config.container ? document.body : e(this.config.container);e(a).data(this.constructor.DATA_KEY, this), e.contains(this.element.ownerDocument.documentElement, this.tip) || e(a).appendTo(d), e(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new n(this.element, a, { placement: c, modifiers: { offset: { offset: this.config.offset }, flip: { behavior: this.config.fallbackPlacement }, arrow: { element: _.ARROW } }, onCreate: function onCreate(e) {
              e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e);
            }, onUpdate: function onUpdate(e) {
              t._handlePopperPlacementChange(e);
            } }), e(a).addClass(f.SHOW), "ontouchstart" in document.documentElement && e("body").children().on("mouseover", null, e.noop);var g = function g() {
            t.config.animation && t._fixTransition();var n = t._hoverState;t._hoverState = null, e(t.element).trigger(t.constructor.Event.SHOWN), n === u.OUT && t._leave(null, t);
          };s.supportsTransitionEnd() && e(this.tip).hasClass(f.FADE) ? e(this.tip).one(s.TRANSITION_END, g).emulateTransitionEnd(o._TRANSITION_DURATION) : g();
        }
      }, m.hide = function (t) {
        var n = this,
            i = this.getTipElement(),
            r = e.Event(this.constructor.Event.HIDE),
            o = function o() {
          n._hoverState !== u.SHOW && i.parentNode && i.parentNode.removeChild(i), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), e(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), t && t();
        };e(this.element).trigger(r), r.isDefaultPrevented() || (e(i).removeClass(f.SHOW), "ontouchstart" in document.documentElement && e("body").children().off("mouseover", null, e.noop), this._activeTrigger[g.CLICK] = !1, this._activeTrigger[g.FOCUS] = !1, this._activeTrigger[g.HOVER] = !1, s.supportsTransitionEnd() && e(this.tip).hasClass(f.FADE) ? e(i).one(s.TRANSITION_END, o).emulateTransitionEnd(150) : o(), this._hoverState = "");
      }, m.update = function () {
        null !== this._popper && this._popper.scheduleUpdate();
      }, m.isWithContent = function () {
        return Boolean(this.getTitle());
      }, m.addAttachmentClass = function (t) {
        e(this.getTipElement()).addClass("bs-tooltip-" + t);
      }, m.getTipElement = function () {
        return this.tip = this.tip || e(this.config.template)[0], this.tip;
      }, m.setContent = function () {
        var t = e(this.getTipElement());this.setElementContent(t.find(_.TOOLTIP_INNER), this.getTitle()), t.removeClass(f.FADE + " " + f.SHOW);
      }, m.setElementContent = function (t, n) {
        var i = this.config.html;"object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && (n.nodeType || n.jquery) ? i ? e(n).parent().is(t) || t.empty().append(n) : t.text(e(n).text()) : t[i ? "html" : "text"](n);
      }, m.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, m._getAttachment = function (t) {
        return h[t.toUpperCase()];
      }, m._setListeners = function () {
        var t = this;this.config.trigger.split(" ").forEach(function (n) {
          if ("click" === n) e(t.element).on(t.constructor.Event.CLICK, t.config.selector, function (e) {
            return t.toggle(e);
          });else if (n !== g.MANUAL) {
            var i = n === g.HOVER ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,
                s = n === g.HOVER ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;e(t.element).on(i, t.config.selector, function (e) {
              return t._enter(e);
            }).on(s, t.config.selector, function (e) {
              return t._leave(e);
            });
          }e(t.element).closest(".modal").on("hide.bs.modal", function () {
            return t.hide();
          });
        }), this.config.selector ? this.config = e.extend({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle();
      }, m._fixTitle = function () {
        var t = _typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, m._enter = function (t, n) {
        var i = this.constructor.DATA_KEY;(n = n || e(t.currentTarget).data(i)) || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(i, n)), t && (n._activeTrigger["focusin" === t.type ? g.FOCUS : g.HOVER] = !0), e(n.getTipElement()).hasClass(f.SHOW) || n._hoverState === u.SHOW ? n._hoverState = u.SHOW : (clearTimeout(n._timeout), n._hoverState = u.SHOW, n.config.delay && n.config.delay.show ? n._timeout = setTimeout(function () {
          n._hoverState === u.SHOW && n.show();
        }, n.config.delay.show) : n.show());
      }, m._leave = function (t, n) {
        var i = this.constructor.DATA_KEY;(n = n || e(t.currentTarget).data(i)) || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(i, n)), t && (n._activeTrigger["focusout" === t.type ? g.FOCUS : g.HOVER] = !1), n._isWithActiveTrigger() || (clearTimeout(n._timeout), n._hoverState = u.OUT, n.config.delay && n.config.delay.hide ? n._timeout = setTimeout(function () {
          n._hoverState === u.OUT && n.hide();
        }, n.config.delay.hide) : n.hide());
      }, m._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) {
          if (this._activeTrigger[t]) return !0;
        }return !1;
      }, m._getConfig = function (n) {
        return "number" == typeof (n = e.extend({}, this.constructor.Default, e(this.element).data(), n)).delay && (n.delay = { show: n.delay, hide: n.delay }), "number" == typeof n.title && (n.title = n.title.toString()), "number" == typeof n.content && (n.content = n.content.toString()), s.typeCheckConfig(t, n, this.constructor.DefaultType), n;
      }, m._getDelegateConfig = function () {
        var t = {};if (this.config) for (var e in this.config) {
          this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        }return t;
      }, m._cleanTipClass = function () {
        var t = e(this.getTipElement()),
            n = t.attr("class").match(a);null !== n && n.length > 0 && t.removeClass(n.join(""));
      }, m._handlePopperPlacementChange = function (t) {
        this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
      }, m._fixTransition = function () {
        var t = this.getTipElement(),
            n = this.config.animation;null === t.getAttribute("x-placement") && (e(t).removeClass(f.FADE), this.config.animation = !1, this.hide(), this.show(), this.config.animation = n);
      }, o._jQueryInterface = function (t) {
        return this.each(function () {
          var n = e(this).data("bs.tooltip"),
              i = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t;if ((n || !/dispose|hide/.test(t)) && (n || (n = new o(this, i), e(this).data("bs.tooltip", n)), "string" == typeof t)) {
            if ("undefined" == typeof n[t]) throw new Error('No method named "' + t + '"');n[t]();
          }
        });
      }, r(o, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return c;
        } }, { key: "NAME", get: function get() {
          return t;
        } }, { key: "DATA_KEY", get: function get() {
          return "bs.tooltip";
        } }, { key: "Event", get: function get() {
          return d;
        } }, { key: "EVENT_KEY", get: function get() {
          return i;
        } }, { key: "DefaultType", get: function get() {
          return l;
        } }]), o;
    }();return e.fn[t] = m._jQueryInterface, e.fn[t].Constructor = m, e.fn[t].noConflict = function () {
      return e.fn[t] = o, m._jQueryInterface;
    }, m;
  }(),
      _ = function () {
    var t = "popover",
        n = ".bs.popover",
        i = e.fn[t],
        s = new RegExp("(^|\\s)bs-popover\\S+", "g"),
        a = e.extend({}, f.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),
        l = e.extend({}, f.DefaultType, { content: "(string|element|function)" }),
        h = { FADE: "fade", SHOW: "show" },
        c = { TITLE: ".popover-header", CONTENT: ".popover-body" },
        u = { HIDE: "hide" + n, HIDDEN: "hidden" + n, SHOW: "show" + n, SHOWN: "shown" + n, INSERTED: "inserted" + n, CLICK: "click" + n, FOCUSIN: "focusin" + n, FOCUSOUT: "focusout" + n, MOUSEENTER: "mouseenter" + n, MOUSELEAVE: "mouseleave" + n },
        d = function (i) {
      function d() {
        return i.apply(this, arguments) || this;
      }o(d, i);var f = d.prototype;return f.isWithContent = function () {
        return this.getTitle() || this._getContent();
      }, f.addAttachmentClass = function (t) {
        e(this.getTipElement()).addClass("bs-popover-" + t);
      }, f.getTipElement = function () {
        return this.tip = this.tip || e(this.config.template)[0], this.tip;
      }, f.setContent = function () {
        var t = e(this.getTipElement());this.setElementContent(t.find(c.TITLE), this.getTitle()), this.setElementContent(t.find(c.CONTENT), this._getContent()), t.removeClass(h.FADE + " " + h.SHOW);
      }, f._getContent = function () {
        return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content);
      }, f._cleanTipClass = function () {
        var t = e(this.getTipElement()),
            n = t.attr("class").match(s);null !== n && n.length > 0 && t.removeClass(n.join(""));
      }, d._jQueryInterface = function (t) {
        return this.each(function () {
          var n = e(this).data("bs.popover"),
              i = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t : null;if ((n || !/destroy|hide/.test(t)) && (n || (n = new d(this, i), e(this).data("bs.popover", n)), "string" == typeof t)) {
            if ("undefined" == typeof n[t]) throw new Error('No method named "' + t + '"');n[t]();
          }
        });
      }, r(d, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return a;
        } }, { key: "NAME", get: function get() {
          return t;
        } }, { key: "DATA_KEY", get: function get() {
          return "bs.popover";
        } }, { key: "Event", get: function get() {
          return u;
        } }, { key: "EVENT_KEY", get: function get() {
          return n;
        } }, { key: "DefaultType", get: function get() {
          return l;
        } }]), d;
    }(f);return e.fn[t] = d._jQueryInterface, e.fn[t].Constructor = d, e.fn[t].noConflict = function () {
      return e.fn[t] = i, d._jQueryInterface;
    }, d;
  }(),
      g = function () {
    var t = "scrollspy",
        n = e.fn[t],
        i = { offset: 10, method: "auto", target: "" },
        o = { offset: "number", method: "string", target: "(string|element)" },
        a = { ACTIVATE: "activate.bs.scrollspy", SCROLL: "scroll.bs.scrollspy", LOAD_DATA_API: "load.bs.scrollspy.data-api" },
        l = { DROPDOWN_ITEM: "dropdown-item", DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active" },
        h = { DATA_SPY: '[data-spy="scroll"]', ACTIVE: ".active", NAV_LIST_GROUP: ".nav, .list-group", NAV_LINKS: ".nav-link", NAV_ITEMS: ".nav-item", LIST_ITEMS: ".list-group-item", DROPDOWN: ".dropdown", DROPDOWN_ITEMS: ".dropdown-item", DROPDOWN_TOGGLE: ".dropdown-toggle" },
        c = { OFFSET: "offset", POSITION: "position" },
        u = function () {
      function n(t, n) {
        var i = this;this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(n), this._selector = this._config.target + " " + h.NAV_LINKS + "," + this._config.target + " " + h.LIST_ITEMS + "," + this._config.target + " " + h.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, e(this._scrollElement).on(a.SCROLL, function (t) {
          return i._process(t);
        }), this.refresh(), this._process();
      }var u = n.prototype;return u.refresh = function () {
        var t = this,
            n = this._scrollElement !== this._scrollElement.window ? c.POSITION : c.OFFSET,
            i = "auto" === this._config.method ? n : this._config.method,
            r = i === c.POSITION ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), e.makeArray(e(this._selector)).map(function (t) {
          var n,
              o = s.getSelectorFromElement(t);if (o && (n = e(o)[0]), n) {
            var a = n.getBoundingClientRect();if (a.width || a.height) return [e(n)[i]().top + r, o];
          }return null;
        }).filter(function (t) {
          return t;
        }).sort(function (t, e) {
          return t[0] - e[0];
        }).forEach(function (e) {
          t._offsets.push(e[0]), t._targets.push(e[1]);
        });
      }, u.dispose = function () {
        e.removeData(this._element, "bs.scrollspy"), e(this._scrollElement).off(".bs.scrollspy"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, u._getConfig = function (n) {
        if ("string" != typeof (n = e.extend({}, i, n)).target) {
          var r = e(n.target).attr("id");r || (r = s.getUID(t), e(n.target).attr("id", r)), n.target = "#" + r;
        }return s.typeCheckConfig(t, n, o), n;
      }, u._getScrollTop = function () {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, u._getScrollHeight = function () {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, u._getOffsetHeight = function () {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, u._process = function () {
        var t = this._getScrollTop() + this._config.offset,
            e = this._getScrollHeight(),
            n = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), t >= n) {
          var i = this._targets[this._targets.length - 1];this._activeTarget !== i && this._activate(i);
        } else {
          if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();for (var s = this._offsets.length; s--;) {
            this._activeTarget !== this._targets[s] && t >= this._offsets[s] && ("undefined" == typeof this._offsets[s + 1] || t < this._offsets[s + 1]) && this._activate(this._targets[s]);
          }
        }
      }, u._activate = function (t) {
        this._activeTarget = t, this._clear();var n = this._selector.split(",");n = n.map(function (e) {
          return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
        });var i = e(n.join(","));i.hasClass(l.DROPDOWN_ITEM) ? (i.closest(h.DROPDOWN).find(h.DROPDOWN_TOGGLE).addClass(l.ACTIVE), i.addClass(l.ACTIVE)) : (i.addClass(l.ACTIVE), i.parents(h.NAV_LIST_GROUP).prev(h.NAV_LINKS + ", " + h.LIST_ITEMS).addClass(l.ACTIVE), i.parents(h.NAV_LIST_GROUP).prev(h.NAV_ITEMS).children(h.NAV_LINKS).addClass(l.ACTIVE)), e(this._scrollElement).trigger(a.ACTIVATE, { relatedTarget: t });
      }, u._clear = function () {
        e(this._selector).filter(h.ACTIVE).removeClass(l.ACTIVE);
      }, n._jQueryInterface = function (t) {
        return this.each(function () {
          var i = e(this).data("bs.scrollspy"),
              s = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t;if (i || (i = new n(this, s), e(this).data("bs.scrollspy", i)), "string" == typeof t) {
            if ("undefined" == typeof i[t]) throw new Error('No method named "' + t + '"');i[t]();
          }
        });
      }, r(n, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return i;
        } }]), n;
    }();return e(window).on(a.LOAD_DATA_API, function () {
      for (var t = e.makeArray(e(h.DATA_SPY)), n = t.length; n--;) {
        var i = e(t[n]);u._jQueryInterface.call(i, i.data());
      }
    }), e.fn[t] = u._jQueryInterface, e.fn[t].Constructor = u, e.fn[t].noConflict = function () {
      return e.fn[t] = n, u._jQueryInterface;
    }, u;
  }(),
      m = function () {
    var t = e.fn.tab,
        n = { HIDE: "hide.bs.tab", HIDDEN: "hidden.bs.tab", SHOW: "show.bs.tab", SHOWN: "shown.bs.tab", CLICK_DATA_API: "click.bs.tab.data-api" },
        i = { DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active", DISABLED: "disabled", FADE: "fade", SHOW: "show" },
        o = { DROPDOWN: ".dropdown", NAV_LIST_GROUP: ".nav, .list-group", ACTIVE: ".active", ACTIVE_UL: "> li > .active", DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', DROPDOWN_TOGGLE: ".dropdown-toggle", DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active" },
        a = function () {
      function t(t) {
        this._element = t;
      }var a = t.prototype;return a.show = function () {
        var t = this;if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && e(this._element).hasClass(i.ACTIVE) || e(this._element).hasClass(i.DISABLED))) {
          var r,
              a,
              l = e(this._element).closest(o.NAV_LIST_GROUP)[0],
              h = s.getSelectorFromElement(this._element);if (l) {
            var c = "UL" === l.nodeName ? o.ACTIVE_UL : o.ACTIVE;a = e.makeArray(e(l).find(c)), a = a[a.length - 1];
          }var u = e.Event(n.HIDE, { relatedTarget: this._element }),
              d = e.Event(n.SHOW, { relatedTarget: a });if (a && e(a).trigger(u), e(this._element).trigger(d), !d.isDefaultPrevented() && !u.isDefaultPrevented()) {
            h && (r = e(h)[0]), this._activate(this._element, l);var f = function f() {
              var i = e.Event(n.HIDDEN, { relatedTarget: t._element }),
                  s = e.Event(n.SHOWN, { relatedTarget: a });e(a).trigger(i), e(t._element).trigger(s);
            };r ? this._activate(r, r.parentNode, f) : f();
          }
        }
      }, a.dispose = function () {
        e.removeData(this._element, "bs.tab"), this._element = null;
      }, a._activate = function (t, n, r) {
        var a,
            l = this,
            h = (a = "UL" === n.nodeName ? e(n).find(o.ACTIVE_UL) : e(n).children(o.ACTIVE))[0],
            c = r && s.supportsTransitionEnd() && h && e(h).hasClass(i.FADE),
            u = function u() {
          return l._transitionComplete(t, h, c, r);
        };h && c ? e(h).one(s.TRANSITION_END, u).emulateTransitionEnd(150) : u(), h && e(h).removeClass(i.SHOW);
      }, a._transitionComplete = function (t, n, r, a) {
        if (n) {
          e(n).removeClass(i.ACTIVE);var l = e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];l && e(l).removeClass(i.ACTIVE), "tab" === n.getAttribute("role") && n.setAttribute("aria-selected", !1);
        }if (e(t).addClass(i.ACTIVE), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), r ? (s.reflow(t), e(t).addClass(i.SHOW)) : e(t).removeClass(i.FADE), t.parentNode && e(t.parentNode).hasClass(i.DROPDOWN_MENU)) {
          var h = e(t).closest(o.DROPDOWN)[0];h && e(h).find(o.DROPDOWN_TOGGLE).addClass(i.ACTIVE), t.setAttribute("aria-expanded", !0);
        }a && a();
      }, t._jQueryInterface = function (n) {
        return this.each(function () {
          var i = e(this),
              s = i.data("bs.tab");if (s || (s = new t(this), i.data("bs.tab", s)), "string" == typeof n) {
            if ("undefined" == typeof s[n]) throw new Error('No method named "' + n + '"');s[n]();
          }
        });
      }, r(t, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }]), t;
    }();return e(document).on(n.CLICK_DATA_API, o.DATA_TOGGLE, function (t) {
      t.preventDefault(), a._jQueryInterface.call(e(this), "show");
    }), e.fn.tab = a._jQueryInterface, e.fn.tab.Constructor = a, e.fn.tab.noConflict = function () {
      return e.fn.tab = t, a._jQueryInterface;
    }, a;
  }();return function () {
    if ("undefined" == typeof e) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t = e.fn.jquery.split(" ")[0].split(".");if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || t[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
  }(), t.Util = s, t.Alert = a, t.Button = l, t.Carousel = h, t.Collapse = c, t.Dropdown = u, t.Modal = d, t.Popover = _, t.Scrollspy = g, t.Tab = m, t.Tooltip = f, t;
}({}, $, Popper);
//# sourceMappingURL=bootstrap.min.js.map

/***/ }),

/***/ "./mock/admin/src/js/libraries/jquery.sortable.js":
/*!********************************************************!*\
  !*** ./mock/admin/src/js/libraries/jquery.sortable.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * HTML5 Sortable jQuery Plugin
 * http://farhadi.ir/projects/html5sortable
 *
 * Copyright 2012, Ali Farhadi
 * Released under the MIT license.
 */
(function ($) {
	var dragging,
	    placeholders = $();
	$.fn.sortable = function (options) {
		var method = String(options);
		options = $.extend({
			connectWith: false
		}, options);
		return this.each(function () {
			if (/^enable|disable|destroy$/.test(method)) {
				var items = $(this).children($(this).data('items')).attr('draggable', method == 'enable');
				if (method == 'destroy') {
					items.add(this).removeData('connectWith items').off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');
				}
				return;
			}
			var isHandle,
			    index,
			    items = $(this).children(options.items);
			var placeholder = $('<' + (/^ul|ol$/i.test(this.tagName) ? 'li' : 'div') + ' class="sortable-placeholder">');
			items.find(options.handle).mousedown(function () {
				isHandle = true;
			}).mouseup(function () {
				isHandle = false;
			});
			$(this).data('items', options.items);
			placeholders = placeholders.add(placeholder);
			if (options.connectWith) {
				$(options.connectWith).add(this).data('connectWith', options.connectWith);
			}
			items.attr('draggable', 'true').on('dragstart.h5s', function (e) {
				if (options.handle && !isHandle) {
					return false;
				}
				isHandle = false;
				var dt = e.originalEvent.dataTransfer;
				dt.effectAllowed = 'move';
				dt.setData('Text', 'dummy');
				index = (dragging = $(this)).addClass('sortable-dragging').index();
			}).on('dragend.h5s', function () {
				dragging.removeClass('sortable-dragging').show();
				placeholders.detach();
				if (index != dragging.index()) {
					items.parent().trigger('sortupdate', { item: dragging });
				}
				dragging = null;
			}).not('a[href], img').on('selectstart.h5s', function () {
				this.dragDrop && this.dragDrop();
				return false;
			}).end().add([this, placeholder]).on('dragover.h5s dragenter.h5s drop.h5s', function (e) {
				if (!items.is(dragging) && options.connectWith !== $(dragging).parent().data('connectWith')) {
					return true;
				}
				if (e.type == 'drop') {
					e.stopPropagation();
					placeholders.filter(':visible').after(dragging);
					return false;
				}
				e.preventDefault();
				e.originalEvent.dataTransfer.dropEffect = 'move';
				if (items.is(this)) {
					if (options.forcePlaceholderSize) {
						placeholder.height(dragging.outerHeight());
					}
					dragging.hide();
					$(this)[placeholder.index() < $(this).index() ? 'after' : 'before'](placeholder);
					placeholders.not(placeholder).detach();
				} else if (!placeholders.is(this) && !$(this).children(options.items).length) {
					placeholders.detach();
					$(this).append(placeholder);
				}
				return false;
			});
		});
	};
})(jQuery);

/***/ }),

/***/ "./mock/admin/src/js/libraries/jquery.tablesorter.js":
/*!***********************************************************!*\
  !*** ./mock/admin/src/js/libraries/jquery.tablesorter.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 *
 * TableSorter 2.0 - Client-side table sorting with ease!
 * Version 2.0.5b
 * @requires jQuery v1.2.3
 *
 * Copyright (c) 2007 Christian Bach
 * Examples and docs at: http://tablesorter.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
/**
 *
 * @description Create a sortable table with multi-column sorting capabilitys
 *
 * @example $('table').tablesorter();
 * @desc Create a simple tablesorter interface.
 *
 * @example $('table').tablesorter({ sortList:[[0,0],[1,0]] });
 * @desc Create a tablesorter interface and sort on the first and secound column column headers.
 *
 * @example $('table').tablesorter({ headers: { 0: { sorter: false}, 1: {sorter: false} } });
 *
 * @desc Create a tablesorter interface and disableing the first and second  column headers.
 *
 *
 * @example $('table').tablesorter({ headers: { 0: {sorter:"integer"}, 1: {sorter:"currency"} } });
 *
 * @desc Create a tablesorter interface and set a column parser for the first
 *	   and second column.
 *
 *
 * @param Object
 *			settings An object literal containing key/value pairs to provide
 *			optional settings.
 *
 *
 * @option String cssHeader (optional) A string of the class name to be appended
 *		 to sortable tr elements in the thead of the table. Default value:
 *		 "header"
 *
 * @option String cssAsc (optional) A string of the class name to be appended to
 *		 sortable tr elements in the thead on a ascending sort. Default value:
 *		 "headerSortUp"
 *
 * @option String cssDesc (optional) A string of the class name to be appended
 *		 to sortable tr elements in the thead on a descending sort. Default
 *		 value: "headerSortDown"
 *
 * @option String sortInitialOrder (optional) A string of the inital sorting
 *		 order can be asc or desc. Default value: "asc"
 *
 * @option String sortMultisortKey (optional) A string of the multi-column sort
 *		 key. Default value: "shiftKey"
 *
 * @option String textExtraction (optional) A string of the text-extraction
 *		 method to use. For complex html structures inside td cell set this
 *		 option to "complex", on large tables the complex option can be slow.
 *		 Default value: "simple"
 *
 * @option Object headers (optional) An object of instructions for per-column
 *		 controls in the format: headers: { 0: { option: setting }, ... }. For
 *		 example, to disable sorting on the first two columns of a table:
 *		 headers: { 0: { sorter: false}, 1: {sorter: false} }.
 *		 Default value: null.
 *
 * @option Array sortList (optional) An array of instructions for per-column sorting
 *		 and direction in the format: [[columnIndex, sortDirection], ... ] where
 *		 columnIndex is a zero-based index for your columns left-to-right and
 *		 sortDirection is 0 for Ascending and 1 for Descending. A valid argument
 *		 that sorts ascending first by column 1 and then column 2 looks like:
 *		 [[0,0],[1,0]]. Default value: null.
 *
 * @option Array sortForce (optional) An array containing forced sorting rules.
 *		 Use to add an additional forced sort that will be appended to the dynamic
 *		 selections by the user. For example, can be used to sort people alphabetically
 *		 after some other user-selected sort that results in rows with the same value
 *		 like dates or money due. It can help prevent data from appearing as though it
 *		 has a random secondary sort. Default value: null.
 *
 * @option Boolean sortLocaleCompare (optional) Boolean flag indicating whatever
 *		 to use String.localeCampare method or not. Default set to true.
 *
 *
 * @option Array sortAppend (optional) An array containing forced sorting rules.
 *		 This option let's you specify a default sorting rule, which is
 *		 appended to user-selected rules. Default value: null
 *
 * @option Boolean widthFixed (optional) Boolean flag indicating if tablesorter
 *		 should apply fixed widths to the table columns. This is usefull when
 *		 using the pager companion plugin. This options requires the dimension
 *		 jquery plugin. Default value: false
 *
 * @option Boolean cancelSelection (optional) Boolean flag indicating if
 *		 tablesorter should cancel selection of the table headers text.
 *		 Default value: true
 *
 * @option Boolean debug (optional) Boolean flag indicating if tablesorter
 *		 should display debuging information usefull for development.
 *
 * @type jQuery
 *
 * @name tablesorter
 *
 * @cat Plugins/Tablesorter
 *
 * @author Christian Bach/christian.bach@polyester.se
 */

(function ($) {
	$.extend({
		tablesorter: new function () {

			var parsers = [],
			    widgets = [];

			this.defaults = {
				cssHeader: "header",
				cssAsc: "headerSortUp",
				cssDesc: "headerSortDown",
				cssChildRow: "expand-child",
				sortInitialOrder: "asc",
				sortMultiSortKey: "shiftKey",
				sortForce: null,
				sortAppend: null,
				sortLocaleCompare: true,
				textExtraction: "simple",
				parsers: {}, widgets: [],
				widgetZebra: {
					css: ["even", "odd"]
				}, headers: {}, widthFixed: false,
				cancelSelection: true,
				sortList: [],
				headerList: [],
				dateFormat: "us",
				decimal: '/\.|\,/g',
				onRenderHeader: null,
				selectorHeaders: 'thead th',
				debug: false
			};

			/* debuging utils */

			function benchmark(s, d) {
				log(s + "," + (new Date().getTime() - d.getTime()) + "ms");
			}

			this.benchmark = benchmark;

			function log(s) {
				if (typeof console != "undefined" && typeof console.debug != "undefined") {
					console.log(s);
				} else {
					alert(s);
				}
			}

			/* parsers utils */

			function buildParserCache(table, $headers) {

				if (table.config.debug) {
					var parsersDebug = "";
				}

				if (table.tBodies.length == 0) return; // In the case of empty tables
				var rows = table.tBodies[0].rows;

				if (rows[0]) {

					var list = [],
					    cells = rows[0].cells,
					    l = cells.length;

					for (var i = 0; i < l; i++) {

						var p = false;

						if ($.metadata && $($headers[i]).metadata() && $($headers[i]).metadata().sorter) {

							p = getParserById($($headers[i]).metadata().sorter);
						} else if (table.config.headers[i] && table.config.headers[i].sorter) {

							p = getParserById(table.config.headers[i].sorter);
						}
						if (!p) {

							p = detectParserForColumn(table, rows, -1, i);
						}

						if (table.config.debug) {
							parsersDebug += "column:" + i + " parser:" + p.id + "\n";
						}

						list.push(p);
					}
				}

				if (table.config.debug) {
					log(parsersDebug);
				}

				return list;
			};

			function detectParserForColumn(table, rows, rowIndex, cellIndex) {
				var l = parsers.length,
				    node = false,
				    nodeValue = false,
				    keepLooking = true;
				while (nodeValue == '' && keepLooking) {
					rowIndex++;
					if (rows[rowIndex]) {
						node = getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex);
						nodeValue = trimAndGetNodeText(table.config, node);
						if (table.config.debug) {
							log('Checking if value was empty on row:' + rowIndex);
						}
					} else {
						keepLooking = false;
					}
				}
				for (var i = 1; i < l; i++) {
					if (parsers[i].is(nodeValue, table, node)) {
						return parsers[i];
					}
				}
				// 0 is always the generic parser (text)
				return parsers[0];
			}

			function getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex) {
				return rows[rowIndex].cells[cellIndex];
			}

			function trimAndGetNodeText(config, node) {
				return $.trim(getElementText(config, node));
			}

			function getParserById(name) {
				var l = parsers.length;
				for (var i = 0; i < l; i++) {
					if (parsers[i].id.toLowerCase() == name.toLowerCase()) {
						return parsers[i];
					}
				}
				return false;
			}

			/* utils */

			function buildCache(table) {

				if (table.config.debug) {
					var cacheTime = new Date();
				}

				var totalRows = table.tBodies[0] && table.tBodies[0].rows.length || 0,
				    totalCells = table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length || 0,
				    parsers = table.config.parsers,
				    cache = {
					row: [],
					normalized: []
				};

				for (var i = 0; i < totalRows; ++i) {

					/** Add the table data to main data array */
					var c = $(table.tBodies[0].rows[i]),
					    cols = [];

					// if this is a child row, add it to the last row's children and
					// continue to the next row
					if (c.hasClass(table.config.cssChildRow)) {
						cache.row[cache.row.length - 1] = cache.row[cache.row.length - 1].add(c);
						// go to the next for loop
						continue;
					}

					cache.row.push(c);

					for (var j = 0; j < totalCells; ++j) {
						cols.push(parsers[j].format(getElementText(table.config, c[0].cells[j]), table, c[0].cells[j]));
					}

					cols.push(cache.normalized.length); // add position for rowCache
					cache.normalized.push(cols);
					cols = null;
				};

				if (table.config.debug) {
					benchmark("Building cache for " + totalRows + " rows:", cacheTime);
				}

				return cache;
			};

			function getElementText(config, node) {

				if (!node) return "";

				var $node = $(node),
				    data = $node.attr('data-sort-value');
				if (data !== undefined) return data;

				var text = "";

				if (!config.supportsTextContent) config.supportsTextContent = node.textContent || false;

				if (config.textExtraction == "simple") {
					if (config.supportsTextContent) {
						text = node.textContent;
					} else {
						if (node.childNodes[0] && node.childNodes[0].hasChildNodes()) {
							text = node.childNodes[0].innerHTML;
						} else {
							text = node.innerHTML;
						}
					}
				} else {
					if (typeof config.textExtraction == "function") {
						text = config.textExtraction(node);
					} else {
						text = $(node).text();
					}
				}
				return text;
			}

			function appendToTable(table, cache) {

				if (table.config.debug) {
					var appendTime = new Date();
				}

				var c = cache,
				    r = c.row,
				    n = c.normalized,
				    totalRows = n.length,
				    checkCell = n[0].length - 1,
				    tableBody = $(table.tBodies[0]),
				    rows = [];

				for (var i = 0; i < totalRows; i++) {
					var pos = n[i][checkCell];

					rows.push(r[pos]);

					if (!table.config.appender) {

						//var o = ;
						var l = r[pos].length;
						for (var j = 0; j < l; j++) {
							tableBody[0].appendChild(r[pos][j]);
						}

						//
					}
				}

				if (table.config.appender) {

					table.config.appender(table, rows);
				}

				rows = null;

				if (table.config.debug) {
					benchmark("Rebuilt table:", appendTime);
				}

				// apply table widgets
				applyWidget(table);

				// trigger sortend
				setTimeout(function () {
					$(table).trigger("sortEnd");
				}, 0);
			};

			function buildHeaders(table) {

				if (table.config.debug) {
					var time = new Date();
				}

				var meta = $.metadata ? true : false;

				var header_index = computeTableHeaderCellIndexes(table);

				var $tableHeaders = $(table.config.selectorHeaders, table).each(function (index) {

					this.column = header_index[this.parentNode.rowIndex + "-" + this.cellIndex];
					// this.column = index;
					this.order = formatSortingOrder(table.config.sortInitialOrder);

					this.count = this.order;

					if (checkHeaderMetadata(this) || checkHeaderOptions(table, index)) this.sortDisabled = true;
					if (checkHeaderOptionsSortingLocked(table, index)) this.order = this.lockedOrder = checkHeaderOptionsSortingLocked(table, index);

					if (!this.sortDisabled) {
						var $th = $(this).addClass(table.config.cssHeader);
						if (table.config.onRenderHeader) table.config.onRenderHeader.apply($th);
					}

					// add cell to headerList
					table.config.headerList[index] = this;
				});

				if (table.config.debug) {
					benchmark("Built headers:", time);
					log($tableHeaders);
				}

				return $tableHeaders;
			};

			// from:
			// http://www.javascripttoolbox.com/lib/table/examples.php
			// http://www.javascripttoolbox.com/temp/table_cellindex.html


			function computeTableHeaderCellIndexes(t) {
				var matrix = [];
				var lookup = {};
				var thead = t.getElementsByTagName('THEAD')[0];
				var trs = thead.getElementsByTagName('TR');

				for (var i = 0; i < trs.length; i++) {
					var cells = trs[i].cells;
					for (var j = 0; j < cells.length; j++) {
						var c = cells[j];

						var rowIndex = c.parentNode.rowIndex;
						var cellId = rowIndex + "-" + c.cellIndex;
						var rowSpan = c.rowSpan || 1;
						var colSpan = c.colSpan || 1;
						var firstAvailCol;
						if (typeof matrix[rowIndex] == "undefined") {
							matrix[rowIndex] = [];
						}
						// Find first available column in the first row
						for (var k = 0; k < matrix[rowIndex].length + 1; k++) {
							if (typeof matrix[rowIndex][k] == "undefined") {
								firstAvailCol = k;
								break;
							}
						}
						lookup[cellId] = firstAvailCol;
						for (var k = rowIndex; k < rowIndex + rowSpan; k++) {
							if (typeof matrix[k] == "undefined") {
								matrix[k] = [];
							}
							var matrixrow = matrix[k];
							for (var l = firstAvailCol; l < firstAvailCol + colSpan; l++) {
								matrixrow[l] = "x";
							}
						}
					}
				}
				return lookup;
			}

			function checkCellColSpan(table, rows, row) {
				var arr = [],
				    r = table.tHead.rows,
				    c = r[row].cells;

				for (var i = 0; i < c.length; i++) {
					var cell = c[i];

					if (cell.colSpan > 1) {
						arr = arr.concat(checkCellColSpan(table, headerArr, row++));
					} else {
						if (table.tHead.length == 1 || cell.rowSpan > 1 || !r[row + 1]) {
							arr.push(cell);
						}
						// headerArr[row] = (i+row);
					}
				}
				return arr;
			};

			function checkHeaderMetadata(cell) {
				if ($.metadata && $(cell).metadata().sorter === false) {
					return true;
				};
				return false;
			}

			function checkHeaderOptions(table, i) {
				if (table.config.headers[i] && table.config.headers[i].sorter === false) {
					return true;
				};
				return false;
			}

			function checkHeaderOptionsSortingLocked(table, i) {
				if (table.config.headers[i] && table.config.headers[i].lockedOrder) return table.config.headers[i].lockedOrder;
				return false;
			}

			function applyWidget(table) {
				var c = table.config.widgets;
				var l = c.length;
				for (var i = 0; i < l; i++) {

					getWidgetById(c[i]).format(table);
				}
			}

			function getWidgetById(name) {
				var l = widgets.length;
				for (var i = 0; i < l; i++) {
					if (widgets[i].id.toLowerCase() == name.toLowerCase()) {
						return widgets[i];
					}
				}
			};

			function formatSortingOrder(v) {
				if (typeof v != "Number") {
					return v.toLowerCase() == "desc" ? 1 : 0;
				} else {
					return v == 1 ? 1 : 0;
				}
			}

			function isValueInArray(v, a) {
				var l = a.length;
				for (var i = 0; i < l; i++) {
					if (a[i][0] == v) {
						return true;
					}
				}
				return false;
			}

			function setHeadersCss(table, $headers, list, css) {
				// remove all header information
				$headers.removeClass(css[0]).removeClass(css[1]);

				var h = [];
				$headers.each(function (offset) {
					if (!this.sortDisabled) {
						h[this.column] = $(this);
					}
				});

				var l = list.length;
				for (var i = 0; i < l; i++) {
					h[list[i][0]].addClass(css[list[i][1]]);
				}
			}

			function fixColumnWidth(table, $headers) {
				var c = table.config;
				if (c.widthFixed) {
					var colgroup = $('<colgroup>');
					$("tr:first td", table.tBodies[0]).each(function () {
						colgroup.append($('<col>').css('width', $(this).width()));
					});
					$(table).prepend(colgroup);
				};
			}

			function updateHeaderSortCount(table, sortList) {
				var c = table.config,
				    l = sortList.length;
				for (var i = 0; i < l; i++) {
					var s = sortList[i],
					    o = c.headerList[s[0]];
					o.count = s[1];
					o.count++;
				}
			}

			/* sorting methods */

			var sortWrapper;

			function multisort(table, sortList, cache) {

				if (table.config.debug) {
					var sortTime = new Date();
				}

				var dynamicExp = "sortWrapper = function(a,b) {",
				    l = sortList.length;

				// TODO: inline functions.
				for (var i = 0; i < l; i++) {

					var c = sortList[i][0];
					var order = sortList[i][1];
					// var s = (getCachedSortType(table.config.parsers,c) == "text") ?
					// ((order == 0) ? "sortText" : "sortTextDesc") : ((order == 0) ?
					// "sortNumeric" : "sortNumericDesc");
					// var s = (table.config.parsers[c].type == "text") ? ((order == 0)
					// ? makeSortText(c) : makeSortTextDesc(c)) : ((order == 0) ?
					// makeSortNumeric(c) : makeSortNumericDesc(c));
					var s = table.config.parsers[c].type == "text" ? order == 0 ? makeSortFunction("text", "asc", c) : makeSortFunction("text", "desc", c) : order == 0 ? makeSortFunction("numeric", "asc", c) : makeSortFunction("numeric", "desc", c);
					var e = "e" + i;

					dynamicExp += "var " + e + " = " + s; // + "(a[" + c + "],b[" + c
					// + "]); ";
					dynamicExp += "if(" + e + ") { return " + e + "; } ";
					dynamicExp += "else { ";
				}

				// if value is the same keep orignal order
				var orgOrderCol = cache.normalized[0].length - 1;
				dynamicExp += "return a[" + orgOrderCol + "]-b[" + orgOrderCol + "];";

				for (var i = 0; i < l; i++) {
					dynamicExp += "}; ";
				}

				dynamicExp += "return 0; ";
				dynamicExp += "}; ";

				if (table.config.debug) {
					benchmark("Evaling expression:" + dynamicExp, new Date());
				}

				eval(dynamicExp);

				cache.normalized.sort(sortWrapper);

				if (table.config.debug) {
					benchmark("Sorting on " + sortList.toString() + " and dir " + order + " time:", sortTime);
				}

				return cache;
			};

			function makeSortFunction(type, direction, index) {
				var a = "a[" + index + "]",
				    b = "b[" + index + "]";
				if (type == 'text' && direction == 'asc') {
					return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + a + " < " + b + ") ? -1 : 1 )));";
				} else if (type == 'text' && direction == 'desc') {
					return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + b + " < " + a + ") ? -1 : 1 )));";
				} else if (type == 'numeric' && direction == 'asc') {
					return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + a + " - " + b + "));";
				} else if (type == 'numeric' && direction == 'desc') {
					return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + b + " - " + a + "));";
				}
			};

			function makeSortText(i) {
				return "((a[" + i + "] < b[" + i + "]) ? -1 : ((a[" + i + "] > b[" + i + "]) ? 1 : 0));";
			};

			function makeSortTextDesc(i) {
				return "((b[" + i + "] < a[" + i + "]) ? -1 : ((b[" + i + "] > a[" + i + "]) ? 1 : 0));";
			};

			function makeSortNumeric(i) {
				return "a[" + i + "]-b[" + i + "];";
			};

			function makeSortNumericDesc(i) {
				return "b[" + i + "]-a[" + i + "];";
			};

			function sortText(a, b) {
				if (table.config.sortLocaleCompare) return a.localeCompare(b);
				return a < b ? -1 : a > b ? 1 : 0;
			};

			function sortTextDesc(a, b) {
				if (table.config.sortLocaleCompare) return b.localeCompare(a);
				return b < a ? -1 : b > a ? 1 : 0;
			};

			function sortNumeric(a, b) {
				return a - b;
			};

			function sortNumericDesc(a, b) {
				return b - a;
			};

			function getCachedSortType(parsers, i) {
				return parsers[i].type;
			}; /* public methods */
			this.construct = function (settings) {
				return this.each(function () {
					// if no thead or tbody quit.
					if (!this.tHead || !this.tBodies) return;
					// declare
					var $this,
					    $document,
					    $headers,
					    cache,
					    config,
					    shiftDown = 0,
					    sortOrder;
					// new blank config object
					this.config = {};
					// merge and extend.
					config = $.extend(this.config, $.tablesorter.defaults, settings);
					// store common expression for speed
					$this = $(this);
					// save the settings where they read
					$.data(this, "tablesorter", config);
					// build headers
					$headers = buildHeaders(this);
					// try to auto detect column type, and store in tables config
					this.config.parsers = buildParserCache(this, $headers);
					// build the cache for the tbody cells
					cache = buildCache(this);
					// get the css class names, could be done else where.
					var sortCSS = [config.cssDesc, config.cssAsc];
					// fixate columns if the users supplies the fixedWidth option
					fixColumnWidth(this);
					// apply event handling to headers
					// this is to big, perhaps break it out?
					$headers.click(function (e) {
						var totalRows = $this[0].tBodies[0] && $this[0].tBodies[0].rows.length || 0;
						if (!this.sortDisabled && totalRows > 0) {
							// Only call sortStart if sorting is
							// enabled.
							$this.trigger("sortStart");
							// store exp, for speed
							var $cell = $(this);
							// get current column index
							var i = this.column;
							// get current column sort order
							this.order = this.count++ % 2;
							// always sort on the locked order.
							if (this.lockedOrder) this.order = this.lockedOrder;

							// user only whants to sort on one
							// column
							if (!e[config.sortMultiSortKey]) {
								// flush the sort list
								config.sortList = [];
								if (config.sortForce != null) {
									var a = config.sortForce;
									for (var j = 0; j < a.length; j++) {
										if (a[j][0] != i) {
											config.sortList.push(a[j]);
										}
									}
								}
								// add column to sort list
								config.sortList.push([i, this.order]);
								// multi column sorting
							} else {
								// the user has clicked on an all
								// ready sortet column.
								if (isValueInArray(i, config.sortList)) {
									// revers the sorting direction
									// for all tables.
									for (var j = 0; j < config.sortList.length; j++) {
										var s = config.sortList[j],
										    o = config.headerList[s[0]];
										if (s[0] == i) {
											o.count = s[1];
											o.count++;
											s[1] = o.count % 2;
										}
									}
								} else {
									// add column to sort list array
									config.sortList.push([i, this.order]);
								}
							};
							setTimeout(function () {
								// set css for headers
								setHeadersCss($this[0], $headers, config.sortList, sortCSS);
								appendToTable($this[0], multisort($this[0], config.sortList, cache));
							}, 1);
							// stop normal event by returning false
							return false;
						}
						// cancel selection
					}).mousedown(function () {
						if (config.cancelSelection) {
							this.onselectstart = function () {
								return false;
							};
							return false;
						}
					});
					// apply easy methods that trigger binded events
					$this.bind("update", function () {
						var me = this;
						setTimeout(function () {
							// rebuild parsers.
							me.config.parsers = buildParserCache(me, $headers);
							// rebuild the cache map
							cache = buildCache(me);
						}, 1);
					}).bind("updateCell", function (e, cell) {
						var config = this.config;
						// get position from the dom.
						var pos = [cell.parentNode.rowIndex - 1, cell.cellIndex];
						// update cache
						cache.normalized[pos[0]][pos[1]] = config.parsers[pos[1]].format(getElementText(config, cell), cell);
					}).bind("sorton", function (e, list) {
						$(this).trigger("sortStart");
						config.sortList = list;
						// update and store the sortlist
						var sortList = config.sortList;
						// update header count index
						updateHeaderSortCount(this, sortList);
						// set css for headers
						setHeadersCss(this, $headers, sortList, sortCSS);
						// sort the table and append it to the dom
						appendToTable(this, multisort(this, sortList, cache));
					}).bind("appendCache", function () {
						appendToTable(this, cache);
					}).bind("applyWidgetId", function (e, id) {
						getWidgetById(id).format(this);
					}).bind("applyWidgets", function () {
						// apply widgets
						applyWidget(this);
					});
					if ($.metadata && $(this).metadata() && $(this).metadata().sortlist) {
						config.sortList = $(this).metadata().sortlist;
					}
					// if user has supplied a sort list to constructor.
					if (config.sortList.length > 0) {
						$this.trigger("sorton", [config.sortList]);
					}
					// apply widgets
					applyWidget(this);
				});
			};
			this.addParser = function (parser) {
				var l = parsers.length,
				    a = true;
				for (var i = 0; i < l; i++) {
					if (parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {
						a = false;
					}
				}
				if (a) {
					parsers.push(parser);
				};
			};
			this.addWidget = function (widget) {
				widgets.push(widget);
			};
			this.formatFloat = function (s) {
				var i = parseFloat(s);
				return isNaN(i) ? 0 : i;
			};
			this.formatInt = function (s) {
				var i = parseInt(s);
				return isNaN(i) ? 0 : i;
			};
			this.isDigit = function (s, config) {
				// replace all an wanted chars and match.
				return (/^[-+]?\d*$/.test($.trim(s.replace(/[,.']/g, '')))
				);
			};
			this.clearTableBody = function (table) {
				if ($.browser.msie) {
					while (table.tBodies[0].firstChild) {
						table.tBodies[0].removeChild(table.tBodies[0].firstChild);
					}
				} else {
					table.tBodies[0].innerHTML = "";
				}
			};
		}()
	});

	// extend plugin scope
	$.fn.extend({
		tablesorter: $.tablesorter.construct
	});

	// make shortcut
	var ts = $.tablesorter;

	// add default parsers
	ts.addParser({
		id: "text",
		is: function is(s) {
			return true;
		}, format: function format(s) {
			return $.trim(s.toLocaleLowerCase());
		}, type: "text"
	});

	ts.addParser({
		id: "digit",
		is: function is(s, table) {
			var c = table.config;
			return $.tablesorter.isDigit(s, c);
		}, format: function format(s) {
			return $.tablesorter.formatFloat(s);
		}, type: "numeric"
	});

	ts.addParser({
		id: "currency",
		is: function is(s) {
			return (/^[£$€?.]/.test(s)
			);
		}, format: function format(s) {
			return $.tablesorter.formatFloat(s.replace(new RegExp(/[£$€]/g), ""));
		}, type: "numeric"
	});

	ts.addParser({
		id: "ipAddress",
		is: function is(s) {
			return (/^\d{2,3}[\.]\d{2,3}[\.]\d{2,3}[\.]\d{2,3}$/.test(s)
			);
		}, format: function format(s) {
			var a = s.split("."),
			    r = "",
			    l = a.length;
			for (var i = 0; i < l; i++) {
				var item = a[i];
				if (item.length == 2) {
					r += "0" + item;
				} else {
					r += item;
				}
			}
			return $.tablesorter.formatFloat(r);
		}, type: "numeric"
	});

	ts.addParser({
		id: "url",
		is: function is(s) {
			return (/^(https?|ftp|file):\/\/$/.test(s)
			);
		}, format: function format(s) {
			return jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\/\//), ''));
		}, type: "text"
	});

	ts.addParser({
		id: "isoDate",
		is: function is(s) {
			return (/^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(s)
			);
		}, format: function format(s) {
			return $.tablesorter.formatFloat(s != "" ? new Date(s.replace(new RegExp(/-/g), "/")).getTime() : "0");
		}, type: "numeric"
	});

	ts.addParser({
		id: "percent",
		is: function is(s) {
			return (/\%$/.test($.trim(s))
			);
		}, format: function format(s) {
			return $.tablesorter.formatFloat(s.replace(new RegExp(/%/g), ""));
		}, type: "numeric"
	});

	ts.addParser({
		id: "usLongDate",
		is: function is(s) {
			return s.match(new RegExp(/^[A-Za-z]{3,10}\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(AM|PM)))$/));
		}, format: function format(s) {
			return $.tablesorter.formatFloat(new Date(s).getTime());
		}, type: "numeric"
	});

	ts.addParser({
		id: "shortDate",
		is: function is(s) {
			return (/\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(s)
			);
		}, format: function format(s, table) {
			var c = table.config;
			s = s.replace(/\-/g, "/");
			if (c.dateFormat == "us") {
				// reformat the string in ISO format
				s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$1/$2");
			}
			if (c.dateFormat == "pt") {
				s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$2/$1");
			} else if (c.dateFormat == "uk") {
				// reformat the string in ISO format
				s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$2/$1");
			} else if (c.dateFormat == "dd/mm/yy" || c.dateFormat == "dd-mm-yy") {
				s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})/, "$1/$2/$3");
			}
			return $.tablesorter.formatFloat(new Date(s).getTime());
		}, type: "numeric"
	});
	ts.addParser({
		id: "time",
		is: function is(s) {
			return (/^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(am|pm)))$/.test(s)
			);
		}, format: function format(s) {
			return $.tablesorter.formatFloat(new Date("2000/01/01 " + s).getTime());
		}, type: "numeric"
	});
	ts.addParser({
		id: "metadata",
		is: function is(s) {
			return false;
		}, format: function format(s, table, cell) {
			var c = table.config,
			    p = !c.parserMetadataName ? 'sortValue' : c.parserMetadataName;
			return $(cell).metadata()[p];
		}, type: "numeric"
	});
	// add default widgets
	ts.addWidget({
		id: "zebra",
		format: function format(table) {
			if (table.config.debug) {
				var time = new Date();
			}
			var $tr,
			    row = -1,
			    odd;
			// loop through the visible rows
			$("tr:visible", table.tBodies[0]).each(function (i) {
				$tr = $(this);
				// style children rows the same way the parent
				// row was styled
				if (!$tr.hasClass(table.config.cssChildRow)) row++;
				odd = row % 2 == 0;
				$tr.removeClass(table.config.widgetZebra.css[odd ? 0 : 1]).addClass(table.config.widgetZebra.css[odd ? 1 : 0]);
			});
			if (table.config.debug) {
				$.tablesorter.benchmark("Applying Zebra widget", time);
			}
		}
	});
})(jQuery);

/***/ }),

/***/ "./mock/admin/src/js/libraries/sweetalert2.all.js":
/*!********************************************************!*\
  !*** ./mock/admin/src/js/libraries/sweetalert2.all.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
* sweetalert2 v9.1.5
* Released under the MIT License.
*/
(function (global, factory) {
  ( false ? undefined : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var consolePrefix = 'SweetAlert2:';
  /**
   * Filter the unique values into a new array
   * @param arr
   */

  var uniqueArray = function uniqueArray(arr) {
    var result = [];

    for (var i = 0; i < arr.length; i++) {
      if (result.indexOf(arr[i]) === -1) {
        result.push(arr[i]);
      }
    }

    return result;
  };
  /**
   * Returns the array ob object values (Object.values isn't supported in IE11)
   * @param obj
   */

  var objectValues = function objectValues(obj) {
    return Object.keys(obj).map(function (key) {
      return obj[key];
    });
  };
  /**
   * Convert NodeList to Array
   * @param nodeList
   */

  var toArray = function toArray(nodeList) {
    return Array.prototype.slice.call(nodeList);
  };
  /**
   * Standardise console warnings
   * @param message
   */

  var warn = function warn(message) {
    console.warn("".concat(consolePrefix, " ").concat(message));
  };
  /**
   * Standardise console errors
   * @param message
   */

  var error = function error(message) {
    console.error("".concat(consolePrefix, " ").concat(message));
  };
  /**
   * Private global state for `warnOnce`
   * @type {Array}
   * @private
   */

  var previousWarnOnceMessages = [];
  /**
   * Show a console warning, but only if it hasn't already been shown
   * @param message
   */

  var warnOnce = function warnOnce(message) {
    if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {
      previousWarnOnceMessages.push(message);
      warn(message);
    }
  };
  /**
   * Show a one-time console warning about deprecated params/methods
   */

  var warnAboutDepreation = function warnAboutDepreation(deprecatedParam, useInstead) {
    warnOnce("\"".concat(deprecatedParam, "\" is deprecated and will be removed in the next major release. Please use \"").concat(useInstead, "\" instead."));
  };
  /**
   * If `arg` is a function, call it (with no arguments or context) and return the result.
   * Otherwise, just pass the value through
   * @param arg
   */

  var callIfFunction = function callIfFunction(arg) {
    return typeof arg === 'function' ? arg() : arg;
  };
  var isPromise = function isPromise(arg) {
    return arg && Promise.resolve(arg) === arg;
  };

  var DismissReason = Object.freeze({
    cancel: 'cancel',
    backdrop: 'backdrop',
    close: 'close',
    esc: 'esc',
    timer: 'timer'
  });

  var argsToParams = function argsToParams(args) {
    var params = {};

    switch (_typeof(args[0])) {
      case 'object':
        _extends(params, args[0]);

        break;

      default:
        ['title', 'html', 'icon'].forEach(function (name, index) {
          switch (_typeof(args[index])) {
            case 'string':
              params[name] = args[index];
              break;

            case 'undefined':
              break;

            default:
              error("Unexpected type of ".concat(name, "! Expected \"string\", got ").concat(_typeof(args[index])));
          }
        });
    }

    return params;
  };

  var swalPrefix = 'swal2-';
  var prefix = function prefix(items) {
    var result = {};

    for (var i in items) {
      result[items[i]] = swalPrefix + items[i];
    }

    return result;
  };
  var swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'toast', 'toast-shown', 'toast-column', 'show', 'hide', 'close', 'title', 'header', 'content', 'actions', 'confirm', 'cancel', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl']);
  var iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);

  var states = {
    previousBodyPadding: null
  };
  var hasClass = function hasClass(elem, className) {
    return elem.classList.contains(className);
  };

  var removeCustomClasses = function removeCustomClasses(elem) {
    toArray(elem.classList).forEach(function (className) {
      if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1)) {
        elem.classList.remove(className);
      }
    });
  };

  var applyCustomClass = function applyCustomClass(elem, customClass, className) {
    removeCustomClasses(elem);

    if (customClass && customClass[className]) {
      if (typeof customClass[className] !== 'string' && !customClass[className].forEach) {
        return warn("Invalid type of customClass.".concat(className, "! Expected string or iterable object, got \"").concat(_typeof(customClass[className]), "\""));
      }

      addClass(elem, customClass[className]);
    }
  };
  function getInput(content, inputType) {
    if (!inputType) {
      return null;
    }

    switch (inputType) {
      case 'select':
      case 'textarea':
      case 'file':
        return getChildByClass(content, swalClasses[inputType]);

      case 'checkbox':
        return content.querySelector(".".concat(swalClasses.checkbox, " input"));

      case 'radio':
        return content.querySelector(".".concat(swalClasses.radio, " input:checked")) || content.querySelector(".".concat(swalClasses.radio, " input:first-child"));

      case 'range':
        return content.querySelector(".".concat(swalClasses.range, " input"));

      default:
        return getChildByClass(content, swalClasses.input);
    }
  }
  var focusInput = function focusInput(input) {
    input.focus(); // place cursor at end of text in text input

    if (input.type !== 'file') {
      // http://stackoverflow.com/a/2345915
      var val = input.value;
      input.value = '';
      input.value = val;
    }
  };
  var toggleClass = function toggleClass(target, classList, condition) {
    if (!target || !classList) {
      return;
    }

    if (typeof classList === 'string') {
      classList = classList.split(/\s+/).filter(Boolean);
    }

    classList.forEach(function (className) {
      if (target.forEach) {
        target.forEach(function (elem) {
          condition ? elem.classList.add(className) : elem.classList.remove(className);
        });
      } else {
        condition ? target.classList.add(className) : target.classList.remove(className);
      }
    });
  };
  var addClass = function addClass(target, classList) {
    toggleClass(target, classList, true);
  };
  var removeClass = function removeClass(target, classList) {
    toggleClass(target, classList, false);
  };
  var getChildByClass = function getChildByClass(elem, className) {
    for (var i = 0; i < elem.childNodes.length; i++) {
      if (hasClass(elem.childNodes[i], className)) {
        return elem.childNodes[i];
      }
    }
  };
  var applyNumericalStyle = function applyNumericalStyle(elem, property, value) {
    if (value || parseInt(value) === 0) {
      elem.style[property] = typeof value === 'number' ? value + 'px' : value;
    } else {
      elem.style.removeProperty(property);
    }
  };
  var show = function show(elem) {
    var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';
    elem.style.opacity = '';
    elem.style.display = display;
  };
  var hide = function hide(elem) {
    elem.style.opacity = '';
    elem.style.display = 'none';
  };
  var toggle = function toggle(elem, condition, display) {
    condition ? show(elem, display) : hide(elem);
  }; // borrowed from jquery $(elem).is(':visible') implementation

  var isVisible = function isVisible(elem) {
    return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
  };
  var isScrollable = function isScrollable(elem) {
    return !!(elem.scrollHeight > elem.clientHeight);
  }; // borrowed from https://stackoverflow.com/a/46352119

  var hasCssAnimation = function hasCssAnimation(elem) {
    var style = window.getComputedStyle(elem);
    var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
    var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
    return animDuration > 0 || transDuration > 0;
  };
  var contains = function contains(haystack, needle) {
    if (typeof haystack.contains === 'function') {
      return haystack.contains(needle);
    }
  };

  var getContainer = function getContainer() {
    return document.body.querySelector('.' + swalClasses.container);
  };
  var elementBySelector = function elementBySelector(selectorString) {
    var container = getContainer();
    return container ? container.querySelector(selectorString) : null;
  };

  var elementByClass = function elementByClass(className) {
    return elementBySelector('.' + className);
  };

  var getPopup = function getPopup() {
    return elementByClass(swalClasses.popup);
  };
  var getIcons = function getIcons() {
    var popup = getPopup();
    return toArray(popup.querySelectorAll('.' + swalClasses.icon));
  };
  var getIcon = function getIcon() {
    var visibleIcon = getIcons().filter(function (icon) {
      return isVisible(icon);
    });
    return visibleIcon.length ? visibleIcon[0] : null;
  };
  var getTitle = function getTitle() {
    return elementByClass(swalClasses.title);
  };
  var getContent = function getContent() {
    return elementByClass(swalClasses.content);
  };
  var getImage = function getImage() {
    return elementByClass(swalClasses.image);
  };
  var getProgressSteps = function getProgressSteps() {
    return elementByClass(swalClasses['progress-steps']);
  };
  var getValidationMessage = function getValidationMessage() {
    return elementByClass(swalClasses['validation-message']);
  };
  var getConfirmButton = function getConfirmButton() {
    return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.confirm);
  };
  var getCancelButton = function getCancelButton() {
    return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.cancel);
  };
  var getActions = function getActions() {
    return elementByClass(swalClasses.actions);
  };
  var getHeader = function getHeader() {
    return elementByClass(swalClasses.header);
  };
  var getFooter = function getFooter() {
    return elementByClass(swalClasses.footer);
  };
  var getCloseButton = function getCloseButton() {
    return elementByClass(swalClasses.close);
  }; // https://github.com/jkup/focusable/blob/master/index.js

  var focusable = "\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n";
  var getFocusableElements = function getFocusableElements() {
    var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')) // sort according to tabindex
    .sort(function (a, b) {
      a = parseInt(a.getAttribute('tabindex'));
      b = parseInt(b.getAttribute('tabindex'));

      if (a > b) {
        return 1;
      } else if (a < b) {
        return -1;
      }

      return 0;
    });
    var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {
      return el.getAttribute('tabindex') !== '-1';
    });
    return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {
      return isVisible(el);
    });
  };
  var isModal = function isModal() {
    return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);
  };
  var isToast = function isToast() {
    return document.body.classList.contains(swalClasses['toast-shown']);
  };
  var isLoading = function isLoading() {
    return getPopup().hasAttribute('data-loading');
  };

  // Detect Node env
  var isNodeEnv = function isNodeEnv() {
    return typeof window === 'undefined' || typeof document === 'undefined';
  };

  var sweetHTML = "\n <div aria-labelledby=\"".concat(swalClasses.title, "\" aria-describedby=\"").concat(swalClasses.content, "\" class=\"").concat(swalClasses.popup, "\" tabindex=\"-1\">\n   <div class=\"").concat(swalClasses.header, "\">\n     <ul class=\"").concat(swalClasses['progress-steps'], "\"></ul>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.error, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.question, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.warning, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.info, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.success, "\"></div>\n     <img class=\"").concat(swalClasses.image, "\" />\n     <h2 class=\"").concat(swalClasses.title, "\" id=\"").concat(swalClasses.title, "\"></h2>\n     <button type=\"button\" class=\"").concat(swalClasses.close, "\"></button>\n   </div>\n   <div class=\"").concat(swalClasses.content, "\">\n     <div id=\"").concat(swalClasses.content, "\"></div>\n     <input class=\"").concat(swalClasses.input, "\" />\n     <input type=\"file\" class=\"").concat(swalClasses.file, "\" />\n     <div class=\"").concat(swalClasses.range, "\">\n       <input type=\"range\" />\n       <output></output>\n     </div>\n     <select class=\"").concat(swalClasses.select, "\"></select>\n     <div class=\"").concat(swalClasses.radio, "\"></div>\n     <label for=\"").concat(swalClasses.checkbox, "\" class=\"").concat(swalClasses.checkbox, "\">\n       <input type=\"checkbox\" />\n       <span class=\"").concat(swalClasses.label, "\"></span>\n     </label>\n     <textarea class=\"").concat(swalClasses.textarea, "\"></textarea>\n     <div class=\"").concat(swalClasses['validation-message'], "\" id=\"").concat(swalClasses['validation-message'], "\"></div>\n   </div>\n   <div class=\"").concat(swalClasses.actions, "\">\n     <button type=\"button\" class=\"").concat(swalClasses.confirm, "\">OK</button>\n     <button type=\"button\" class=\"").concat(swalClasses.cancel, "\">Cancel</button>\n   </div>\n   <div class=\"").concat(swalClasses.footer, "\">\n   </div>\n </div>\n").replace(/(^|\n)\s*/g, '');

  var resetOldContainer = function resetOldContainer() {
    var oldContainer = getContainer();

    if (!oldContainer) {
      return;
    }

    oldContainer.parentNode.removeChild(oldContainer);
    removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);
  };

  var oldInputVal; // IE11 workaround, see #1109 for details

  var resetValidationMessage = function resetValidationMessage(e) {
    if (Swal.isVisible() && oldInputVal !== e.target.value) {
      Swal.resetValidationMessage();
    }

    oldInputVal = e.target.value;
  };

  var addInputChangeListeners = function addInputChangeListeners() {
    var content = getContent();
    var input = getChildByClass(content, swalClasses.input);
    var file = getChildByClass(content, swalClasses.file);
    var range = content.querySelector(".".concat(swalClasses.range, " input"));
    var rangeOutput = content.querySelector(".".concat(swalClasses.range, " output"));
    var select = getChildByClass(content, swalClasses.select);
    var checkbox = content.querySelector(".".concat(swalClasses.checkbox, " input"));
    var textarea = getChildByClass(content, swalClasses.textarea);
    input.oninput = resetValidationMessage;
    file.onchange = resetValidationMessage;
    select.onchange = resetValidationMessage;
    checkbox.onchange = resetValidationMessage;
    textarea.oninput = resetValidationMessage;

    range.oninput = function (e) {
      resetValidationMessage(e);
      rangeOutput.value = range.value;
    };

    range.onchange = function (e) {
      resetValidationMessage(e);
      range.nextSibling.value = range.value;
    };
  };

  var getTarget = function getTarget(target) {
    return typeof target === 'string' ? document.querySelector(target) : target;
  };

  var setupAccessibility = function setupAccessibility(params) {
    var popup = getPopup();
    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');

    if (!params.toast) {
      popup.setAttribute('aria-modal', 'true');
    }
  };

  var setupRTL = function setupRTL(targetElement) {
    if (window.getComputedStyle(targetElement).direction === 'rtl') {
      addClass(getContainer(), swalClasses.rtl);
    }
  };
  /*
   * Add modal + backdrop to DOM
   */

  var init = function init(params) {
    // Clean up the old popup container if it exists
    resetOldContainer();
    /* istanbul ignore if */

    if (isNodeEnv()) {
      error('SweetAlert2 requires document to initialize');
      return;
    }

    var container = document.createElement('div');
    container.className = swalClasses.container;
    container.innerHTML = sweetHTML;
    var targetElement = getTarget(params.target);
    targetElement.appendChild(container);
    setupAccessibility(params);
    setupRTL(targetElement);
    addInputChangeListeners();
  };

  var parseHtmlToContainer = function parseHtmlToContainer(param, target) {
    // DOM element
    if (param instanceof HTMLElement) {
      target.appendChild(param); // JQuery element(s)
    } else if (_typeof(param) === 'object') {
      handleJqueryElem(target, param); // Plain string
    } else if (param) {
      target.innerHTML = param;
    }
  };

  var handleJqueryElem = function handleJqueryElem(target, elem) {
    target.innerHTML = '';

    if (0 in elem) {
      for (var i = 0; i in elem; i++) {
        target.appendChild(elem[i].cloneNode(true));
      }
    } else {
      target.appendChild(elem.cloneNode(true));
    }
  };

  var animationEndEvent = function () {
    // Prevent run in Node env

    /* istanbul ignore if */
    if (isNodeEnv()) {
      return false;
    }

    var testEl = document.createElement('div');
    var transEndEventNames = {
      WebkitAnimation: 'webkitAnimationEnd',
      OAnimation: 'oAnimationEnd oanimationend',
      animation: 'animationend'
    };

    for (var i in transEndEventNames) {
      if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {
        return transEndEventNames[i];
      }
    }

    return false;
  }();

  // Measure width of scrollbar
  // https://github.com/twbs/bootstrap/blob/master/js/modal.js#L279-L286
  var measureScrollbar = function measureScrollbar() {
    var supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;

    if (supportsTouch) {
      return 0;
    }

    var scrollDiv = document.createElement('div');
    scrollDiv.style.width = '50px';
    scrollDiv.style.height = '50px';
    scrollDiv.style.overflow = 'scroll';
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  };

  var renderActions = function renderActions(instance, params) {
    var actions = getActions();
    var confirmButton = getConfirmButton();
    var cancelButton = getCancelButton(); // Actions (buttons) wrapper

    if (!params.showConfirmButton && !params.showCancelButton) {
      hide(actions);
    } // Custom class


    applyCustomClass(actions, params.customClass, 'actions'); // Render confirm button

    renderButton(confirmButton, 'confirm', params); // render Cancel Button

    renderButton(cancelButton, 'cancel', params);

    if (params.buttonsStyling) {
      handleButtonsStyling(confirmButton, cancelButton, params);
    } else {
      removeClass([confirmButton, cancelButton], swalClasses.styled);
      confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';
      cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';
    }

    if (params.reverseButtons) {
      confirmButton.parentNode.insertBefore(cancelButton, confirmButton);
    }
  };

  function handleButtonsStyling(confirmButton, cancelButton, params) {
    addClass([confirmButton, cancelButton], swalClasses.styled); // Buttons background colors

    if (params.confirmButtonColor) {
      confirmButton.style.backgroundColor = params.confirmButtonColor;
    }

    if (params.cancelButtonColor) {
      cancelButton.style.backgroundColor = params.cancelButtonColor;
    } // Loading state


    var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');
    confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;
    confirmButton.style.borderRightColor = confirmButtonBackgroundColor;
  }

  function renderButton(button, buttonType, params) {
    toggle(button, params['showC' + buttonType.substring(1) + 'Button'], 'inline-block');
    button.innerHTML = params[buttonType + 'ButtonText']; // Set caption text

    button.setAttribute('aria-label', params[buttonType + 'ButtonAriaLabel']); // ARIA label
    // Add buttons custom classes

    button.className = swalClasses[buttonType];
    applyCustomClass(button, params.customClass, buttonType + 'Button');
    addClass(button, params[buttonType + 'ButtonClass']);
  }

  function handleBackdropParam(container, backdrop) {
    if (typeof backdrop === 'string') {
      container.style.background = backdrop;
    } else if (!backdrop) {
      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);
    }
  }

  function handlePositionParam(container, position) {
    if (position in swalClasses) {
      addClass(container, swalClasses[position]);
    } else {
      warn('The "position" parameter is not valid, defaulting to "center"');
      addClass(container, swalClasses.center);
    }
  }

  function handleGrowParam(container, grow) {
    if (grow && typeof grow === 'string') {
      var growClass = 'grow-' + grow;

      if (growClass in swalClasses) {
        addClass(container, swalClasses[growClass]);
      }
    }
  }

  var renderContainer = function renderContainer(instance, params) {
    var container = getContainer();

    if (!container) {
      return;
    }

    handleBackdropParam(container, params.backdrop);

    if (!params.backdrop && params.allowOutsideClick) {
      warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
    }

    handlePositionParam(container, params.position);
    handleGrowParam(container, params.grow); // Custom class

    applyCustomClass(container, params.customClass, 'container');
  };

  /**
   * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */
  var privateProps = {
    promise: new WeakMap(),
    innerParams: new WeakMap(),
    domCache: new WeakMap()
  };

  var inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];
  var renderInput = function renderInput(instance, params) {
    var content = getContent();
    var innerParams = privateProps.innerParams.get(instance);
    var rerender = !innerParams || params.input !== innerParams.input;
    inputTypes.forEach(function (inputType) {
      var inputClass = swalClasses[inputType];
      var inputContainer = getChildByClass(content, inputClass); // set attributes

      setAttributes(inputType, params.inputAttributes); // set class

      inputContainer.className = inputClass;

      if (rerender) {
        hide(inputContainer);
      }
    });

    if (params.input) {
      if (rerender) {
        showInput(params);
      } // set custom class


      setCustomClass(params);
    }
  };

  var showInput = function showInput(params) {
    if (!renderInputType[params.input]) {
      return error("Unexpected type of input! Expected \"text\", \"email\", \"password\", \"number\", \"tel\", \"select\", \"radio\", \"checkbox\", \"textarea\", \"file\" or \"url\", got \"".concat(params.input, "\""));
    }

    var inputContainer = getInputContainer(params.input);
    var input = renderInputType[params.input](inputContainer, params);
    show(input); // input autofocus

    setTimeout(function () {
      focusInput(input);
    });
  };

  var removeAttributes = function removeAttributes(input) {
    for (var i = 0; i < input.attributes.length; i++) {
      var attrName = input.attributes[i].name;

      if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {
        input.removeAttribute(attrName);
      }
    }
  };

  var setAttributes = function setAttributes(inputType, inputAttributes) {
    var input = getInput(getContent(), inputType);

    if (!input) {
      return;
    }

    removeAttributes(input);

    for (var attr in inputAttributes) {
      // Do not set a placeholder for <input type="range">
      // it'll crash Edge, #1298
      if (inputType === 'range' && attr === 'placeholder') {
        continue;
      }

      input.setAttribute(attr, inputAttributes[attr]);
    }
  };

  var setCustomClass = function setCustomClass(params) {
    var inputContainer = getInputContainer(params.input);

    if (params.customClass) {
      addClass(inputContainer, params.customClass.input);
    }
  };

  var setInputPlaceholder = function setInputPlaceholder(input, params) {
    if (!input.placeholder || params.inputPlaceholder) {
      input.placeholder = params.inputPlaceholder;
    }
  };

  var getInputContainer = function getInputContainer(inputType) {
    var inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;
    return getChildByClass(getContent(), inputClass);
  };

  var renderInputType = {};

  renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (input, params) {
    if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {
      input.value = params.inputValue;
    } else if (!isPromise(params.inputValue)) {
      warn("Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"".concat(_typeof(params.inputValue), "\""));
    }

    setInputPlaceholder(input, params);
    input.type = params.input;
    return input;
  };

  renderInputType.file = function (input, params) {
    setInputPlaceholder(input, params);
    return input;
  };

  renderInputType.range = function (range, params) {
    var rangeInput = range.querySelector('input');
    var rangeOutput = range.querySelector('output');
    rangeInput.value = params.inputValue;
    rangeInput.type = params.input;
    rangeOutput.value = params.inputValue;
    return range;
  };

  renderInputType.select = function (select, params) {
    select.innerHTML = '';

    if (params.inputPlaceholder) {
      var placeholder = document.createElement('option');
      placeholder.innerHTML = params.inputPlaceholder;
      placeholder.value = '';
      placeholder.disabled = true;
      placeholder.selected = true;
      select.appendChild(placeholder);
    }

    return select;
  };

  renderInputType.radio = function (radio) {
    radio.innerHTML = '';
    return radio;
  };

  renderInputType.checkbox = function (checkboxContainer, params) {
    var checkbox = getInput(getContent(), 'checkbox');
    checkbox.value = 1;
    checkbox.id = swalClasses.checkbox;
    checkbox.checked = Boolean(params.inputValue);
    var label = checkboxContainer.querySelector('span');
    label.innerHTML = params.inputPlaceholder;
    return checkboxContainer;
  };

  renderInputType.textarea = function (textarea, params) {
    textarea.value = params.inputValue;
    setInputPlaceholder(textarea, params);

    if ('MutationObserver' in window) {
      // #1699
      var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
      var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);

      var outputsize = function outputsize() {
        var contentWidth = textarea.offsetWidth + popupPadding;

        if (contentWidth > initialPopupWidth) {
          getPopup().style.width = contentWidth + 'px';
        } else {
          getPopup().style.width = null;
        }
      };

      new MutationObserver(outputsize).observe(textarea, {
        attributes: true,
        attributeFilter: ['style']
      });
    }

    return textarea;
  };

  var renderContent = function renderContent(instance, params) {
    var content = getContent().querySelector('#' + swalClasses.content); // Content as HTML

    if (params.html) {
      parseHtmlToContainer(params.html, content);
      show(content, 'block'); // Content as plain text
    } else if (params.text) {
      content.textContent = params.text;
      show(content, 'block'); // No content
    } else {
      hide(content);
    }

    renderInput(instance, params); // Custom class

    applyCustomClass(getContent(), params.customClass, 'content');
  };

  var renderFooter = function renderFooter(instance, params) {
    var footer = getFooter();
    toggle(footer, params.footer);

    if (params.footer) {
      parseHtmlToContainer(params.footer, footer);
    } // Custom class


    applyCustomClass(footer, params.customClass, 'footer');
  };

  var renderCloseButton = function renderCloseButton(instance, params) {
    var closeButton = getCloseButton();
    closeButton.innerHTML = params.closeButtonHtml; // Custom class

    applyCustomClass(closeButton, params.customClass, 'closeButton');
    toggle(closeButton, params.showCloseButton);
    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
  };

  var renderIcon = function renderIcon(instance, params) {
    var innerParams = privateProps.innerParams.get(instance); // if the give icon already rendered, apply the custom class without re-rendering the icon

    if (innerParams && params.icon === innerParams.icon && getIcon()) {
      applyCustomClass(getIcon(), params.customClass, 'icon');
      return;
    }

    hideAllIcons();

    if (!params.icon) {
      return;
    }

    if (Object.keys(iconTypes).indexOf(params.icon) !== -1) {
      var icon = elementBySelector(".".concat(swalClasses.icon, ".").concat(iconTypes[params.icon]));
      show(icon); // Custom or default content

      setContent(icon, params);
      adjustSuccessIconBackgoundColor(); // Custom class

      applyCustomClass(icon, params.customClass, 'icon'); // Animate icon

      addClass(icon, params.showClass.icon);
    } else {
      error("Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"".concat(params.icon, "\""));
    }
  };

  var hideAllIcons = function hideAllIcons() {
    var icons = getIcons();

    for (var i = 0; i < icons.length; i++) {
      hide(icons[i]);
    }
  }; // Adjust success icon background color to match the popup background color


  var adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {
    var popup = getPopup();
    var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');
    var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');

    for (var i = 0; i < successIconParts.length; i++) {
      successIconParts[i].style.backgroundColor = popupBackgroundColor;
    }
  };

  var setContent = function setContent(icon, params) {
    icon.innerHTML = '';

    if (params.iconHtml) {
      icon.innerHTML = iconContent(params.iconHtml);
    } else if (params.icon === 'success') {
      icon.innerHTML = "\n      <div class=\"swal2-success-circular-line-left\"></div>\n      <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n      <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n      <div class=\"swal2-success-circular-line-right\"></div>\n    ";
    } else if (params.icon === 'error') {
      icon.innerHTML = "\n      <span class=\"swal2-x-mark\">\n        <span class=\"swal2-x-mark-line-left\"></span>\n        <span class=\"swal2-x-mark-line-right\"></span>\n      </span>\n    ";
    } else {
      var defaultIconHtml = {
        question: '?',
        warning: '!',
        info: 'i'
      };
      icon.innerHTML = iconContent(defaultIconHtml[params.icon]);
    }
  };

  var iconContent = function iconContent(content) {
    return "<div class=\"".concat(swalClasses['icon-content'], "\">").concat(content, "</div>");
  };

  var renderImage = function renderImage(instance, params) {
    var image = getImage();

    if (!params.imageUrl) {
      return hide(image);
    }

    show(image); // Src, alt

    image.setAttribute('src', params.imageUrl);
    image.setAttribute('alt', params.imageAlt); // Width, height

    applyNumericalStyle(image, 'width', params.imageWidth);
    applyNumericalStyle(image, 'height', params.imageHeight); // Class

    image.className = swalClasses.image;
    applyCustomClass(image, params.customClass, 'image');
  };

  var createStepElement = function createStepElement(step) {
    var stepEl = document.createElement('li');
    addClass(stepEl, swalClasses['progress-step']);
    stepEl.innerHTML = step;
    return stepEl;
  };

  var createLineElement = function createLineElement(params) {
    var lineEl = document.createElement('li');
    addClass(lineEl, swalClasses['progress-step-line']);

    if (params.progressStepsDistance) {
      lineEl.style.width = params.progressStepsDistance;
    }

    return lineEl;
  };

  var renderProgressSteps = function renderProgressSteps(instance, params) {
    var progressStepsContainer = getProgressSteps();

    if (!params.progressSteps || params.progressSteps.length === 0) {
      return hide(progressStepsContainer);
    }

    show(progressStepsContainer);
    progressStepsContainer.innerHTML = '';
    var currentProgressStep = parseInt(params.currentProgressStep === null ? Swal.getQueueStep() : params.currentProgressStep);

    if (currentProgressStep >= params.progressSteps.length) {
      warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');
    }

    params.progressSteps.forEach(function (step, index) {
      var stepEl = createStepElement(step);
      progressStepsContainer.appendChild(stepEl);

      if (index === currentProgressStep) {
        addClass(stepEl, swalClasses['active-progress-step']);
      }

      if (index !== params.progressSteps.length - 1) {
        var lineEl = createLineElement(step);
        progressStepsContainer.appendChild(lineEl);
      }
    });
  };

  var renderTitle = function renderTitle(instance, params) {
    var title = getTitle();
    toggle(title, params.title || params.titleText);

    if (params.title) {
      parseHtmlToContainer(params.title, title);
    }

    if (params.titleText) {
      title.innerText = params.titleText;
    } // Custom class


    applyCustomClass(title, params.customClass, 'title');
  };

  var renderHeader = function renderHeader(instance, params) {
    var header = getHeader(); // Custom class

    applyCustomClass(header, params.customClass, 'header'); // Progress steps

    renderProgressSteps(instance, params); // Icon

    renderIcon(instance, params); // Image

    renderImage(instance, params); // Title

    renderTitle(instance, params); // Close button

    renderCloseButton(instance, params);
  };

  var renderPopup = function renderPopup(instance, params) {
    var popup = getPopup(); // Width

    applyNumericalStyle(popup, 'width', params.width); // Padding

    applyNumericalStyle(popup, 'padding', params.padding); // Background

    if (params.background) {
      popup.style.background = params.background;
    } // Default Class


    popup.className = swalClasses.popup;

    if (params.toast) {
      addClass([document.documentElement, document.body], swalClasses['toast-shown']);
      addClass(popup, swalClasses.toast);
    } else {
      addClass(popup, swalClasses.modal);
    } // Custom class


    applyCustomClass(popup, params.customClass, 'popup');

    if (typeof params.customClass === 'string') {
      addClass(popup, params.customClass);
    }
  };

  var render = function render(instance, params) {
    renderPopup(instance, params);
    renderContainer(instance, params);
    renderHeader(instance, params);
    renderContent(instance, params);
    renderActions(instance, params);
    renderFooter(instance, params);

    if (typeof params.onRender === 'function') {
      params.onRender(getPopup());
    }
  };

  /*
   * Global function to determine if SweetAlert2 popup is shown
   */

  var isVisible$1 = function isVisible$$1() {
    return isVisible(getPopup());
  };
  /*
   * Global function to click 'Confirm' button
   */

  var clickConfirm = function clickConfirm() {
    return getConfirmButton() && getConfirmButton().click();
  };
  /*
   * Global function to click 'Cancel' button
   */

  var clickCancel = function clickCancel() {
    return getCancelButton() && getCancelButton().click();
  };

  function fire() {
    var Swal = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _construct(Swal, args);
  }

  /**
   * Returns an extended version of `Swal` containing `params` as defaults.
   * Useful for reusing Swal configuration.
   *
   * For example:
   *
   * Before:
   * const textPromptOptions = { input: 'text', showCancelButton: true }
   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
   *
   * After:
   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
   * const {value: firstName} = await TextPrompt('What is your first name?')
   * const {value: lastName} = await TextPrompt('What is your last name?')
   *
   * @param mixinParams
   */
  function mixin(mixinParams) {
    var MixinSwal =
    /*#__PURE__*/
    function (_this) {
      _inherits(MixinSwal, _this);

      function MixinSwal() {
        _classCallCheck(this, MixinSwal);

        return _possibleConstructorReturn(this, _getPrototypeOf(MixinSwal).apply(this, arguments));
      }

      _createClass(MixinSwal, [{
        key: "_main",
        value: function _main(params) {
          return _get(_getPrototypeOf(MixinSwal.prototype), "_main", this).call(this, _extends({}, mixinParams, params));
        }
      }]);

      return MixinSwal;
    }(this);

    return MixinSwal;
  }

  // private global state for the queue feature
  var currentSteps = [];
  /*
   * Global function for chaining sweetAlert popups
   */

  var queue = function queue(steps) {
    var Swal = this;
    currentSteps = steps;

    var resetAndResolve = function resetAndResolve(resolve, value) {
      currentSteps = [];
      document.body.removeAttribute('data-swal2-queue-step');
      resolve(value);
    };

    var queueResult = [];
    return new Promise(function (resolve) {
      (function step(i, callback) {
        if (i < currentSteps.length) {
          document.body.setAttribute('data-swal2-queue-step', i);
          Swal.fire(currentSteps[i]).then(function (result) {
            if (typeof result.value !== 'undefined') {
              queueResult.push(result.value);
              step(i + 1, callback);
            } else {
              resetAndResolve(resolve, {
                dismiss: result.dismiss
              });
            }
          });
        } else {
          resetAndResolve(resolve, {
            value: queueResult
          });
        }
      })(0);
    });
  };
  /*
   * Global function for getting the index of current popup in queue
   */

  var getQueueStep = function getQueueStep() {
    return document.body.getAttribute('data-swal2-queue-step');
  };
  /*
   * Global function for inserting a popup to the queue
   */

  var insertQueueStep = function insertQueueStep(step, index) {
    if (index && index < currentSteps.length) {
      return currentSteps.splice(index, 0, step);
    }

    return currentSteps.push(step);
  };
  /*
   * Global function for deleting a popup from the queue
   */

  var deleteQueueStep = function deleteQueueStep(index) {
    if (typeof currentSteps[index] !== 'undefined') {
      currentSteps.splice(index, 1);
    }
  };

  /**
   * Show spinner instead of Confirm button
   */

  var showLoading = function showLoading() {
    var popup = getPopup();

    if (!popup) {
      Swal.fire('');
    }

    popup = getPopup();
    var actions = getActions();
    var confirmButton = getConfirmButton();
    show(actions);
    show(confirmButton);
    addClass([popup, actions], swalClasses.loading);
    confirmButton.disabled = true;
    popup.setAttribute('data-loading', true);
    popup.setAttribute('aria-busy', true);
    popup.focus();
  };

  var RESTORE_FOCUS_TIMEOUT = 100;

  var globalState = {};
  var focusPreviousActiveElement = function focusPreviousActiveElement() {
    if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {
      globalState.previousActiveElement.focus();
      globalState.previousActiveElement = null;
    } else if (document.body) {
      document.body.focus();
    }
  }; // Restore previous active (focused) element


  var restoreActiveElement = function restoreActiveElement() {
    return new Promise(function (resolve) {
      var x = window.scrollX;
      var y = window.scrollY;
      globalState.restoreFocusTimeout = setTimeout(function () {
        focusPreviousActiveElement();
        resolve();
      }, RESTORE_FOCUS_TIMEOUT); // issues/900

      if (typeof x !== 'undefined' && typeof y !== 'undefined') {
        // IE doesn't have scrollX/scrollY support
        window.scrollTo(x, y);
      }
    });
  };

  /**
   * If `timer` parameter is set, returns number of milliseconds of timer remained.
   * Otherwise, returns undefined.
   */

  var getTimerLeft = function getTimerLeft() {
    return globalState.timeout && globalState.timeout.getTimerLeft();
  };
  /**
   * Stop timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  var stopTimer = function stopTimer() {
    return globalState.timeout && globalState.timeout.stop();
  };
  /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  var resumeTimer = function resumeTimer() {
    return globalState.timeout && globalState.timeout.start();
  };
  /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  var toggleTimer = function toggleTimer() {
    var timer = globalState.timeout;
    return timer && (timer.running ? timer.stop() : timer.start());
  };
  /**
   * Increase timer. Returns number of milliseconds of an updated timer.
   * If `timer` parameter isn't set, returns undefined.
   */

  var increaseTimer = function increaseTimer(n) {
    return globalState.timeout && globalState.timeout.increase(n);
  };
  /**
   * Check if timer is running. Returns true if timer is running
   * or false if timer is paused or stopped.
   * If `timer` parameter isn't set, returns undefined
   */

  var isTimerRunning = function isTimerRunning() {
    return globalState.timeout && globalState.timeout.isRunning();
  };

  var defaultParams = {
    title: '',
    titleText: '',
    text: '',
    html: '',
    footer: '',
    icon: null,
    iconHtml: null,
    toast: false,
    animation: true,
    showClass: {
      popup: 'swal2-show',
      backdrop: 'swal2-backdrop-show',
      icon: 'swal2-icon-show'
    },
    hideClass: {
      popup: 'swal2-hide',
      backdrop: 'swal2-backdrop-hide',
      icon: 'swal2-icon-hide'
    },
    customClass: '',
    target: 'body',
    backdrop: true,
    heightAuto: true,
    allowOutsideClick: true,
    allowEscapeKey: true,
    allowEnterKey: true,
    stopKeydownPropagation: true,
    keydownListenerCapture: false,
    showConfirmButton: true,
    showCancelButton: false,
    preConfirm: null,
    confirmButtonText: 'OK',
    confirmButtonAriaLabel: '',
    confirmButtonColor: null,
    cancelButtonText: 'Cancel',
    cancelButtonAriaLabel: '',
    cancelButtonColor: null,
    buttonsStyling: true,
    reverseButtons: false,
    focusConfirm: true,
    focusCancel: false,
    showCloseButton: false,
    closeButtonHtml: '&times;',
    closeButtonAriaLabel: 'Close this dialog',
    showLoaderOnConfirm: false,
    imageUrl: null,
    imageWidth: null,
    imageHeight: null,
    imageAlt: '',
    timer: null,
    width: null,
    padding: null,
    background: null,
    input: null,
    inputPlaceholder: '',
    inputValue: '',
    inputOptions: {},
    inputAutoTrim: true,
    inputAttributes: {},
    inputValidator: null,
    validationMessage: null,
    grow: false,
    position: 'center',
    progressSteps: [],
    currentProgressStep: null,
    progressStepsDistance: null,
    onBeforeOpen: null,
    onOpen: null,
    onRender: null,
    onClose: null,
    onAfterClose: null,
    scrollbarPadding: true
  };
  var updatableParams = ['title', 'titleText', 'text', 'html', 'type', 'customClass', 'showConfirmButton', 'showCancelButton', 'confirmButtonText', 'confirmButtonAriaLabel', 'confirmButtonColor', 'cancelButtonText', 'cancelButtonAriaLabel', 'cancelButtonColor', 'buttonsStyling', 'reverseButtons', 'imageUrl', 'imageWidth', 'imageHeigth', 'imageAlt', 'progressSteps', 'currentProgressStep'];
  var deprecatedParams = {
    animation: 'showClass" and "hideClass'
  };
  var toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];
  /**
   * Is valid parameter
   * @param {String} paramName
   */

  var isValidParameter = function isValidParameter(paramName) {
    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
  };
  /**
   * Is valid parameter for Swal.update() method
   * @param {String} paramName
   */

  var isUpdatableParameter = function isUpdatableParameter(paramName) {
    return updatableParams.indexOf(paramName) !== -1;
  };
  /**
   * Is deprecated parameter
   * @param {String} paramName
   */

  var isDeprecatedParameter = function isDeprecatedParameter(paramName) {
    return deprecatedParams[paramName];
  };

  var checkIfParamIsValid = function checkIfParamIsValid(param) {
    if (!isValidParameter(param)) {
      warn("Unknown parameter \"".concat(param, "\""));
    }
  };

  var checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {
    if (toastIncompatibleParams.indexOf(param) !== -1) {
      warn("The parameter \"".concat(param, "\" is incompatible with toasts"));
    }
  };

  var checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {
    if (isDeprecatedParameter(param)) {
      warnAboutDepreation(param, isDeprecatedParameter(param));
    }
  };
  /**
   * Show relevant warnings for given params
   *
   * @param params
   */

  var showWarningsForParams = function showWarningsForParams(params) {
    for (var param in params) {
      checkIfParamIsValid(param);

      if (params.toast) {
        checkIfToastParamIsValid(param);
      }

      checkIfParamIsDeprecated(param);
    }
  };

  var staticMethods = Object.freeze({
    isValidParameter: isValidParameter,
    isUpdatableParameter: isUpdatableParameter,
    isDeprecatedParameter: isDeprecatedParameter,
    argsToParams: argsToParams,
    isVisible: isVisible$1,
    clickConfirm: clickConfirm,
    clickCancel: clickCancel,
    getContainer: getContainer,
    getPopup: getPopup,
    getTitle: getTitle,
    getContent: getContent,
    getImage: getImage,
    getIcon: getIcon,
    getIcons: getIcons,
    getCloseButton: getCloseButton,
    getActions: getActions,
    getConfirmButton: getConfirmButton,
    getCancelButton: getCancelButton,
    getHeader: getHeader,
    getFooter: getFooter,
    getFocusableElements: getFocusableElements,
    getValidationMessage: getValidationMessage,
    isLoading: isLoading,
    fire: fire,
    mixin: mixin,
    queue: queue,
    getQueueStep: getQueueStep,
    insertQueueStep: insertQueueStep,
    deleteQueueStep: deleteQueueStep,
    showLoading: showLoading,
    enableLoading: showLoading,
    getTimerLeft: getTimerLeft,
    stopTimer: stopTimer,
    resumeTimer: resumeTimer,
    toggleTimer: toggleTimer,
    increaseTimer: increaseTimer,
    isTimerRunning: isTimerRunning
  });

  /**
   * Enables buttons and hide loader.
   */

  function hideLoading() {
    var innerParams = privateProps.innerParams.get(this);
    var domCache = privateProps.domCache.get(this);

    if (!innerParams.showConfirmButton) {
      hide(domCache.confirmButton);

      if (!innerParams.showCancelButton) {
        hide(domCache.actions);
      }
    }

    removeClass([domCache.popup, domCache.actions], swalClasses.loading);
    domCache.popup.removeAttribute('aria-busy');
    domCache.popup.removeAttribute('data-loading');
    domCache.confirmButton.disabled = false;
    domCache.cancelButton.disabled = false;
  }

  function getInput$1(instance) {
    var innerParams = privateProps.innerParams.get(instance || this);
    var domCache = privateProps.domCache.get(instance || this);

    if (!domCache) {
      return null;
    }

    return getInput(domCache.content, innerParams.input);
  }

  var fixScrollbar = function fixScrollbar() {
    // for queues, do not do this more than once
    if (states.previousBodyPadding !== null) {
      return;
    } // if the body has overflow


    if (document.body.scrollHeight > window.innerHeight) {
      // add padding so the content doesn't shift after removal of scrollbar
      states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));
      document.body.style.paddingRight = states.previousBodyPadding + measureScrollbar() + 'px';
    }
  };
  var undoScrollbar = function undoScrollbar() {
    if (states.previousBodyPadding !== null) {
      document.body.style.paddingRight = states.previousBodyPadding + 'px';
      states.previousBodyPadding = null;
    }
  };

  /* istanbul ignore next */

  var iOSfix = function iOSfix() {
    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;

    if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
      var offset = document.body.scrollTop;
      document.body.style.top = offset * -1 + 'px';
      addClass(document.body, swalClasses.iosfix);
      lockBodyScroll();
    }
  };

  var lockBodyScroll = function lockBodyScroll() {
    // #1246
    var container = getContainer();
    var preventTouchMove;

    container.ontouchstart = function (e) {
      preventTouchMove = e.target === container || !isScrollable(container) && e.target.tagName !== 'INPUT' // #1603
      ;
    };

    container.ontouchmove = function (e) {
      if (preventTouchMove) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
  };
  /* istanbul ignore next */

  var undoIOSfix = function undoIOSfix() {
    if (hasClass(document.body, swalClasses.iosfix)) {
      var offset = parseInt(document.body.style.top, 10);
      removeClass(document.body, swalClasses.iosfix);
      document.body.style.top = '';
      document.body.scrollTop = offset * -1;
    }
  };

  var isIE11 = function isIE11() {
    return !!window.MSInputMethodContext && !!document.documentMode;
  }; // Fix IE11 centering sweetalert2/issues/933

  /* istanbul ignore next */

  var fixVerticalPositionIE = function fixVerticalPositionIE() {
    var container = getContainer();
    var popup = getPopup();
    container.style.removeProperty('align-items');

    if (popup.offsetTop < 0) {
      container.style.alignItems = 'flex-start';
    }
  };
  /* istanbul ignore next */

  var IEfix = function IEfix() {
    if (typeof window !== 'undefined' && isIE11()) {
      fixVerticalPositionIE();
      window.addEventListener('resize', fixVerticalPositionIE);
    }
  };
  /* istanbul ignore next */

  var undoIEfix = function undoIEfix() {
    if (typeof window !== 'undefined' && isIE11()) {
      window.removeEventListener('resize', fixVerticalPositionIE);
    }
  };

  // Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
  // elements not within the active modal dialog will not be surfaced if a user opens a screen
  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.

  var setAriaHidden = function setAriaHidden() {
    var bodyChildren = toArray(document.body.children);
    bodyChildren.forEach(function (el) {
      if (el === getContainer() || contains(el, getContainer())) {
        return;
      }

      if (el.hasAttribute('aria-hidden')) {
        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
      }

      el.setAttribute('aria-hidden', 'true');
    });
  };
  var unsetAriaHidden = function unsetAriaHidden() {
    var bodyChildren = toArray(document.body.children);
    bodyChildren.forEach(function (el) {
      if (el.hasAttribute('data-previous-aria-hidden')) {
        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
        el.removeAttribute('data-previous-aria-hidden');
      } else {
        el.removeAttribute('aria-hidden');
      }
    });
  };

  /**
   * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */
  var privateMethods = {
    swalPromiseResolve: new WeakMap()
  };

  /*
   * Instance method to close sweetAlert
   */

  function removePopupAndResetState(instance, container, isToast, onAfterClose) {
    if (isToast) {
      triggerOnAfterCloseAndDispose(instance, onAfterClose);
    } else {
      restoreActiveElement().then(function () {
        return triggerOnAfterCloseAndDispose(instance, onAfterClose);
      });
      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture
      });
      globalState.keydownHandlerAdded = false;
    }

    if (container.parentNode) {
      container.parentNode.removeChild(container);
    }

    if (isModal()) {
      undoScrollbar();
      undoIOSfix();
      undoIEfix();
      unsetAriaHidden();
    }

    removeBodyClasses();
  }

  function removeBodyClasses() {
    removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);
  }

  function disposeSwal(instance) {
    // Unset this.params so GC will dispose it (#1569)
    delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)

    delete globalState.keydownHandler;
    delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)

    unsetWeakMaps(privateProps);
    unsetWeakMaps(privateMethods);
  }

  function close(resolveValue) {
    var popup = getPopup();

    if (!popup) {
      return;
    }

    var innerParams = privateProps.innerParams.get(this);

    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
      return;
    }

    var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
    removeClass(popup, innerParams.showClass.popup);
    addClass(popup, innerParams.hideClass.popup);
    var backdrop = getContainer();
    removeClass(backdrop, innerParams.showClass.backdrop);
    addClass(backdrop, innerParams.hideClass.backdrop);
    handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise

    swalPromiseResolve(resolveValue || {});
  }

  var handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {
    var container = getContainer(); // If animation is supported, animate

    var animationIsSupported = animationEndEvent && hasCssAnimation(popup);
    var onClose = innerParams.onClose,
        onAfterClose = innerParams.onAfterClose;

    if (onClose !== null && typeof onClose === 'function') {
      onClose(popup);
    }

    if (animationIsSupported) {
      animatePopup(instance, popup, container, onAfterClose);
    } else {
      // Otherwise, remove immediately
      removePopupAndResetState(instance, container, isToast(), onAfterClose);
    }
  };

  var animatePopup = function animatePopup(instance, popup, container, onAfterClose) {
    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), onAfterClose);
    popup.addEventListener(animationEndEvent, function (e) {
      if (e.target === popup) {
        globalState.swalCloseEventFinishedCallback();
        delete globalState.swalCloseEventFinishedCallback;
      }
    });
  };

  var unsetWeakMaps = function unsetWeakMaps(obj) {
    for (var i in obj) {
      obj[i] = new WeakMap();
    }
  };

  var triggerOnAfterCloseAndDispose = function triggerOnAfterCloseAndDispose(instance, onAfterClose) {
    setTimeout(function () {
      if (onAfterClose !== null && typeof onAfterClose === 'function') {
        onAfterClose();
      }

      if (!getPopup()) {
        disposeSwal(instance);
      }
    });
  };

  function setButtonsDisabled(instance, buttons, disabled) {
    var domCache = privateProps.domCache.get(instance);
    buttons.forEach(function (button) {
      domCache[button].disabled = disabled;
    });
  }

  function setInputDisabled(input, disabled) {
    if (!input) {
      return false;
    }

    if (input.type === 'radio') {
      var radiosContainer = input.parentNode.parentNode;
      var radios = radiosContainer.querySelectorAll('input');

      for (var i = 0; i < radios.length; i++) {
        radios[i].disabled = disabled;
      }
    } else {
      input.disabled = disabled;
    }
  }

  function enableButtons() {
    setButtonsDisabled(this, ['confirmButton', 'cancelButton'], false);
  }
  function disableButtons() {
    setButtonsDisabled(this, ['confirmButton', 'cancelButton'], true);
  }
  function enableInput() {
    return setInputDisabled(this.getInput(), false);
  }
  function disableInput() {
    return setInputDisabled(this.getInput(), true);
  }

  function showValidationMessage(error) {
    var domCache = privateProps.domCache.get(this);
    domCache.validationMessage.innerHTML = error;
    var popupComputedStyle = window.getComputedStyle(domCache.popup);
    domCache.validationMessage.style.marginLeft = "-".concat(popupComputedStyle.getPropertyValue('padding-left'));
    domCache.validationMessage.style.marginRight = "-".concat(popupComputedStyle.getPropertyValue('padding-right'));
    show(domCache.validationMessage);
    var input = this.getInput();

    if (input) {
      input.setAttribute('aria-invalid', true);
      input.setAttribute('aria-describedBy', swalClasses['validation-message']);
      focusInput(input);
      addClass(input, swalClasses.inputerror);
    }
  } // Hide block with validation message

  function resetValidationMessage$1() {
    var domCache = privateProps.domCache.get(this);

    if (domCache.validationMessage) {
      hide(domCache.validationMessage);
    }

    var input = this.getInput();

    if (input) {
      input.removeAttribute('aria-invalid');
      input.removeAttribute('aria-describedBy');
      removeClass(input, swalClasses.inputerror);
    }
  }

  function getProgressSteps$1() {
    var domCache = privateProps.domCache.get(this);
    return domCache.progressSteps;
  }

  var Timer =
  /*#__PURE__*/
  function () {
    function Timer(callback, delay) {
      _classCallCheck(this, Timer);

      this.callback = callback;
      this.remaining = delay;
      this.running = false;
      this.start();
    }

    _createClass(Timer, [{
      key: "start",
      value: function start() {
        if (!this.running) {
          this.running = true;
          this.started = new Date();
          this.id = setTimeout(this.callback, this.remaining);
        }

        return this.remaining;
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this.running) {
          this.running = false;
          clearTimeout(this.id);
          this.remaining -= new Date() - this.started;
        }

        return this.remaining;
      }
    }, {
      key: "increase",
      value: function increase(n) {
        var running = this.running;

        if (running) {
          this.stop();
        }

        this.remaining += n;

        if (running) {
          this.start();
        }

        return this.remaining;
      }
    }, {
      key: "getTimerLeft",
      value: function getTimerLeft() {
        if (this.running) {
          this.stop();
          this.start();
        }

        return this.remaining;
      }
    }, {
      key: "isRunning",
      value: function isRunning() {
        return this.running;
      }
    }]);

    return Timer;
  }();

  var defaultInputValidators = {
    email: function email(string, validationMessage) {
      return (/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address')
      );
    },
    url: function url(string, validationMessage) {
      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306
      return (/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL')
      );
    }
  };

  function setDefaultInputValidators(params) {
    // Use default `inputValidator` for supported input types if not provided
    if (!params.inputValidator) {
      Object.keys(defaultInputValidators).forEach(function (key) {
        if (params.input === key) {
          params.inputValidator = defaultInputValidators[key];
        }
      });
    }
  }

  function validateCustomTargetElement(params) {
    // Determine if the custom target element is valid
    if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {
      warn('Target parameter is not valid, defaulting to "body"');
      params.target = 'body';
    }
  }
  /**
   * Set type, text and actions on popup
   *
   * @param params
   * @returns {boolean}
   */

  function setParameters(params) {
    setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm

    if (params.showLoaderOnConfirm && !params.preConfirm) {
      warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\n' + 'https://sweetalert2.github.io/#ajax-request');
    } // params.animation will be actually used in renderPopup.js
    // but in case when params.animation is a function, we need to call that function
    // before popup (re)initialization, so it'll be possible to check Swal.isVisible()
    // inside the params.animation function


    params.animation = callIfFunction(params.animation);
    validateCustomTargetElement(params); // Replace newlines with <br> in title

    if (typeof params.title === 'string') {
      params.title = params.title.split('\n').join('<br />');
    }

    init(params);
  }

  function swalOpenAnimationFinished(popup, container) {
    popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
    container.style.overflowY = 'auto';
  }
  /**
   * Open popup, add necessary classes and styles, fix scrollbar
   *
   * @param {Array} params
   */

  var openPopup = function openPopup(params) {
    var container = getContainer();
    var popup = getPopup();

    if (typeof params.onBeforeOpen === 'function') {
      params.onBeforeOpen(popup);
    }

    addClasses(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'

    setScrollingVisibility(container, popup);

    if (isModal()) {
      fixScrollContainer(container, params.scrollbarPadding);
    }

    if (!isToast() && !globalState.previousActiveElement) {
      globalState.previousActiveElement = document.activeElement;
    }

    if (typeof params.onOpen === 'function') {
      setTimeout(function () {
        return params.onOpen(popup);
      });
    }
  };

  var setScrollingVisibility = function setScrollingVisibility(container, popup) {
    if (animationEndEvent && hasCssAnimation(popup)) {
      container.style.overflowY = 'hidden';
      popup.addEventListener(animationEndEvent, swalOpenAnimationFinished.bind(null, popup, container));
    } else {
      container.style.overflowY = 'auto';
    }
  };

  var fixScrollContainer = function fixScrollContainer(container, scrollbarPadding) {
    iOSfix();
    IEfix();
    setAriaHidden();

    if (scrollbarPadding) {
      fixScrollbar();
    } // sweetalert2/issues/1247


    setTimeout(function () {
      container.scrollTop = 0;
    });
  };

  var addClasses = function addClasses(container, popup, params) {
    addClass(popup, params.showClass.popup);
    addClass(container, params.showClass.backdrop);
    show(popup);
    addClass([document.documentElement, document.body], swalClasses.shown);

    if (params.heightAuto && params.backdrop && !params.toast) {
      addClass([document.documentElement, document.body], swalClasses['height-auto']);
    }
  };

  var handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {
    if (params.input === 'select' || params.input === 'radio') {
      handleInputOptions(instance, params);
    } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && isPromise(params.inputValue)) {
      handleInputValue(instance, params);
    }
  };
  var getInputValue = function getInputValue(instance, innerParams) {
    var input = instance.getInput();

    if (!input) {
      return null;
    }

    switch (innerParams.input) {
      case 'checkbox':
        return getCheckboxValue(input);

      case 'radio':
        return getRadioValue(input);

      case 'file':
        return getFileValue(input);

      default:
        return innerParams.inputAutoTrim ? input.value.trim() : input.value;
    }
  };

  var getCheckboxValue = function getCheckboxValue(input) {
    return input.checked ? 1 : 0;
  };

  var getRadioValue = function getRadioValue(input) {
    return input.checked ? input.value : null;
  };

  var getFileValue = function getFileValue(input) {
    return input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;
  };

  var handleInputOptions = function handleInputOptions(instance, params) {
    var content = getContent();

    var processInputOptions = function processInputOptions(inputOptions) {
      return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);
    };

    if (isPromise(params.inputOptions)) {
      showLoading();
      params.inputOptions.then(function (inputOptions) {
        instance.hideLoading();
        processInputOptions(inputOptions);
      });
    } else if (_typeof(params.inputOptions) === 'object') {
      processInputOptions(params.inputOptions);
    } else {
      error("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(_typeof(params.inputOptions)));
    }
  };

  var handleInputValue = function handleInputValue(instance, params) {
    var input = instance.getInput();
    hide(input);
    params.inputValue.then(function (inputValue) {
      input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : inputValue + '';
      show(input);
      input.focus();
      instance.hideLoading();
    })["catch"](function (err) {
      error('Error in inputValue promise: ' + err);
      input.value = '';
      show(input);
      input.focus();
      instance.hideLoading();
    });
  };

  var populateInputOptions = {
    select: function select(content, inputOptions, params) {
      var select = getChildByClass(content, swalClasses.select);
      inputOptions.forEach(function (inputOption) {
        var optionValue = inputOption[0];
        var optionLabel = inputOption[1];
        var option = document.createElement('option');
        option.value = optionValue;
        option.innerHTML = optionLabel;

        if (params.inputValue.toString() === optionValue.toString()) {
          option.selected = true;
        }

        select.appendChild(option);
      });
      select.focus();
    },
    radio: function radio(content, inputOptions, params) {
      var radio = getChildByClass(content, swalClasses.radio);
      inputOptions.forEach(function (inputOption) {
        var radioValue = inputOption[0];
        var radioLabel = inputOption[1];
        var radioInput = document.createElement('input');
        var radioLabelElement = document.createElement('label');
        radioInput.type = 'radio';
        radioInput.name = swalClasses.radio;
        radioInput.value = radioValue;

        if (params.inputValue.toString() === radioValue.toString()) {
          radioInput.checked = true;
        }

        var label = document.createElement('span');
        label.innerHTML = radioLabel;
        label.className = swalClasses.label;
        radioLabelElement.appendChild(radioInput);
        radioLabelElement.appendChild(label);
        radio.appendChild(radioLabelElement);
      });
      var radios = radio.querySelectorAll('input');

      if (radios.length) {
        radios[0].focus();
      }
    }
  };
  /**
   * Converts `inputOptions` into an array of `[value, label]`s
   * @param inputOptions
   */

  var formatInputOptions = function formatInputOptions(inputOptions) {
    var result = [];

    if (typeof Map !== 'undefined' && inputOptions instanceof Map) {
      inputOptions.forEach(function (value, key) {
        result.push([key, value]);
      });
    } else {
      Object.keys(inputOptions).forEach(function (key) {
        result.push([key, inputOptions[key]]);
      });
    }

    return result;
  };

  var handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {
    instance.disableButtons();

    if (innerParams.input) {
      handleConfirmWithInput(instance, innerParams);
    } else {
      confirm(instance, innerParams, true);
    }
  };
  var handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {
    instance.disableButtons();
    dismissWith(DismissReason.cancel);
  };

  var handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {
    var inputValue = getInputValue(instance, innerParams);

    if (innerParams.inputValidator) {
      instance.disableInput();
      var validationPromise = Promise.resolve().then(function () {
        return innerParams.inputValidator(inputValue, innerParams.validationMessage);
      });
      validationPromise.then(function (validationMessage) {
        instance.enableButtons();
        instance.enableInput();

        if (validationMessage) {
          instance.showValidationMessage(validationMessage);
        } else {
          confirm(instance, innerParams, inputValue);
        }
      });
    } else if (!instance.getInput().checkValidity()) {
      instance.enableButtons();
      instance.showValidationMessage(innerParams.validationMessage);
    } else {
      confirm(instance, innerParams, inputValue);
    }
  };

  var succeedWith = function succeedWith(instance, value) {
    instance.closePopup({
      value: value
    });
  };

  var confirm = function confirm(instance, innerParams, value) {
    if (innerParams.showLoaderOnConfirm) {
      showLoading(); // TODO: make showLoading an *instance* method
    }

    if (innerParams.preConfirm) {
      instance.resetValidationMessage();
      var preConfirmPromise = Promise.resolve().then(function () {
        return innerParams.preConfirm(value, innerParams.validationMessage);
      });
      preConfirmPromise.then(function (preConfirmValue) {
        if (isVisible(getValidationMessage()) || preConfirmValue === false) {
          instance.hideLoading();
        } else {
          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
        }
      });
    } else {
      succeedWith(instance, value);
    }
  };

  var addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {
    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture
      });
      globalState.keydownHandlerAdded = false;
    }

    if (!innerParams.toast) {
      globalState.keydownHandler = function (e) {
        return keydownHandler(instance, e, innerParams, dismissWith);
      };

      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture
      });
      globalState.keydownHandlerAdded = true;
    }
  }; // Focus handling

  var setFocus = function setFocus(innerParams, index, increment) {
    var focusableElements = getFocusableElements(); // search for visible elements and select the next possible match

    for (var i = 0; i < focusableElements.length; i++) {
      index = index + increment; // rollover to first item

      if (index === focusableElements.length) {
        index = 0; // go to last item
      } else if (index === -1) {
        index = focusableElements.length - 1;
      }

      return focusableElements[index].focus();
    } // no visible focusable elements, focus the popup


    getPopup().focus();
  };
  var arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11
  ];
  var escKeys = ['Escape', 'Esc' // IE11
  ];

  var keydownHandler = function keydownHandler(instance, e, innerParams, dismissWith) {
    if (innerParams.stopKeydownPropagation) {
      e.stopPropagation();
    } // ENTER


    if (e.key === 'Enter') {
      handleEnter(instance, e, innerParams); // TAB
    } else if (e.key === 'Tab') {
      handleTab(e, innerParams); // ARROWS - switch focus between buttons
    } else if (arrowKeys.indexOf(e.key) !== -1) {
      handleArrows(); // ESC
    } else if (escKeys.indexOf(e.key) !== -1) {
      handleEsc(e, innerParams, dismissWith);
    }
  };

  var handleEnter = function handleEnter(instance, e, innerParams) {
    // #720 #721
    if (e.isComposing) {
      return;
    }

    if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
      if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {
        return; // do not submit
      }

      clickConfirm();
      e.preventDefault();
    }
  };

  var handleTab = function handleTab(e, innerParams) {
    var targetElement = e.target;
    var focusableElements = getFocusableElements();
    var btnIndex = -1;

    for (var i = 0; i < focusableElements.length; i++) {
      if (targetElement === focusableElements[i]) {
        btnIndex = i;
        break;
      }
    }

    if (!e.shiftKey) {
      // Cycle to the next button
      setFocus(innerParams, btnIndex, 1);
    } else {
      // Cycle to the prev button
      setFocus(innerParams, btnIndex, -1);
    }

    e.stopPropagation();
    e.preventDefault();
  };

  var handleArrows = function handleArrows() {
    var confirmButton = getConfirmButton();
    var cancelButton = getCancelButton(); // focus Cancel button if Confirm button is currently focused

    if (document.activeElement === confirmButton && isVisible(cancelButton)) {
      cancelButton.focus(); // and vice versa
    } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {
      confirmButton.focus();
    }
  };

  var handleEsc = function handleEsc(e, innerParams, dismissWith) {
    if (callIfFunction(innerParams.allowEscapeKey)) {
      e.preventDefault();
      dismissWith(DismissReason.esc);
    }
  };

  var handlePopupClick = function handlePopupClick(domCache, innerParams, dismissWith) {
    if (innerParams.toast) {
      handleToastClick(domCache, innerParams, dismissWith);
    } else {
      // Ignore click events that had mousedown on the popup but mouseup on the container
      // This can happen when the user drags a slider
      handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup

      handleContainerMousedown(domCache);
      handleModalClick(domCache, innerParams, dismissWith);
    }
  };

  var handleToastClick = function handleToastClick(domCache, innerParams, dismissWith) {
    // Closing toast by internal click
    domCache.popup.onclick = function () {
      if (innerParams.showConfirmButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {
        return;
      }

      dismissWith(DismissReason.close);
    };
  };

  var ignoreOutsideClick = false;

  var handleModalMousedown = function handleModalMousedown(domCache) {
    domCache.popup.onmousedown = function () {
      domCache.container.onmouseup = function (e) {
        domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't
        // have any other direct children aside of the popup

        if (e.target === domCache.container) {
          ignoreOutsideClick = true;
        }
      };
    };
  };

  var handleContainerMousedown = function handleContainerMousedown(domCache) {
    domCache.container.onmousedown = function () {
      domCache.popup.onmouseup = function (e) {
        domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup

        if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
          ignoreOutsideClick = true;
        }
      };
    };
  };

  var handleModalClick = function handleModalClick(domCache, innerParams, dismissWith) {
    domCache.container.onclick = function (e) {
      if (ignoreOutsideClick) {
        ignoreOutsideClick = false;
        return;
      }

      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
        dismissWith(DismissReason.backdrop);
      }
    };
  };

  function _main(userParams) {
    showWarningsForParams(userParams); // Check if there is another Swal closing

    if (getPopup() && globalState.swalCloseEventFinishedCallback) {
      globalState.swalCloseEventFinishedCallback();
      delete globalState.swalCloseEventFinishedCallback;
    } // Check if there is a swal disposal defer timer


    if (globalState.deferDisposalTimer) {
      clearTimeout(globalState.deferDisposalTimer);
      delete globalState.deferDisposalTimer;
    }

    var showClass = _extends({}, defaultParams.showClass, userParams.showClass);

    var hideClass = _extends({}, defaultParams.hideClass, userParams.hideClass);

    var innerParams = _extends({}, defaultParams, userParams);

    innerParams.showClass = showClass;
    innerParams.hideClass = hideClass;

    if (userParams.animation === false) {
      innerParams.showClass = {
        popup: '',
        backdrop: 'swal2-backdrop-show swal2-noanimation'
      };
      innerParams.hideClass = {};
    }

    setParameters(innerParams);
    Object.freeze(innerParams); // clear the previous timer

    if (globalState.timeout) {
      globalState.timeout.stop();
      delete globalState.timeout;
    } // clear the restore focus timeout


    clearTimeout(globalState.restoreFocusTimeout);
    var domCache = populateDomCache(this);
    render(this, innerParams);
    privateProps.innerParams.set(this, innerParams);
    return swalPromise(this, domCache, innerParams);
  }

  var swalPromise = function swalPromise(instance, domCache, innerParams) {
    return new Promise(function (resolve) {
      // functions to handle all closings/dismissals
      var dismissWith = function dismissWith(dismiss) {
        instance.closePopup({
          dismiss: dismiss
        });
      };

      privateMethods.swalPromiseResolve.set(instance, resolve);
      setupTimer(globalState, innerParams, dismissWith);

      domCache.confirmButton.onclick = function () {
        return handleConfirmButtonClick(instance, innerParams);
      };

      domCache.cancelButton.onclick = function () {
        return handleCancelButtonClick(instance, dismissWith);
      };

      domCache.closeButton.onclick = function () {
        return dismissWith(DismissReason.close);
      };

      handlePopupClick(domCache, innerParams, dismissWith);
      addKeydownHandler(instance, globalState, innerParams, dismissWith);

      if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {
        addClass(document.body, swalClasses['toast-column']);
      } else {
        removeClass(document.body, swalClasses['toast-column']);
      }

      handleInputOptionsAndValue(instance, innerParams);
      openPopup(innerParams);
      initFocus(domCache, innerParams); // Scroll container to top on open (#1247)

      domCache.container.scrollTop = 0;
    });
  };

  var populateDomCache = function populateDomCache(instance) {
    var domCache = {
      popup: getPopup(),
      container: getContainer(),
      content: getContent(),
      actions: getActions(),
      confirmButton: getConfirmButton(),
      cancelButton: getCancelButton(),
      closeButton: getCloseButton(),
      validationMessage: getValidationMessage(),
      progressSteps: getProgressSteps()
    };
    privateProps.domCache.set(instance, domCache);
    return domCache;
  };

  var setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {
    if (innerParams.timer) {
      globalState$$1.timeout = new Timer(function () {
        dismissWith('timer');
        delete globalState$$1.timeout;
      }, innerParams.timer);
    }
  };

  var initFocus = function initFocus(domCache, innerParams) {
    if (innerParams.toast) {
      return;
    }

    if (!callIfFunction(innerParams.allowEnterKey)) {
      return blurActiveElement();
    }

    if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
      return domCache.cancelButton.focus();
    }

    if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
      return domCache.confirmButton.focus();
    }

    setFocus(innerParams, -1, 1);
  };

  var blurActiveElement = function blurActiveElement() {
    if (document.activeElement && typeof document.activeElement.blur === 'function') {
      document.activeElement.blur();
    }
  };

  /**
   * Updates popup parameters.
   */

  function update(params) {
    var popup = getPopup();
    var innerParams = privateProps.innerParams.get(this);

    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
      return warn("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
    }

    var validUpdatableParams = {}; // assign valid params from `params` to `defaults`

    Object.keys(params).forEach(function (param) {
      if (Swal.isUpdatableParameter(param)) {
        validUpdatableParams[param] = params[param];
      } else {
        warn("Invalid parameter to update: \"".concat(param, "\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js"));
      }
    });

    var updatedParams = _extends({}, innerParams, validUpdatableParams);

    render(this, updatedParams);
    privateProps.innerParams.set(this, updatedParams);
    Object.defineProperties(this, {
      params: {
        value: _extends({}, this.params, params),
        writable: false,
        enumerable: true
      }
    });
  }

  var instanceMethods = Object.freeze({
    hideLoading: hideLoading,
    disableLoading: hideLoading,
    getInput: getInput$1,
    close: close,
    closePopup: close,
    closeModal: close,
    closeToast: close,
    enableButtons: enableButtons,
    disableButtons: disableButtons,
    enableInput: enableInput,
    disableInput: disableInput,
    showValidationMessage: showValidationMessage,
    resetValidationMessage: resetValidationMessage$1,
    getProgressSteps: getProgressSteps$1,
    _main: _main,
    update: update
  });

  var currentInstance; // SweetAlert constructor

  function SweetAlert() {
    // Prevent run in Node env

    /* istanbul ignore if */
    if (typeof window === 'undefined') {
      return;
    } // Check for the existence of Promise

    /* istanbul ignore if */

    if (typeof Promise === 'undefined') {
      error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');
    }

    currentInstance = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var outerParams = Object.freeze(this.constructor.argsToParams(args));
    Object.defineProperties(this, {
      params: {
        value: outerParams,
        writable: false,
        enumerable: true,
        configurable: true
      }
    });

    var promise = this._main(this.params);

    privateProps.promise.set(this, promise);
  } // `catch` cannot be the name of a module export, so we define our thenable methods here instead


  SweetAlert.prototype.then = function (onFulfilled) {
    var promise = privateProps.promise.get(this);
    return promise.then(onFulfilled);
  };

  SweetAlert.prototype["finally"] = function (onFinally) {
    var promise = privateProps.promise.get(this);
    return promise["finally"](onFinally);
  }; // Assign instance methods from src/instanceMethods/*.js to prototype


  _extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor


  _extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility


  Object.keys(instanceMethods).forEach(function (key) {
    SweetAlert[key] = function () {
      if (currentInstance) {
        var _currentInstance;

        return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);
      }
    };
  });
  SweetAlert.DismissReason = DismissReason;
  SweetAlert.version = '9.1.5';

  var Swal = SweetAlert;
  Swal["default"] = Swal;

  return Swal;
});
if (typeof this !== 'undefined' && this.Sweetalert2) {
  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2;
}

"undefined" != typeof document && function (e, t) {
  var n = e.createElement("style");if (e.getElementsByTagName("head")[0].appendChild(n), n.styleSheet) n.styleSheet.disabled || (n.styleSheet.cssText = t);else try {
    n.innerHTML = t;
  } catch (e) {
    n.innerText = t;
  }
}(document, ".swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 .0625em #fff,0 0 0 .125em rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-actions.swal2-loading .swal2-styled.swal2-confirm{box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-actions.swal2-loading .swal2-styled.swal2-cancel{margin-right:30px;margin-left:30px}.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after{content:\"\";display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 2px #fff,0 0 0 4px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;outline:initial;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-webkit-input-placeholder,.swal2-input::-webkit-input-placeholder,.swal2-textarea::-webkit-input-placeholder{color:#ccc}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:inherit}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:inherit;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\"!\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.875em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-rtl .swal2-close{right:auto;left:0}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent!important}body.swal2-no-backdrop .swal2-container>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-container.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-top-left,body.swal2-no-backdrop .swal2-container.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-top-end,body.swal2-no-backdrop .swal2-container.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-container.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-left,body.swal2-no-backdrop .swal2-container.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-end,body.swal2-no-backdrop .swal2-container.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom-left,body.swal2-no-backdrop .swal2-container.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-bottom-end,body.swal2-no-backdrop .swal2-container.swal2-bottom-right{right:0;bottom:0}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}");

/***/ }),

/***/ "./mock/admin/src/js/model/_basic-model.js":
/*!*************************************************!*\
  !*** ./mock/admin/src/js/model/_basic-model.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_listener */ "./mock/admin/src/js/util/_listener.js");
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file BasicModel Controller
 */



var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var instance = null;

/**
 * @classname BasicModel
 * @classdesc Basic Model
 */

var BasicModel = function () {

	/**
  * @constructor
  */
	function BasicModel() {
		_classCallCheck(this, BasicModel);

		if (instance) {
			return instance;
		}

		this._listener = new _util_listener__WEBPACK_IMPORTED_MODULE_0__["default"]();
		this._jqXHR = null;
		this._post = false;
		this._data = null;
		this._message = null;
		this._code = null;
		// csrf add
		$.ajaxSetup({
			headers: {
				'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
			}
		});

		instance = this;
		return instance;
	}

	_createClass(BasicModel, [{
		key: 'getHolidays',


		/**
   *
   * 休日取得
   * @memberof BasicModel
   * @param {string} year - 年
   * @param {string} month - 月
   * @param {string} shopId - 店舗ID
   * @return {undefined}
   */
		value: function getHolidays(year, month, shopId) {
			console.log('BasicModel.getHolidays ' + year + '/' + month + ' (' + shopId + ')');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			month = _util_common__WEBPACK_IMPORTED_MODULE_1__["default"].zeroPadding(month, 2);
			var formData = {
				date: year + '-' + month,
				shop_id: shopId
			};
			var url = window.const.API_URL.GET_HOLIDAYS;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.getHolidaysComplete.bind(this));
		}
	}, {
		key: 'getHolidaysComplete',


		/**
   * 休日取得ajax通信完了
   *
   * @memberof BasicModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function getHolidaysComplete(data, textStatus) {
			console.log('BasicModel.getHolidaysComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					this._listener.trigger('error');
				} else {
					this._post = false;
					this._listener.trigger('getHolidaysComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				this._listener.trigger('error');
				console.log('ajax error (onGetHolidaysComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'changeHoliday',


		/**
   *
   * 休日設定
   * @memberof BasicModel
   * @param {string} date - 年月
   * @param {string} shopId - 店舗ID
   * @return {undefined}
   */
		value: function changeHoliday(date, shopId) {
			console.log('BasicModel.changeHoliday ' + date);
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			var formData = {
				date: date,
				shop_id: shopId
			};
			var url = window.const.API_URL.CHANGE_HOLIDAY;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.changeHolidayComplete.bind(this));
		}
	}, {
		key: 'changeHolidayComplete',


		/**
   * 休日設定ajax通信完了
   *
   * @memberof BasicModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function changeHolidayComplete(data, textStatus) {
			console.log('BasicModel.changeHolidayComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					this._listener.trigger('error');
				} else {
					this._post = false;
					this._listener.trigger('changeHolidayComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				this._listener.trigger('error');
				console.log('ajax error (changeHolidayComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'getDeadline',


		/**
   *
   * 締切時刻取得
   * @memberof BasicModel
   * @param {string} year - 年
   * @param {string} month - 月
   * @param {string} shopId - 店舗ID
   * @return {undefined}
   */
		value: function getDeadline(year, month, shopId) {
			console.log('BasicModel.getDeadline ' + year + '/' + month + ' (' + shopId + ')');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			month = _util_common__WEBPACK_IMPORTED_MODULE_1__["default"].zeroPadding(month, 2);
			var formData = {
				date: year + '-' + month,
				shop_id: shopId
			};
			var url = window.const.API_URL.GET_DEADLINE;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.getDeadlineComplete.bind(this));
		}
	}, {
		key: 'getDeadlineComplete',


		/**
   * 締切時刻取得ajax通信完了
   *
   * @memberof BasicModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function getDeadlineComplete(data, textStatus) {
			console.log('BasicModel.getDeadlineComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					this._listener.trigger('error');
				} else {
					this._post = false;
					this._listener.trigger('getDeadlineComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				this._listener.trigger('error');
				console.log('ajax error (onGetDeadlineComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'changeDeadline',


		/**
   *
   * 締切時刻変更
   * @memberof BasicModel
   * @return {undefined}
   */
		value: function changeDeadline() {
			console.log('BasicModel.changeDeadline');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			var shopId = parseInt($('#shop_id').val());
			var date = $('#target_date').val();
			var deadline = $('#deadline_time').val();
			var formData = {
				date: date,
				deadline_time: deadline,
				shop_id: shopId
			};
			var url = window.const.API_URL.CHANGE_DEADLINE;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.changeDeadlineComplete.bind(this));
		}
	}, {
		key: 'changeDeadlineComplete',


		/**
   * 締切時刻変更ajax通信完了
   *
   * @memberof BasicModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function changeDeadlineComplete(data, textStatus) {
			console.log('BasicModel.changeDeadlineComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			console.log(data);
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					this._listener.trigger('error');
				} else {
					this._post = false;
					this._listener.trigger('changeDeadlineComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				this._listener.trigger('error');
				console.log('ajax error (onChangeDeadlineComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'getStock',


		/**
   *
   * 在庫取得
   * @memberof BasicModel
   * @param {string} year - 年
   * @param {string} month - 月
   * @param {string} shopId - 店舗ID
   * @return {undefined}
   */
		value: function getStock(year, month, shopId) {
			console.log('BasicModel.getStock ' + year + '/' + month + ' (' + shopId + ')');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			month = _util_common__WEBPACK_IMPORTED_MODULE_1__["default"].zeroPadding(month, 2);
			var formData = {
				date: year + '-' + month,
				shop_id: shopId
			};
			var url = window.const.API_URL.GET_STOCK;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.getStockComplete.bind(this));
		}
	}, {
		key: 'getStockComplete',


		/**
   * 在庫取得ajax通信完了
   *
   * @memberof BasicModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function getStockComplete(data, textStatus) {
			console.log('BasicModel.getStockComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					this._listener.trigger('error');
				} else {
					this._post = false;
					this._listener.trigger('getStockComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				this._listener.trigger('error');
				console.log('ajax error (onGetStockComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'on',


		/**
   * listener on
   *
   * @memberof BasicModel
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function on(name, fn) {
			this._listener.on(name, fn);
		}
	}, {
		key: 'off',


		/**
   * listner off
   *
   * @memberof BasicModel
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function off(name, fn) {
			this._listener.off(name, fn);
		}
	}]);

	return BasicModel;
}();

/* harmony default export */ __webpack_exports__["default"] = (BasicModel);

/***/ }),

/***/ "./mock/admin/src/js/model/_form-model.js":
/*!************************************************!*\
  !*** ./mock/admin/src/js/model/_form-model.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_listener */ "./mock/admin/src/js/util/_listener.js");
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file FormModel Controller
 */



var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var instance = null;

/**
 * @classname FormModel
 * @classdesc Form Model
 */

var FormModel = function () {

	/**
  * @constructor
  */
	function FormModel() {
		_classCallCheck(this, FormModel);

		if (instance) {
			return instance;
		}

		this._listener = new _util_listener__WEBPACK_IMPORTED_MODULE_0__["default"]();
		this._jqXHR = null;
		this._post = false;
		this._data = null;
		this._message = null;
		this._code = null;
		// csrf add
		$.ajaxSetup({
			headers: {
				'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
			}
		});

		instance = this;
		return instance;
	}

	_createClass(FormModel, [{
		key: 'uploadFile',


		/**
   *
   * 画像アップロード
   * @memberof FormModel
   * @param {blob} file - ファイル
   * @param {string} type - タイプ movie:動画 pdf:PDFファイル
   * @return {undefined}
   */
		value: function uploadFile(file, type) {
			if (this._post) return;
			console.log('FormModel.uploadFile/ type: ' + type);
			console.log(file);
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			this._post = true;
			this._type = type;
			var formData = new FormData();
			var url = void 0;
			formData.append('type', type);
			if (type === 1) {
				console.log('研修動画');
				url = window.const.API_URL.UPLOAD_MOVIE;
				formData.append('video_file', file);
			} else if (type === 2) {
				console.log('パウチ');
				url = window.const.API_URL.UPLOAD_POUCH;
				formData.append('pouch_file', file);
			} else if (type === 3) {
				console.log('トークスクリプト');
				url = window.const.API_URL.UPLOAD_SCRIPT;
				formData.append('script_file', file);
			} else if (type === 4) {
				console.log('クレド／VISION');
				url = window.const.API_URL.UPLOAD_PDF;
				formData.append('pdf_file', file);
			}
			console.log(url);
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			params['processData'] = false;
			params['contentType'] = false;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.onUploadFileComplete.bind(this));
		}
	}, {
		key: 'onUploadFileComplete',


		/**
   * 画像アップロードajax通信完了
   *
   * @memberof FormModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function onUploadFileComplete(data, textStatus) {
			console.log('FormModel.onUploadFileComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal(this._message + '<br>' + this._code);
				} else {
					this._post = false;
					if (this._type === 1) {
						this._listener.trigger('uploadMovieComplete');
					} else if (this._type === 2) {
						this._listener.trigger('uploadPouchComplete');
					} else if (this._type === 3) {
						this._listener.trigger('uploadScriptComplete');
					} else if (this._type === 4) {
						this._listener.trigger('uploadPdfComplete');
					}
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal(this._message + '<br>' + this._code);
				console.log('ajax error (onUploadImageComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'deleteFile',


		/**
   *
   * 画像削除
   * @memberof FormModel
   * @param {string} fileId - ファイルID
   * @return {undefined}
   */
		value: function deleteFile(fileId) {
			if (this._post) return;
			console.log('FormModel.deleteFile');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			this._post = true;
			var formData = {
				file_id: fileId
			};
			var url = window.const.API_URL.DELETE_FILE;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.onDeleteImageComplete.bind(this));
		}
	}, {
		key: 'onDeleteImageComplete',


		/**
   * 画像削除ajax通信完了
   *
   * @memberof FormModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function onDeleteImageComplete(data, textStatus) {
			console.log('FormModel.onDeleteImageComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal(this._message + '<br>' + this._code);
				} else {
					this._post = false;
					this._listener.trigger('deleteImageComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal(this._message + '<br>' + this._code);
				console.log('ajax error (onDeleteImageComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'getBase',


		/**
   *
   * 画像アップロード
   * @memberof FormModel
   * @param {number} type - 統括タイプ
   * @return {undefined}
   */
		value: function getBase(type) {
			if (this._post) return;
			console.log('FormModel.getBase / ' + type);
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showLoading();
			this._post = true;
			var formData = new FormData();
			formData.append('type', type);
			var url = window.const.API_URL.GET_BASE;
			var params = {};
			params['data'] = formData;
			params['method'] = 'POST';
			params['dataType'] = 'json';
			params['url'] = url;
			params['processData'] = false;
			params['contentType'] = false;
			console.log(JSON.stringify(params));
			this._jqXHR = $.ajax(params).always(this.onGetBaseComplete.bind(this));
		}
	}, {
		key: 'onGetBaseComplete',


		/**
   * 画像アップロードajax通信完了
   *
   * @memberof FormModel
   * @param {Object} data - data|jqXHR
   * @param {String} textStatus - "success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"
   * @return {undefined}
   */
		value: function onGetBaseComplete(data, textStatus) {
			console.log('FormModel.onGetBaseComplete');
			_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].hideLoading();
			this._data = data.result;
			this._code = data.code;
			this._message = data.message;
			console.log('code: ' + this._code + ' / message: ' + this._message);
			if (textStatus === 'success') {
				if (this._code !== 0) {
					this._post = false;
					_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal(this._message + '<br>' + this._code);
				} else {
					this._post = false;
					this._listener.trigger('getBaseComplete');
				}
			} else {
				this._post = false;
				this._code = 9999;
				this._message = '通信エラーが発生しました。<br>再度お試しください。';
				_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal(this._message + '<br>' + this._code);
				console.log('ajax error (onGetBaseComplete): ' + textStatus);
			}
			this._jqXHR = null;
		}
	}, {
		key: 'on',


		/**
   * listener on
   *
   * @memberof FormModel
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function on(name, fn) {
			this._listener.on(name, fn);
		}
	}, {
		key: 'off',


		/**
   * listner off
   *
   * @memberof FormModel
   * @param {string} name - イベント名
   * @param {function} fn - 実行する関数
   * @return {undefined}
   */
		value: function off(name, fn) {
			this._listener.off(name, fn);
		}
	}]);

	return FormModel;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormModel);

/***/ }),

/***/ "./mock/admin/src/js/template/_template.js":
/*!*************************************************!*\
  !*** ./mock/admin/src/js/template/_template.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file _template.js
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname Template
 */

var Template = function () {
	function Template() {
		_classCallCheck(this, Template);
	}

	_createClass(Template, null, [{
		key: 'getImageList',


		/**
   * 画像リスト
   *
   * @memberof Template
   * @param {array} image - 画像情報
   * @return {string} - 部署
   */
		value: function getImageList(image) {
			console.log('Template.getImageList');
			return '\n<li class="list-item tac">\n\t<div class="image-box" style="background: #f2f2f2 url(' + image.url + ') no-repeat 50% 50% / contain"></div>\n\t<button class="btn btn-primary btn-sm btn-select-image mt10" type="button" data-image-id="' + image.image_id + '" data-image-url="' + image.url + '"><i class="fas fa-check mr10"></i>\u9078\u629E\u3059\u308B</button>\n</li>\n';
		}
	}, {
		key: 'addQuestion',


		/**
   * 質問
   *
   * @memberof Template
   * @param {number} questionNo - 質問数
   * @return {string} - 質問
   */
		value: function addQuestion(questionNo) {
			console.log('Template.addQuestion / ' + questionNo);
			var additionalQuestion = '\n<li class="list-item">\n\t<div class="form-group validateGroup row"><label class="col-sm-3 col-form-label">\u8CEA\u554F\u6587\uFF08' + questionNo + '\uFF09<span class="badge badge-danger ml-2">\u5FC5\u9808</span></label>\n\t\t<div class="col-sm-8">\n\t\t\t<div class="error-tip">\n\t\t\t\t<div class="error-tip-inner"></div>\n\t\t\t</div>\n\t\t\t<textarea class="form-control validate question_text" name="question_text[' + questionNo + ']" rows="4" data-validate="empty max-200" maxlength="200"></textarea>\n\t\t</div>\n\t</div>\n\t<div class="form-group validateGroup row"><label class="col-sm-3 col-form-label">\u56DE\u7B54<span class="badge badge-danger ml-1">\u5FC5\u9808</span></label>\n\t\t<div class="col-sm-8">\n\t\t\t<ul class="list list-answers" data-answer-num="2">\n\t\t\t\t<li class="list-item"><input class="form-control validate answer_text" type="text" name="answer_text[' + questionNo + '][1]" data-validate="empty max-50" maxlength="50">\n\t\t\t\t\t<div class="custom-control custom-radio mb0"><input class="custom-control-input" id="answer' + questionNo + '-1" type="radio" name="correct[' + questionNo + ']" value="1" checked=""><label class="custom-control-label" for="answer' + questionNo + '-1">\u6B63\u89E3</label></div>\n\t\t\t\t</li>\n\t\t\t\t<li class="list-item"><input class="form-control validate answer_text" type="text" name="answer_text[' + questionNo + '][2]" data-validate="empty max-50" maxlength="50">\n\t\t\t\t\t<div class="custom-control custom-radio mb0"><input class="custom-control-input" id="answer' + questionNo + '-2" type="radio" name="correct[' + questionNo + ']" value="2"><label class="custom-control-label" for="answer' + questionNo + '-2">\u6B63\u89E3</label></div><button class="btn btn-add-answer btn-success" type="button"><i class="fas fa-plus"></i></button>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<button class="btn btn-add-question btn-success" type="button"><i class="fas fa-plus"></i>\u8CEA\u554F\u8FFD\u52A0</button>\n\t<button class="btn btn-delete-question btn-danger" type="button"><i class="fas fa-minus"></i>\u8CEA\u554F\u524A\u9664</button>\n</li>\n';
			return additionalQuestion;
		}
	}, {
		key: 'addAnswer',


		/**
   * 回答
   *
   * @memberof Template
   * @param {number} questionNo - 質問数
   * @return {string} - 回答
   */
		value: function addAnswer(questionNo, answerNo) {
			console.log('Template.addAnswer / ' + questionNo + '-' + answerNo);
			var additionalAnswer = '\n<li class="list-item">\n\t<input class="form-control validate answer_text" type="text" name="answer_text[' + questionNo + '][' + answerNo + ']" data-validate="empty max-50" maxlength="50">\n\t<div class="custom-control custom-radio mb0">\n\t\t<input class="custom-control-input" id="answer_text' + questionNo + '-' + answerNo + '" type="radio" name="correct[' + questionNo + ']" value="' + answerNo + '">\n\t\t<label class="custom-control-label" for="answer_text' + questionNo + '-' + answerNo + '">\u6B63\u89E3</label>\n\t</div>\n\t<button class="btn btn-add-answer btn-success" type="button"><i class="fas fa-plus"></i></button>\n\t<button class="btn btn-delete-answer btn-danger" type="button"><i class="fas fa-minus"></i></button>\n</li>\n';
			return additionalAnswer;
		}
	}]);

	return Template;
}();

/* harmony default export */ __webpack_exports__["default"] = (Template);

/***/ }),

/***/ "./mock/admin/src/js/util/_apply-class.js":
/*!************************************************!*\
  !*** ./mock/admin/src/js/util/_apply-class.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file クラスを要素に適用する
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ApplyClass = function () {
	function ApplyClass() {
		_classCallCheck(this, ApplyClass);
	}

	_createClass(ApplyClass, null, [{
		key: 'apply',

		/**
   * クラスを要素に適用する
   *
   * memo
   * http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible/#answer-1608546
   *
   * @memberof ApplyClass
   * @param {function} klass - 適用したいクラス
   * @param {jQuery} $e - クラスを適用する jQuery オブジェクト
   * @param {Array<Object>} args - クラスのインスタンスを生成するときに渡す引数
   * @return {Object} instance - 生成したクラスのインスタンス
   */
		value: function apply(klass, $e, args) {
			this.hasApplied(klass, $e);
			if (this.hasApplied(klass, $e)) {
				return;
			}
			var F = function F() {
				return klass.apply(this, args);
			};
			F.prototype = klass.prototype;
			var instance = new F();

			if (instance) {
				$e.data(name, true);
				$e.data('_' + name, instance);
			}
			return instance;
		}
	}, {
		key: 'hasApplied',


		/**
   * 要素にクラスが適用されているか調べる
   *
   * @memberof ApplyClass
   * @param {function} klass - 適用したいクラス
   * @param {jQuery} $e - クラスを適用する jQuery オブジェクト
   * @return {bool} - 適用されていたら true
   */
		value: function hasApplied(klass, $e) {
			var name = klass._classname || klass.prototype._classname;
			if (name === undefined || name === null) {
				return false;
			}
			return $e.data(name);
		}
	}]);

	return ApplyClass;
}();

/* harmony default export */ __webpack_exports__["default"] = (ApplyClass);

/***/ }),

/***/ "./mock/admin/src/js/util/_common.js":
/*!*******************************************!*\
  !*** ./mock/admin/src/js/util/_common.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file _common.js
 */


/**
 * @classname Common
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Common = function () {

	/**
  * @constructor
  */
	function Common() {
		_classCallCheck(this, Common);

		console.log('Common.constructor');
	}

	_createClass(Common, null, [{
		key: 'zeroPadding',


		/**
   * ゼロパディングする
   *
   * @memberof Common
   * @param {int} num - 元の数字
   * @param {int} length - 桁数
   * @return {string} - ゼロパディングした数字
   */
		value: function zeroPadding(num, length) {
			return ('0000000000' + num).slice(-length);
		}
	}, {
		key: 'separatedByComma',


		/**
   * 数字をカンマ区切りにする
   *
   * @memberof Common
   * @param {string} num - 3桁区切りの数字
   * @return {string} - カンマを削除した数字
   */
		value: function separatedByComma(num) {
			return Number(num).toLocaleString();
		}
	}, {
		key: 'getPrice',


		/**
   * 価格を数値に変換する
   *
   * @memberof Common
   * @param {string} price - 数字文字列
   * @return {string} - 数字
   */
		value: function getPrice(price) {
			return parseInt(price.replace(/^¥/, '').replace(/,/ig, ''));
		}
	}, {
		key: 'getCurrentDateTime',


		/**
   * 日時を取得する
   *
   * @memberof Common
   * @param {date} date - 日時
   * @param {string} divider - 年月日区切り文字
   * @param {boolean} showSec - 秒を表示するか？
   * @param {boolean} padding - パディングするかどうか？
   * @return {string} date - 現在日時
   */
		value: function getCurrentDateTime(date) {
			var divider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
			var showSec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
			var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

			date = date ? date : new Date();
			var year = date.getFullYear();
			var month = date.getMonth() + 1;
			var day = date.getDate();
			var hour = date.getHours();
			var min = date.getMinutes();
			var sec = date.getSeconds();
			var dateStr = '';
			if (padding) {
				dateStr = year + divider + this.zeroPadding(month, 2) + divider + this.zeroPadding(day, 2) + ' ' + this.zeroPadding(hour, 2) + ':' + this.zeroPadding(min, 2);
				if (showSec) dateStr += ':' + this.zeroPadding(sec, 2);
			} else {
				dateStr = year + divider + month + divider + day + ' ' + hour + ':' + min;
				if (showSec) dateStr += ':' + sec;
			}
			return dateStr;
		}
	}, {
		key: 'getCurrentDate',


		/**
   * 本日の日付を取得する
   *
   * @memberof Common
   * @param {boolean} padding - パディングするかどうか？
   * @param {string} divider - 年月日区切り文字
   * @return {string} date - 本日
   */
		value: function getCurrentDate() {
			var padding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
			var divider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';

			var date = new Date();
			if (padding) {
				return date.getFullYear() + divider + this.zeroPadding(date.getMonth() + 1, 2) + divider + this.zeroPadding(date.getDate(), 2);
			} else {
				return date.getFullYear() + divider + (date.getMonth() + 1) + divider + date.getDate();
			}
		}
	}, {
		key: 'getCurrentURL',


		/**
   * パラメーターなしのURLを取得する
   *
   * @memberof Common
   * @return {string} url - パラメーターなしのURL
   */
		value: function getCurrentURL() {
			var url = document.location.href;

			if (url.match(/(.+)\?/)) {
				var match = url.match(/(.+)\?/);
				url = match[1];
			} else if (url.match(/(.+)#/)) {
				var _match = url.match(/(.+)#/);
				url = _match[1];
			}
			return url;
		}
	}, {
		key: 'getParam',


		/**
   * URLパラメーターを取得する
   *
   * @memberof Common
   * @return {array} param - URLパラメーター key value
   */
		value: function getParam() {
			var url = document.location.href;
			if (url.match(/(.+)#/)) {
				var match1 = url.match(/(.+)#/);
				url = match1[1];
			}
			if (url.match(/\?(.+)$/)) {
				var match2 = url.match(/\?(.+)$/);
				var paramString = match2[1];
				var tmp = paramString.split('&');
				var param = {};
				var tmp2 = void 0,
				    key = void 0,
				    val = void 0;
				for (var i = 0; i < tmp.length; i++) {
					// initialize
					tmp2 = [];
					key = '';
					val = '';

					tmp2 = tmp[i].split('=');
					key = tmp2[0];
					val = tmp2[1];
					param[key] = val;
				}
				return param;
			} else {
				return {};
			}
		}
	}, {
		key: 'getParamAll',


		/**
   * パラメーターを文字列で取得する
   *
   * @memberof Common
   * @return {string} url - パラメーターなしのURL
   */
		value: function getParamAll() {
			var url = document.location.href;
			var param = '';
			if (url.match(/\?(.+)/)) {
				param = $1;
			}
			return param;
		}
	}, {
		key: 'showErrorModal',


		/**
   * エラーモーダルを表示する
   *
   * @memberof Common
   * @return {string} url - パラメーターなしのURL
   */
		value: function showErrorModal() {
			var errorText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '入力項目に誤りがあります。';

			console.log('Common.showErrorModal');
			if ($('.modal-backdrop')[0]) return;
			var $modalBackground = '<div class="modal-backdrop fade show"></div>';
			var $modal = '<div class="modal modal-error fade show" tabindex="-1" role="dialog" style="display: block;">\n \t<div class="modal-dialog" role="document">\n\t\t<div class="modal-content">\n\t\t\t<div class="modal-header bg-danger">\n\t\t\t\t<button type="button" class="close" data-dismiss="modal" aria-label="Close">\n\t\t\t\t\t<span aria-hidden="true">&times;</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class="modal-body tac">\n\t\t\t\t<div class="text-danger mb20" style="font-size: 60px;">\n\t\t\t\t\t<i class="fas fa-exclamation-circle"></i>\n\t\t\t\t</div>\n \t\t\t\t<p>' + errorText + '</p>\n\t\t\t</div>\n\t\t\t<div class="modal-footer">\n \t\t\t\t<button type="button" class="btn btn-secondary" data-dismiss="modal">\u9589\u3058\u308B</button>\n \t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';
			$('body').append($modal).append($modalBackground);
			$('.modal-backdrop').click(function () {
				Common.hideErrorModal();
			});
			$('.modal-error button').click(function () {
				Common.hideErrorModal();
			});
		}
	}, {
		key: 'hideErrorModal',


		/**
   * エラーモーダルを表示する
   *
   * @memberof Common
   * @return {string} url - パラメーターなしのURL
   */
		value: function hideErrorModal() {
			console.log('Common.hideErrorModal');
			var $modal = $('.modal-error');
			var $modalBackground = $('.modal-backdrop');
			$modal.fadeOut(500);
			$modalBackground.fadeOut(500);
			setTimeout(function () {
				$modal.remove();
				$modalBackground.remove();
			}, 500);
			setTimeout(function () {
				if ($('.is-invalid')[0]) {
					var position = $('.is-invalid').eq(0).closest('.form-group').offset().top - 110;
					$('html, body').animate({ scrollTop: position }, 500, 'swing');
				}
			}, 500);
		}
	}, {
		key: 'showReviseModal',


		/**
   * 未修正モーダルを表示する
   *
   * @memberof Common
   * @return {string} url - パラメーターなしのURL
   */
		value: function showReviseModal() {
			console.log('Common.showReviseModal');
			if ($('.modal-backdrop')[0]) return;
			var $modalBackground = '<div class="modal-backdrop fade show"></div>';
			var $modal = '<div class="modal modal-error fade show" tabindex="-1" role="dialog" style="display: block;">\n \t<div class="modal-dialog" role="document">\n\t\t<div class="modal-content">\n\t\t\t<div class="modal-header bg-danger">\n\t\t\t\t<button type="button" class="close" data-dismiss="modal" aria-label="Close">\n\t\t\t\t\t<span aria-hidden="true">&times;</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class="modal-body tac">\n\t\t\t\t<div class="text-danger mb20" style="font-size: 60px;">\n\t\t\t\t\t<i class="fas fa-exclamation-circle"></i>\n\t\t\t\t</div>\n \t\t\t\t<p>\u4FEE\u6B63\u304C\u3055\u308C\u3066\u3044\u306A\u3044\u7B87\u6240\u304C\u3042\u308A\u307E\u3059</p>\n\t\t\t</div>\n\t\t\t<div class="modal-footer">\n \t\t\t\t<button type="button" class="btn btn-secondary" data-dismiss="modal">\u9589\u3058\u308B</button>\n \t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';
			$('body').append($modal).append($modalBackground);
			$('.modal-backdrop').click(function () {
				Common.hideReviseModal();
			});
			$('.modal-error button').click(function () {
				Common.hideReviseModal();
			});
		}
	}, {
		key: 'hideReviseModal',


		/**
   * 未修正モーダルを表示する
   *
   * @memberof Common
   * @return {string} url - パラメーターなしのURL
   */
		value: function hideReviseModal() {
			console.log('Common.hideReviseModal');
			var $modal = $('.modal-error');
			var $modalBackground = $('.modal-backdrop');
			$modal.fadeOut(500);
			$modalBackground.fadeOut(500);
			setTimeout(function () {
				$modal.remove();
				$modalBackground.remove();
			}, 500);
			setTimeout(function () {
				if ($('.has-error')[0]) {
					console.log($('.has-error')[0].attr('id'));
					var position = $('.has-error').eq(0).closest('.form-group').offset().top - 110;
					$('html, body').animate({ scrollTop: position }, 500, 'swing');
				}
			}, 500);
		}
	}, {
		key: 'submit',


		/**
   * フォームの送信をする
   *
   * @memberof Common
   */
		value: function submit($form) {
			if ($form.attr('id') === 'form-exam') {
				$(':disabled').each(function (e) {
					$(this).removeAttr('disabled');
				});
			}
			console.log('Common.submit');
			if ($form.attr('action') === '#' || $form.attr('action') === '' || $form.attr('action') === '__TBA__') {
				console.log('dummy submit');
				this.showDummySubmit();
			} else {
				$form.submit();
			}
		}
	}, {
		key: 'showDummySubmit',


		/**
   * ダミーのフォーム送信モーダルを表示する
   *
   * @memberof Common
   */
		value: function showDummySubmit() {
			console.log('Common.showDummySubmit');
			alert('\u30D5\u30A9\u30FC\u30E0\u9001\u4FE1\u5B8C\u4E86\naction\u306B\u5024\u3092\u8A2D\u5B9A\u3059\u308B\u3068\u30D5\u30A9\u30FC\u30E0\u304C\u9001\u4FE1\u3055\u308C\u307E\u3059\u3002\n\u5B9F\u969B\u306Ejavascript\u51E6\u7406\u306F\u6B63\u5E38\u306B\u5B8C\u4E86\u3057\u3066\u3044\u307E\u3059\u3002');
		}
	}, {
		key: 'getRandomFromArray',


		/**
   * 配列から重複なく複数の値を取り出す
   *
   * @memberof Common
   * @return {array / string} r - 配列の値
   */
		value: function getRandomFromArray(array, num, isString) {
			var a = array;
			var t = [];
			var r = [];
			var l = a.length;
			var n = num < l ? num : l;
			while (n-- > 0) {
				var i = Math.random() * l | 0;
				r[n] = t[i] || a[i];
				--l;
				t[i] = t[l] || a[l];
			}
			if (isString) {
				return r.toString();
			} else {
				return r;
			}
		}
	}, {
		key: 'addHtmlClass',


		/**
   * 機種判定を行う
   *
   * @memberof Common
   * @return {undefined}
   */
		value: function addHtmlClass() {
			var ua = window.navigator.userAgent.toLowerCase();
			var ver = window.navigator.appVersion.toLowerCase();

			// check browser
			var browser = void 0,
			    device = void 0;
			if (ua.indexOf('edge') !== -1) {
				browser = 'edge';
			} else if (ua.indexOf("iemobile") !== -1) {
				browser = 'iemobile';
			} else if (ua.indexOf('trident/7') !== -1) {
				browser = 'ie11';
			} else if (ua.indexOf("msie") !== -1 && ua.indexOf('opera') === -1) {
				if (ver.indexOf("msie 6.") !== -1) {
					browser = 'ie6';
				} else if (ver.indexOf("msie 7.") !== -1) {
					browser = 'ie7';
				} else if (ver.indexOf("msie 8.") !== -1) {
					browser = 'ie8';
				} else if (ver.indexOf("msie 9.") !== -1) {
					browser = 'ie9';
				} else if (ver.indexOf("msie 10.") !== -1) {
					browser = 'ie10';
				}
			} else if (ua.indexOf('chrome') !== -1 && ua.indexOf('edge') === -1) {
				browser = 'chrome';
			} else if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {
				browser = 'safari';
			} else if (ua.indexOf('opera') !== -1) {
				browser = 'opera';
			} else if (ua.indexOf('firefox') !== -1) {
				browser = 'firefox';
			}

			// check device
			if (ua.indexOf('iphone') !== -1 || ua.indexOf('ipod') !== -1) {
				device = 'iphone';
			} else if (ua.indexOf('ipad') !== -1) {
				device = 'ipad';
			} else if (ua.indexOf('android') !== -1) {
				device = 'android';
			} else if (ua.indexOf('windows') !== -1 && ua.indexOf('phone') !== -1) {
				device = 'windows_phone';
			}

			if (browser) $('html').addClass(browser);
			if (device) $('html').addClass(device);
		}

		/**
   * loadingアイコンを表示する
   *
   * @memberof Common
   * @return {undefined}
   */

	}, {
		key: 'showLoading',
		value: function showLoading() {
			console.log('Common.showLoading');
			var loading = '<div id="loading"><img src="/img/spinner.svg" width="100" height="100"></div>';
			$('body').append(loading);
		}

		/**
   * loadingアイコンを消去
   *
   * @memberof Common
   * @return {undefined}
   */

	}, {
		key: 'hideLoading',
		value: function hideLoading() {
			console.log('Common.hideLoading');
			$('#loading').remove();
		}

		/**
   * 年月から日を取得
   *
   * @memberof Common
   * @return {undefined}
   */

	}, {
		key: 'getDateFromYearMonth',
		value: function getDateFromYearMonth(year, month) {
			var lastday = ['', 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
			if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
				lastday[2] = 29;
			}
			return lastday[month];
		}
	}]);

	return Common;
}();

/* harmony default export */ __webpack_exports__["default"] = (Common);

/***/ }),

/***/ "./mock/admin/src/js/util/_listener.js":
/*!*********************************************!*\
  !*** ./mock/admin/src/js/util/_listener.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file Observer / Listener 系の処理
 */


/**
 * @classname Listener
 * @classdesc Observer / Listner 系、on off trigger を行う
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Listener = function () {
	function Listener() {
		_classCallCheck(this, Listener);

		this._functions = {};
	}

	_createClass(Listener, [{
		key: 'on',


		/**
   * on
   *
   * @memberof Listener
   * @param {string} name - イベント名
   * @param {function} fn - 関数
   * @return {object} - Listener インスタンス
   */
		value: function on(name, fn) {
			this._functions[name] = this._functions[name] || [];
			this._functions[name].push(fn);

			return this;
		}

		/**
   * off
   *
   * @memberof Listener
   * @param {string} name - イベント名
   * @param {function} fn - 関数
   * @return {object} - Listener インスタンス
   */

	}, {
		key: 'off',
		value: function off(name, fn) {
			var functions = this._functions[name];
			if (!functions) {
				return this;
			}
			for (var i = 0, l = functions.length; i < l; i++) {
				var _fn = functions[i];
				if (fn === _fn) {
					functions.splice(i, 1);
					break;
				}
			}
			return this;
		}

		/**
   * Trigger
   * @param {string} name - 送信するイベント名
   * @return {object} - Listener インスタンス
   */

	}, {
		key: 'trigger',
		value: function trigger(name) {
			console.log('trigger: ' + name);
			var functions = this._functions[name] || [];
			for (var i = 0, l = functions.length; i < l; ++i) {
				var fn = functions[i];
				if (fn) {
					fn.apply(this, arguments);
				}
			}
			return this;
		}
	}]);

	return Listener;
}();

/* harmony default export */ __webpack_exports__["default"] = (Listener);

/***/ }),

/***/ "./mock/admin/src/js/view/basic/_anchor-accordion-view.js":
/*!****************************************************************!*\
  !*** ./mock/admin/src/js/view/basic/_anchor-accordion-view.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file もっと見る
 *
 */


/**
 * @classname AnchorAccordionView
 * @classdesc もっと見る
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnchorAccordionView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function AnchorAccordionView($e) {
		var _this = this;

		_classCallCheck(this, AnchorAccordionView);

		console.log('AnchorAccordionView.constructor');
		this._$e = $e;
		this._$target = $($e.attr('data-target'));
		this._closeText = $e.attr('data-close-text');
		this._openText = $e.attr('data-open-text');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(AnchorAccordionView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof AnchorAccordionView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('AnchorAccordionView.onClick');
			if (this._$e.hasClass('open')) {
				this._$e.removeClass('open').text(this._closeText);
				this._$target.slideUp();
			} else {
				this._$e.addClass('open').text(this._openText);
				this._$target.slideDown();
			}
		}
	}]);

	return AnchorAccordionView;
}();

/* harmony default export */ __webpack_exports__["default"] = (AnchorAccordionView);

/***/ }),

/***/ "./mock/admin/src/js/view/basic/_btn-accordion-view.js":
/*!*************************************************************!*\
  !*** ./mock/admin/src/js/view/basic/_btn-accordion-view.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file もっと見る
 *
 */


/**
 * @classname BtnAccordionView
 * @classdesc もっと見る
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BtnAccordionView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function BtnAccordionView($e) {
		var _this = this;

		_classCallCheck(this, BtnAccordionView);

		console.log('BtnAccordionView.constructor');
		this._$e = $e;
		this._$target = $($e.attr('data-target'));
		this._closeText = $e.attr('data-close-text');
		this._openText = $e.attr('data-open-text');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(BtnAccordionView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof BtnAccordionView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('BtnAccordionView.onClick');
			if (this._$e.hasClass('open')) {
				this._$e.removeClass('open');
				this._$target.slideUp();
				if (this._closeText) this._$e.find('span').text(this._closeText);
			} else {
				this._$e.addClass('open');
				this._$target.slideDown();
				if (this._openText) this._$e.find('span').text(this._openText);
			}
		}
	}]);

	return BtnAccordionView;
}();

/* harmony default export */ __webpack_exports__["default"] = (BtnAccordionView);

/***/ }),

/***/ "./mock/admin/src/js/view/basic/_go-top-view.js":
/*!******************************************************!*\
  !*** ./mock/admin/src/js/view/basic/_go-top-view.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file TOPへ戻る
 *
 */


/**
 * @classname GoTopView
 * @classdesc TOPへ戻る
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GoTopView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function GoTopView($e) {
		var _this = this;

		_classCallCheck(this, GoTopView);

		console.log('GoTopView.constructor');
		this._$e = $e;
		this._height = $(window).height() * .7;
		this._scroll = 0;
		$(window).on('scroll', function () {
			_this.onScroll();
		});
	}

	_createClass(GoTopView, [{
		key: 'onScroll',


		/**
   * スクロールのコールバック
   *
   * @memberof GoTopView
   */
		value: function onScroll() {
			this._scroll = $(window).scrollTop();
			if (this._scroll > this._height) {
				this._$e.fadeIn();
			} else {
				this._$e.fadeOut();
			}
		}
	}]);

	return GoTopView;
}();

/* harmony default export */ __webpack_exports__["default"] = (GoTopView);

/***/ }),

/***/ "./mock/admin/src/js/view/basic/_smooth-scroll-view.js":
/*!*************************************************************!*\
  !*** ./mock/admin/src/js/view/basic/_smooth-scroll-view.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file スムーススクロール
 *
 */


/**
 * @classname SmoothScrollView
 * @classdesc TOPへ戻る
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SmoothScrollView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function SmoothScrollView($e) {
		var _this = this;

		_classCallCheck(this, SmoothScrollView);

		console.log('SmoothScrollView.constructor');
		this._$e = $e;
		$e.on('click', function (e) {
			_this.onClick(e);
		});
	}

	_createClass(SmoothScrollView, [{
		key: 'onClick',


		/**
   * @memberof SmoothScroll
   */
		value: function onClick(e) {
			console.log('SmoothScrollView.onClick');
			e.preventDefault();
			var href = this._$e.attr('href');
			var target = $(href === '#' || href === '' ? 'html' : href);
			var position = target.offset().top - 63;
			$('html, body').animate({ scrollTop: position }, 500, 'swing');
		}
	}]);

	return SmoothScrollView;
}();

/* harmony default export */ __webpack_exports__["default"] = (SmoothScrollView);

/***/ }),

/***/ "./mock/admin/src/js/view/basic/_swal-view.js":
/*!****************************************************!*\
  !*** ./mock/admin/src/js/view/basic/_swal-view.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sweetalert2/dist/sweetalert2.js */ "./node_modules/sweetalert2/dist/sweetalert2.js");
/* harmony import */ var sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0__);
/**
 * @file 共通メッセージ
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname SwalView
 * @classdesc 共通メッセージ
 */

var SwalView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function SwalView($e) {
		_classCallCheck(this, SwalView);

		console.log('SwalView.constructor');
		this._message = $e.attr('data-message');
		if ($e.hasClass('success')) {
			this.success();
		} else if ($e.hasClass('warning')) {
			this.warning();
		} else if ($e.hasClass('error')) {
			this.error();
		}
	}

	_createClass(SwalView, [{
		key: 'success',


		/**
   * 成功メッセージ
   *
   * @memberof SwalView
   * @return {undefined}
   */
		value: function success() {
			console.log('SwalView.success');
			sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0___default.a.fire({
				type: 'success',
				html: this._message,
				confirmButtonColor: '#a5dc86',
				confirmButtonText: '閉じる'
			});
		}
	}, {
		key: 'warning',


		/**
   * warningメッセージ
   *
   * @memberof SwalView
   * @return {undefined}
   */
		value: function warning() {
			console.log('SwalView.warning');
			sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0___default.a.fire({
				type: 'warning',
				html: this._message,
				confirmButtonColor: '#f8bb86',
				confirmButtonText: '閉じる'
			});
		}
	}, {
		key: 'error',


		/**
   * エラーメッセージ
   *
   * @memberof SwalView
   * @return {undefined}
   */
		value: function error() {
			console.log('SwalView.error');
			sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0___default.a.fire({
				type: 'error',
				title: 'エラー',
				html: this._message,
				confirmButtonColor: '#f27474',
				confirmButtonText: '閉じる'
			});
		}
	}]);

	return SwalView;
}();

/* harmony default export */ __webpack_exports__["default"] = (SwalView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-add-answer-view.js":
/*!**************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-add-answer-view.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file 回答追加
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormAddAnswerView
 * @classdesc 回答追加
 */

var FormAddAnswerView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormAddAnswerView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormAddAnswerView);

		console.log('FormAddAnswerView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._$answer = $e.closest('.list-item');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(FormAddAnswerView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof FormAddAnswerView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('FormAddAnswerView.onClick');
			var filled = true;
			this._$answer.find('.answer_text').each(function (idx, e) {
				var $e = $(e);
				if ($e.val() === '') filled = false;
			});
			if (filled) {
				this._controller.addAnswer();
			} else {
				_util_common__WEBPACK_IMPORTED_MODULE_0__["default"].showErrorModal('全ての回答を埋めてから回答を追加してください。');
			}
		}
	}]);

	return FormAddAnswerView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormAddAnswerView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-add-question-view.js":
/*!****************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-add-question-view.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file 設問追加
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormAddQuestionView
 * @classdesc 設問追加
 */

var FormAddQuestionView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormAddQuestionView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormAddQuestionView);

		console.log('FormAddQuestionView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._question = $e.closest('.list-item');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(FormAddQuestionView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof FormAddQuestionView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('FormAddQuestionView.onClick');
			var filled = true;
			if (this._question.find('.question_text').val() === '') filled = false;
			this._question.find('.answer_text').each(function (idx, e) {
				var $e = $(e);
				if ($e.val() === '') filled = false;
			});
			if (filled) {
				this._question.find('.question_text').prop('readonly', true);
				this._question.find('.answer_text').each(function (idx, e) {
					var $e = $(e);
					$e.prop('readonly', true);
				});
				this._question.find('.custom-control-input').each(function (idx, e) {
					var $e = $(e);
					$e.prop('disabled', true);
				});
				this._controller.addQuestion();
			} else {
				_util_common__WEBPACK_IMPORTED_MODULE_0__["default"].showErrorModal('全ての項目を設定してから質問を追加してください。');
			}
		}
	}]);

	return FormAddQuestionView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormAddQuestionView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-counter-view.js":
/*!***********************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-counter-view.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 文字カウンター
 */


/**
 * @classname FormCounterView
 * @classdesc 文字カウンター
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormZipView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormZipView($e) {
		var _this = this;

		_classCallCheck(this, FormZipView);

		console.log('FormCounterView.constructor');
		this._$e = $e;
		this._max = parseInt($e.attr('maxlength'));
		$e.removeAttr('maxlength');
		var $formGroup = $e.closest('.form-group');
		if ($formGroup.find('.w-100')[0]) {
			$formGroup.find('.w-100').eq(0).prepend('<div class="col-sm-8 offset-sm-3 mb-2 tar"><p class="text-counter">\u6B8B\u308A<span>' + this._max + '</span>\u6587\u5B57</p></div>');
		} else {
			$formGroup.append('<div class="w-100"><div class="col-sm-8 offset-sm-3 tar"><p class="text-counter">\u6B8B\u308A<span>' + this._max + '</span>\u6587\u5B57</p></div></div>');
		}
		this._$counter = $formGroup.find('.text-counter span');
		$e.on('keyup', function () {
			return _this.calculate();
		});
		$e.on('blur', function () {
			return _this.calculate();
		});
		this.calculate();
	}

	_createClass(FormZipView, [{
		key: 'calculate',


		/**
   * keyupのコールバック
   *
   * @memberof FormDiffModalView
   * @return {undefined}
   */
		value: function calculate() {
			console.log('FormCounterView.calculate');
			var value = this._$e.val();
			if (value !== '') {
				var len = value.length;
				if (len > this._max) {
					value = value.substr(0, this._max);
					this._$e.val(value);
					len = this._max;
				}
				var rest = this._max - len;
				console.log(rest);
				this._$counter.text(rest);
			} else {
				this._$counter.text(this._max);
			}
		}
	}]);

	return FormZipView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormZipView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-datepicker-view.js":
/*!**************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-datepicker-view.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file Form送信
 */


/**
 * @classname FormDatepickerView
 * @classdesc datepicker
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormDatepickerView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  * @param {object} controller - controllerオブジェクト
  */
	function FormDatepickerView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormDatepickerView);

		console.log('FormDatepickerView.constructor');
		this._$e = $e;
		this._controller = controller;
		var clear = !!$e.attr('data-clear');
		var minDate = this._$e.attr('data-mindate') || '';
		var maxDate = this._$e.attr('data-maxdate') || '';
		if (minDate !== '') {
			if (minDate.match(/\d{4}\/\d{2}\/\d{2}/)) {
				console.log('minDate match date');
				minDate = minDate.split('/');
				minDate = new Date(minDate[0], minDate[1] - 1, minDate[2], now.getHours(), 0, 0);
			} else if (minDate.match(/^-?\d+$/)) {
				console.log('minDate match number');
				var mindate = new Date();
				mindate.setDate(mindate.getDate() + parseInt(minDate, 10));
				mindate.setMinutes(0);
				mindate.setSeconds(0);
				minDate = mindate;
			}
		}
		if (maxDate !== '') {
			if (maxDate.match(/\d{4}\/\d{2}\/\d{2}/)) {
				console.log('maxDate match date');
				maxDate = maxDate.split('/');
				maxDate = new Date(maxDate[0], maxDate[1] - 1, maxDate[2], now.getHours(), 0, 0);
			} else if (maxDate.match(/^-?\d+$/)) {
				console.log('maxDate match number');
				var maxdate = new Date();
				maxdate.setDate(maxdate.getDate() + parseInt(maxDate, 10));
				maxdate.setMinutes(0);
				maxdate.setSeconds(0);
				maxDate = maxdate;
			} else {
				maxDate = '';
			}
		}
		var time = !!$e.attr('data-time');
		var navTitles = {
			days: 'yyyy 年 mm 月',
			months: 'yyyy',
			years: 'yyyy1 - yyyy2'
		};
		var opts = {
			language: 'ja',
			position: 'bottom left',
			minDate: minDate,
			maxDate: maxDate,
			timepicker: time,
			autoClose: true,
			clearButton: clear,
			navTitles: navTitles,
			onShow: function onShow(inst, animationCompleted) {
				if (!clear) {
					if (animationCompleted) {
						var _value = $e.val();
						$e.attr('data-value', _value);
					}
				}
			},
			onHide: function onHide(inst, animationCompleted) {
				if (!clear) {
					if (!animationCompleted) {
						if (!$e.val() || $e.val() === '') {
							$e.val($e.attr('data-value'));
						}
						$e.removeAttr('data-value');
					}
				}
			},
			onSelect: function onSelect(inst, animationCompleted) {
				$e.removeClass('is-invalid').closest('.col-sm-3').find('.error-tip').removeClass('show').find('.error-tip-inner').text('');
				$e.closest('.col-sm-4').find('.error-tip').removeClass('show').find('.error-tip-inner').text('');
			}
		};
		this._datepicker = $e.datepicker(opts);
		var value = $e.val();
		if (value) {
			// 値が入っている場合は時間や分を削る
			if (time) {
				$e.val(value.substr(0, 16));
			} else {
				$e.val(value.substr(0, 10));
			}
			console.log($e.val());
			// その日付を選択済にする
			if (time) {
				var tmp = value.split(' ');
				var tmp2 = tmp[0].split('-');
				var tmp3 = tmp[1].split(':');
				value = new Date(tmp2[0], tmp2[1] - 1, tmp2[2], tmp3[0], tmp3[1], 0);
			} else {
				value = value.split('-');
				value = new Date(value[0], value[1] - 1, value[2], 0, 0, 0);
			}
		}
		console.log(value);
		var dp = this._$e.datepicker().data('datepicker');
		dp.selectDate(value);
		this._$e.next('.input-group-append').on('click', function () {
			return _this.onClick();
		});
	}

	/**
  * クリックのコールバック
  *
  * @memberof FormDatepickerView
  * @return {undefined}
  */


	_createClass(FormDatepickerView, [{
		key: 'onClick',
		value: function onClick() {
			console.log('FormDatepickerView.onClick');
			if (this._$e.attr('disabled')) return;
			var value = this._$e.val();
			var dp = this._$e.datepicker().data('datepicker');
			dp.show();
			if (value !== '') {
				this._$e.attr('data-value', 'value');
				this._$e.val(value);
			}
		}
	}]);

	return FormDatepickerView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormDatepickerView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-delete-answer-view.js":
/*!*****************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-delete-answer-view.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file 回答削除
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormDeleteAnswerView
 * @classdesc 回答削除
 */

var FormDeleteAnswerView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormDeleteAnswerView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormDeleteAnswerView);

		console.log('FormDeleteAnswerView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._answer = $e.closest('.list-item');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(FormDeleteAnswerView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof FormDeleteAnswerView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('FormDeleteAnswerView.onClick');
			var $listAnswer = this._$e.closest('.list-answers');
			this._controller._answerNum = parseInt($listAnswer.attr('data-answer-num'));
			this._controller._answerNum--;
			$listAnswer.attr('data-answer-num', this._controller._answerNum);
			this._answer.remove();
			$listAnswer.find('.list-item:last-child .btn').show();
			var checked = false;
			$listAnswer.find('.custom-control-input').each(function (idx, e) {
				var $e = $(e);
				if ($e.prop('checked')) checked = true;
			});
			if (!checked) {
				$listAnswer.find('.list-item:first-child .custom-control-input').prop('checked', true);
			}
		}
	}]);

	return FormDeleteAnswerView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormDeleteAnswerView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-delete-question-view.js":
/*!*******************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-delete-question-view.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file 設問追加
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormDeleteQuestionView
 * @classdesc 設問追加
 */

var FormDeleteQuestionView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormDeleteQuestionView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormDeleteQuestionView);

		console.log('FormDeleteQuestionView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._question = $e.closest('.list-item');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(FormDeleteQuestionView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof FormDeleteQuestionView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('FormDeleteQuestionView.onClick');
			var filled = true;
			this._question.remove();
			this._controller._questionNum--;
			$('.list-question').attr('data-question-num', this._controller._questionNum);
			var $lastQuestion = $('.list-question > .list-item:last-child');
			$lastQuestion.find('.question_text').removeAttr('readonly');
			$lastQuestion.find('.answer_text').removeAttr('readonly');
			$lastQuestion.find('.custom-control-input').removeAttr('disabled');
			$lastQuestion.find('.btn-add-question').show();
			$lastQuestion.find('.btn-delete-question').show();
			$lastQuestion.find('.list-item:last-child .btn').show();
		}
	}]);

	return FormDeleteQuestionView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormDeleteQuestionView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-file-drop-view.js":
/*!*************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-file-drop-view.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/* harmony import */ var _form_validate_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_form-validate-view */ "./mock/admin/src/js/view/form/_form-validate-view.js");
/* harmony import */ var _template_template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../template/_template */ "./mock/admin/src/js/template/_template.js");
/**
 * @file ファイルドロップ
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }






/**
 * @classname FormFileDropView
 * @classdesc ファイルドロップ
 */

var FormFileDropView = function () {
	/**
  * @constructor
  * @param {object} controller - コントローラー
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormFileDropView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormFileDropView);

		console.log('FormFileDropView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._template = new _template_template__WEBPACK_IMPORTED_MODULE_3__["default"]();
		this._$blockFileUpload = $e.closest('.block-file-upload');
		this._$inputFile = this._$blockFileUpload.find('input');
		this._$inputFileWrap = this._$blockFileUpload.find('.block-file-input');
		if (this._$e.hasClass('file-upload-movie')) {
			this._inputFile = '\n\t\t\t<input class="file-validate" type="file" accept="video/mp4" name="movie_path" style="display: none;">\n\t\t\t<input id="movieID" type="hidden" name="movie_path" value="bbbbb">';
		} else {
			this._inputFile = '<input class="file-validate" type="file" accept="application/pdf, image/*, video/mp4" style="display: none;">';
		}
		this._type = parseInt($e.attr('data-type'));
		this._fileType = null;
		this._orientation = 1;
		this._$photoArea = $e.closest('.form-group').find('.block-photo-area');
		this._$modal = $('.modal-movie');
		this._$e.on('dragover', function (e) {
			return _this.onDragover(e);
		});
		this._$e.on('dragleave', function () {
			return _this.onDragleave();
		});
		this._$e.on('drop', function (e) {
			return _this.onDrop(e);
		});
		this._$e.on('click', function (e) {
			return _this.onClick(e);
		});
		this._controller.on('uploadMovieComplete', function () {
			_this.onUploadMovieComplete();
		});
		this._controller.on('uploadPouchComplete', function () {
			_this.onUploadPouchComplete();
		});
		this._controller.on('uploadScriptComplete', function () {
			_this.onUploadScriptComplete();
		});
		this._controller.on('uploadPdfComplete', function () {
			_this.onUploadPdfComplete();
		});
		this._$inputFile.on('change', function (e) {
			return _this.onChange(e);
		});
		this._$modal.on('hidden.bs.modal', function () {
			_this._$modal.find('.block-video-area').html('');
			_this._$modal.find('span.text-title').text('');
		});
	}

	_createClass(FormFileDropView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onClick(e) {
			console.log('FormFileDropView.onClick');
			e.preventDefault();
			e.stopPropagation();
			console.log('inputFile:');
			console.log(this._$inputFile);
			this._$inputFile.click();
		}

		/**
   * ドラッグオーバーのコールバック
   *
   * @memberof FormFileDropView
   * @param {object} e - イベント
   * @return {undefined}
   */

	}, {
		key: 'onDragover',
		value: function onDragover(e) {
			e = e.originalEvent;
			e.dataTransfer.dropEffect = 'copy';
			e.preventDefault();
			this._$e.addClass('dragover');
		}
	}, {
		key: 'onDragleave',


		/**
   * ドラッグリーブのコールバック
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onDragleave() {
			this._$e.removeClass('dragover');
		}
	}, {
		key: 'onDrop',


		/**
   * ドロップのコールバック
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onDrop(e) {
			console.log('FormFileDropView.onDrop');
			e = e.originalEvent;
			e.preventDefault();
			this._$e.removeClass('dragover');
			this._files = e.dataTransfer.files;
			if (this._files.length > 1) {
				_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal('画像は1枚ずつあげてください。');
				return;
			}
			var file = this._files[0];
			var maxMB = window.const.file.MAX_MB;
			var maxSize = maxMB * 1024 * 1024;
			if (file.size > maxSize) {
				_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal('\u753B\u50CF\u30B5\u30A4\u30BA\u306F' + maxMB + 'MB\u4EE5\u4E0B\u306E\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002');
				return;
			}
			this._fileName = file.name;
			var mime = file.type;
			if (this._$e.hasClass('file-upload-credo')) {
				console.log(mime);
				if (mime.match(/^video\/mp4/) || mime.match(/^image/) || mime.match(/application\/pdf/)) {} else {
					_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal('\u52D5\u753B\u30D5\u30A1\u30A4\u30EB\u3001PDF\u3001\u753B\u50CF\u30D5\u30A1\u30A4\u30EB\u306E\u307F\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u53EF\u80FD\u3067\u3059\u3002');
					return;
				}
				if (mime.match(/^video\/mp4/)) {
					this._fileType = 'video';
				} else {
					this._fileType = 'pdf';
				}
			} else if (this._$e.hasClass('file-upload-pdf')) {
				console.log(mime);
				if (mime.match(/^image/) || mime.match(/application\/pdf/)) {} else {
					_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal('PDF\u304B\u753B\u50CF\u30D5\u30A1\u30A4\u30EB\u306E\u307F\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u53EF\u80FD\u3067\u3059\u3002');
					return;
				}
			}
			this._controller.uploadFile(file, this._type);
		}
	}, {
		key: 'onChange',


		/**
   * ファイル変更のコールバック
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onChange(e) {
			console.log('FormFileDropView.onChange');
			var file = e.target.files[0];
			var maxMB = window.const.file.MAX_MB;
			var maxSize = maxMB * 1024 * 1024;
			if (file.size > maxSize) {
				_util_common__WEBPACK_IMPORTED_MODULE_1__["default"].showErrorModal('\u753B\u50CF\u30B5\u30A4\u30BA\u306F' + maxMB + 'MB\u4EE5\u4E0B\u306E\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002');
				return;
			}
			var mime = file.type;
			if (mime.match(/^video\/mp4/)) {
				this._fileType = 'video';
			} else {
				this._fileType = 'pdf';
			}
			this._fileName = file.name;
			var reader = new FileReader();
			reader.onload = this._controller.uploadFile(file, this._type);
		}
	}, {
		key: 'onUploadMovieComplete',


		/**
   * 動画の表示
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onUploadMovieComplete() {
			var _this2 = this;

			console.log('FormFileDropView.onUploadMovieComplete');
			var movieData = this._controller._movieData;
			var movie = '<div class="upload-movie-wrap"><p class="text small">\u9078\u629E\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\uFF1A</p><p class="text small">' + this._fileName + '</p><button type="button" class="btn btn-main btn-movie btn-sm mt10" data-url="' + movieData.url + '" data-toggle="modal" data-target=".modal-movie">\u52D5\u753B\u8996\u8074</button><input type="hidden" name="movie_path" value="' + movieData.path + '"></div>';
			this._$photoArea.html(movie);
			this._$e.closest('.form-group').find('.error-tip').removeClass('show').find('.error-tip-inner').text('');
			this._$inputFileWrap.html(this._inputFile);
			this._$inputFile = this._$blockFileUpload.find('input');
			this._$inputFile.on('change', function (e) {
				return _this2.onChange(e);
			});
			$('.btn-movie').on('click', function (e) {
				return _this2.watchMovie(e);
			});
			$('.block-file-input #movieID').attr('value', movieData.path);
		}
	}, {
		key: 'onUploadPouchComplete',


		/**
   * パウチの表示
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onUploadPouchComplete() {
			var _this3 = this;

			console.log('FormFileDropView.onUploadPouchComplete');
			var pouchData = this._controller._pouchData;
			var pouch = '<div class="upload-pdf-wrap"><p class="text small">\u9078\u629E\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\uFF1A</p><p class="text small"><a href="' + pouchData.url + '" target="_blank">' + this._fileName + '</a></p><input type="hidden" name="pouch_path" value="' + pouchData.path + '"></div>';
			this._$photoArea.html(pouch);
			this._$e.closest('.form-group').find('.error-tip').removeClass('show').find('.error-tip-inner').text('');
			this._$inputFileWrap.html(this._inputFile);
			this._$inputFile = this._$blockFileUpload.find('input');
			this._$inputFile.on('change', function (e) {
				return _this3.onChange(e);
			});
		}
	}, {
		key: 'onUploadScriptComplete',


		/**
   * トークスクリプトの表示
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onUploadScriptComplete() {
			var _this4 = this;

			console.log('FormFileDropView.onUploadScriptComplete');
			var scriptData = this._controller._scriptData;
			var script = '<div class="upload-pdf-wrap"><p class="text small">\u9078\u629E\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\uFF1A</p><p class="text small"><a href="' + scriptData.url + '" target="_blank">' + this._fileName + '</a></p><input type="hidden" name="script_path" value="' + scriptData.path + '"></div>';
			this._$photoArea.html(script);
			this._$e.closest('.form-group').find('.error-tip').removeClass('show').find('.error-tip-inner').text('');
			this._$inputFileWrap.html(this._inputFile);
			this._$inputFile = this._$blockFileUpload.find('input');
			this._$inputFile.on('change', function (e) {
				return _this4.onChange(e);
			});
		}
	}, {
		key: 'onUploadPdfComplete',


		/**
   * クレド／VISIONの表示
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function onUploadPdfComplete() {
			var _this5 = this;

			console.log('FormFileDropView.onUploadPdfComplete');
			var pdfData = this._controller._pdfData;
			var pdf = '<div class="upload-pdf-wrap"><p class="text small">\u9078\u629E\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\uFF1A</p><p class="text small"><a href="' + pdfData.url + '" target="_blank">' + this._fileName + '</a></p><input type="hidden" name="pdf_path" value="' + pdfData.path + '"></div>';
			if (this._fileType === 'video') pdf = '<div class="upload-pdf-wrap"><p class="text small">\u9078\u629E\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\uFF1A</p><p class="text small">' + this._fileName + '</p><button type="button" class="btn btn-main btn-movie btn-sm mt10" data-url="' + pdfData.url + '" data-toggle="modal" data-target=".modal-movie">\u52D5\u753B\u8996\u8074</button><input type="hidden" name="pdf_path" value="' + pdfData.path + '"></div>';
			this._$photoArea.html(pdf);
			this._$e.closest('.form-group').find('.error-tip').removeClass('show').find('.error-tip-inner').text('');
			this._$inputFileWrap.html(this._inputFile);
			this._$inputFile = this._$blockFileUpload.find('input');
			this._$inputFile.on('change', function (e) {
				return _this5.onChange(e);
			});
			$('.btn-movie').on('click', function (e) {
				return _this5.watchMovie(e);
			});
		}
	}, {
		key: 'watchMovie',


		/**
   * 動画視聴
   *
   * @memberof FormFileDropView
   * @return {undefined}
   */
		value: function watchMovie(e) {
			console.log('FormFileDropView.watchMovie');
			var $e = $(e.currentTarget);
			var url = $e.attr('data-url');
			var video = '\n<video controls autoplay class="movie-player">\n\t<source src="' + url + '">\n\t<p>\u52D5\u753B\u3092\u518D\u751F\u3059\u308B\u306B\u306F\u3001video\u30BF\u30B0\u3092\u30B5\u30DD\u30FC\u30C8\u3057\u305F\u30D6\u30E9\u30A6\u30B6\u304C\u5FC5\u8981\u3067\u3059\u3002</p>\n</video>';
			this._$modal.find('.block-video-area').html(video);
			this._$modal.find('span.text-title').text(this._name);
		}
	}]);

	return FormFileDropView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormFileDropView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-get-base-view.js":
/*!************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-get-base-view.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_apply_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_apply-class */ "./mock/admin/src/js/util/_apply-class.js");
/* harmony import */ var _form_select2_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_form-select2-view */ "./mock/admin/src/js/view/form/_form-select2-view.js");
/* harmony import */ var _form_validate_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_form-validate-view */ "./mock/admin/src/js/view/form/_form-validate-view.js");
/**
 * @file GetBaseView
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





/**
 * @classname GetBaseView
 * @classdesc GetBaseView
 */

var GetBaseView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  * @param {object} controller - controllerオブジェクト
  */
	function GetBaseView($e, controller) {
		var _this = this;

		_classCallCheck(this, GetBaseView);

		console.log('GetBaseView.constructor');
		this._$e = $e;
		this._controller = controller;
		$e.on('change', function () {
			return _this.onChange();
		});
		controller.on('getBaseComplete', function () {
			return _this.setBase();
		});
	}

	_createClass(GetBaseView, [{
		key: 'onChange',


		/**
   * 変更のコールバック
   *
   * @memberof GetBaseView
   * @return {undefined}
   */
		value: function onChange() {
			console.log('GetBaseView.onChange');
			var organizationId = parseInt(this._$e.val());
			if (this._$e.hasClass('type')) {
				if (organizationId === 1) {
					this.getBase(1);
				} else if (organizationId === 2) {
					this.getBase(2);
				} else {
					this.clearBase();
				}
			} else {
				if (organizationId === 5 || organizationId === 7) {
					this.getBase(1);
				} else if (organizationId === 6 || organizationId === 8) {
					this.getBase(2);
				} else {
					this.clearBase();
				}
			}
		}
	}, {
		key: 'getBase',


		/**
   * 事務局取得
   *
   * @memberof GetBaseView
   * @return {undefined}
   */
		value: function getBase(type) {
			console.log('GetBaseView.getBase');
			this._controller.getBase(type);
		}
	}, {
		key: 'setBase',


		/**
   * 事務局設定
   *
   * @memberof GetBaseView
   * @return {undefined}
   */
		value: function setBase() {
			console.log('GetBaseView.setBase');
			var base = this._controller._base.base;
			var options = '<option value="">選択してください</option>';
			if (this._$e.hasClass('type')) options = '<option value="0">全事務局向け</option>';
			for (var i = 0; i < base.length; i++) {
				options += '<option value="' + base[i].base_id + '">' + base[i].base_name + '</option>';
			}
			var $select = '<select class="form-control validate select2 base_id" id="base_id" name="base_id" data-validate="empty"></select>';
			if (this._$e.attr('data-search-type') === 'select') {
				$select = '<select class="form-control validate select2 base_id" id="base_id" name="base_id" data-search-item="base_id" data-search-type="select"></select>';
			}
			$('.base-select-wrap').html($select);
			var $baseId = $('#base_id');
			$baseId.html(options);
			var FormController = this._controller;
			_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_form_validate_view__WEBPACK_IMPORTED_MODULE_2__["default"], $baseId, [$baseId, FormController]);
			_util_apply_class__WEBPACK_IMPORTED_MODULE_0__["default"].apply(_form_select2_view__WEBPACK_IMPORTED_MODULE_1__["default"], $baseId, [$baseId, FormController]);
		}
	}, {
		key: 'clearBase',


		/**
   * 店舗消去
   *
   * @memberof GetBaseView
   * @return {undefined}
   */
		value: function clearBase() {
			console.log('GetBaseView.clearBase');
			$('.base-select-wrap').html('');
		}
	}]);

	return GetBaseView;
}();

/* harmony default export */ __webpack_exports__["default"] = (GetBaseView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-postcode-view.js":
/*!************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-postcode-view.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 郵便番号分割
 */


/**
 * @classname FormPostCodeView
 * @classdesc 郵便番号分割
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormPostCodeView =
/**
 * @constructor
 * @param {jQuery} $e - 該当する jQuery オブジェクト
 */
function FormPostCodeView($e) {
	_classCallCheck(this, FormPostCodeView);

	console.log('FormPostCodeView.constructor');
	if ($e.val() && $e.val() !== '') {
		var postCode = $e.val();
		console.log(postCode);
		postCode = postCode.split('-');
		var id = $e.attr('id');
		console.log(id + ' is divided (' + postCode[0] + '/' + postCode[1] + ')');
		$('#' + id + '1').val(postCode[0]);
		$('#' + id + '2').val(postCode[1]);
	}
};

/* harmony default export */ __webpack_exports__["default"] = (FormPostCodeView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-select-toggle-view.js":
/*!*****************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-select-toggle-view.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file トグル（select）
 */


/**
 * @classname FormSelectToggleView
 * @classdesc トグル（select）
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormSelectToggleView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormSelectToggleView($e) {
		var _this = this;

		_classCallCheck(this, FormSelectToggleView);

		console.log('FormSelectToggleView.constructor');
		this._$e = $e;
		this._$target = $($e.attr('data-select-toggle'));
		this._trigger = $e.attr('data-select-trigger');
		$e.on('change', function () {
			return _this.onChange();
		});
	}

	/**
  * changeのコールバック
  *
  * @memberof FormSelectToggleView
  * @return {undefined}
  */


	_createClass(FormSelectToggleView, [{
		key: 'onChange',
		value: function onChange() {
			console.log('FormSelectToggleView.onChange');
			if (this._$e.val() === this._trigger) {
				this._$target.slideDown().find('.validate').removeClass('ignore-form');
				this._$target.find('.error-tip').removeClass('show').find('.error-tip-inner').html('');
			} else {
				this._$target.slideUp().find('.validate').addClass('ignore-form').removeClass('is-invalid').val('');
				this._$target.find('.error-tip').removeClass('show').find('.error-tip-inner').html('');
			}
		}
	}]);

	return FormSelectToggleView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormSelectToggleView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-select2-view.js":
/*!***********************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-select2-view.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file select2
 *
 */


/**
 * @classname Select2View
 * @classdesc select2
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Select2View =
/**
 * @constructor
 * @param {jQuery} $e - 該当する jQuery オブジェクト
 * @param {object} controller - controllerオブジェクト
 */
function Select2View($e, controller) {
	_classCallCheck(this, Select2View);

	console.log('Select2View.constructor');
	this._$e = $e;
	this._controller = controller;
	controller._$select = $e.select2();
	var value = $e.val();
	if (value && value !== '') controller._$select.val($e.val()).trigger('change');
};

/* harmony default export */ __webpack_exports__["default"] = (Select2View);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-separate-comma-view.js":
/*!******************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-separate-comma-view.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file 3桁区切り
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormSeparateCommaView
 * @classdesc 3桁区切り
 */

var FormSeparateCommaView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormSeparateCommaView($e) {
		var _this = this;

		_classCallCheck(this, FormSeparateCommaView);

		console.log('FormSeparateCommaView.constructor');
		this._$e = $e;
		$e.on('blur', function () {
			return _this.onBlur();
		});
	}

	_createClass(FormSeparateCommaView, [{
		key: 'onBlur',


		/**
   * ブラーのコールバック
   *
   * @memberof FormAddFormGroupView
   * @return {undefined}
   */
		value: function onBlur() {
			console.log('FormSeparateCommaView.onBlur');
			if (!this._$e.val() || this._$e.val() === '') return;
			var value = this._$e.val().replace(/[^0-9]/g, '');
			this._$e.val(_util_common__WEBPACK_IMPORTED_MODULE_0__["default"].separatedByComma(value));
		}
	}]);

	return FormSeparateCommaView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormSeparateCommaView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-submit-view.js":
/*!**********************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-submit-view.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/* harmony import */ var _form_form_shop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form/_form-shop */ "./mock/admin/src/js/view/form/form/_form-shop.js");
/* harmony import */ var _form_form_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./form/_form-item */ "./mock/admin/src/js/view/form/form/_form-item.js");
/* harmony import */ var _form_form_company__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./form/_form-company */ "./mock/admin/src/js/view/form/form/_form-company.js");
/**
 * @file Form送信
 */

// utility class

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



// 個別処理ファイルの読み込み




/**
 * @classname FormSubmitView
 * @classdesc フォームサブミット
 */

var FormSubmitView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  * @param {object} controller - コントローラー
  */
	function FormSubmitView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormSubmitView);

		console.log('FormSubmitView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._form = $e.attr('data-form');
		this._$form = $(this._form);
		this._process = $e.attr('data-process') || null;
		this._timing = $e.attr('data-timing') || null;
		this._submit = true;
		this._validate = false;
		if (this._process === 'true') {
			// 個別処理ファイルのアクティベート
			switch (this._form) {
				case '#form-shop':
					this._processing = new _form_form_shop__WEBPACK_IMPORTED_MODULE_1__["default"](controller);
					break;
				case '#form-item':
					this._processing = new _form_form_item__WEBPACK_IMPORTED_MODULE_2__["default"](controller);
					break;
				case '#form-company':
					this._processing = new _form_form_company__WEBPACK_IMPORTED_MODULE_3__["default"](controller);
					break;
			}
		}
		this._$e.on('click', function (e) {
			e.preventDefault();
			if (_this._$e.hasClass('disabled')) return;
			if (!$e.hasClass('clicked')) {
				$e.addClass('clicked');
				$e.append('<i class="fa fa-spinner fa-pulse ml-2">');
				_this._flg = false;
				_this.onClick();
			}
		});
		this._flg = true;
		this._controller.on('completePreProcessing', function () {
			if (_this._controller._submit === _this._$e) {
				_this.validate();
			}
		});
		this._controller.on('completeValidate', function () {
			if (_this._controller._submit === _this._$e) {
				_this.completeValidate();
			}
		});
		this._controller.on('completePostProcessing', function () {
			if (_this._controller._submit === _this._$e) {
				_this.addMinutes();
			}
		});
		this._controller.on('initialize', function () {
			if (_this._controller._submit === _this._$e) {
				_this.initialize();
			}
		});
		if ($('html').hasClass('beforeunload')) {
			window.addEventListener('beforeunload', function (e) {
				if (_this._flg) {
					e.returnValue = '';
				}
			});
		}
		this.checkHasError();
	}

	_createClass(FormSubmitView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('FormSubmitView.onClick');
			console.log(this._$e);
			console.log(this._form);
			this._controller._submit = this._$e;
			if (this._process === 'true') {
				if (this._timing === 'pre' || this._timing === 'both') {
					console.log('前処理実施');
					this._processing.preProcessing(this._$form);
				} else {
					console.log('前処理SKIP');
					this.validate(this._$form);
				}
			} else {
				console.log('前処理SKIP');
				this.validate(this._$form);
			}
		}
	}, {
		key: 'validate',


		/**
   * バリデーションチェック
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function validate() {
			if (this._validate) return;
			this._validate = true;
			console.log('FormSubmitView.validate');
			console.log('バリデーションチェック開始');
			this._controller.validate(this._$form);
		}
	}, {
		key: 'completeValidate',


		/**
   * バリデーション完了
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function completeValidate() {
			var _this2 = this;

			console.log('FormSubmitView.completeValidate');
			console.log('バリデーションチェック完了');
			if (this._$form.find('.validate').hasClass('is-invalid')) this._submit = false;
			this._hasError = false;
			$('.validate').each(function (idx, e) {
				var $e = $(e);
				if ($e.hasClass('has-error')) {
					_this2._hasError = true;
				}
			});
			if (this._$form.find('.validate').hasClass('has-error')) this._hasError = true;
			if (this._hasError) {
				_util_common__WEBPACK_IMPORTED_MODULE_0__["default"].showReviseModal('修正がされていない箇所があります');
				this._flg = true;
				this.initialize();
			} else {
				if (this._submit) {
					console.log('エラーチェック：エラーなし');
					this.postProcessing();
				} else {
					_util_common__WEBPACK_IMPORTED_MODULE_0__["default"].showErrorModal('入力項目に誤りがあります');
					this._flg = true;
					this.initialize();
				}
			}
		}
	}, {
		key: 'postProcessing',


		/**
   * 後処理
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function postProcessing() {
			console.log('FormSubmitView.postProcessing');
			console.log('process: ' + this._process);
			if (this._process === 'true') {
				if (this._timing === 'post' || this._timing === 'both') {
					console.log('後処理実施');
					this._processing.postProcessing(this._$form);
				} else {
					console.log('後処理SKIP');
					this.addMinutes();
				}
			} else {
				console.log('後処理SKIP');
				this.addMinutes();
			}
		}
	}, {
		key: 'addMinutes',


		/**
   * 分を追加する
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function addMinutes() {
			var _this3 = this;

			console.log('FormSubmitView.addMinutes');
			$('input[data-time=true]').each(function (idx, e) {
				var val = $(e).val();
				if (val.length === 16) {
					val += ':00';
					console.log(val);
					$(_this3).val(val);
				}
			});
			this.submit();
		}
	}, {
		key: 'submit',


		/**
   * submit
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function submit() {
			var _this4 = this;

			console.log('FormSubmitView.submit');
			$('.ignore-validate').removeAttr('name');
			console.log('サブミット');
			setTimeout(function () {
				_util_common__WEBPACK_IMPORTED_MODULE_0__["default"].submit(_this4._$form);
				_this4.initialize();
			}, 100);
		}
	}, {
		key: 'initialize',


		/**
   * 初期化
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function initialize() {
			console.log('FormSubmitView.initialize');
			this._submit = true;
			this._validate = false;
			this._controller._$form = null;
			this._controller._submit = null;
			this._flg = true;
			this._$e.removeClass('clicked').find('.fa-spinner.fa-pulse').remove();
		}
	}, {
		key: 'checkHasError',


		/**
   * エラーチェック
   *
   * @memberof FormSubmitView
   * @return {undefined}
   */
		value: function checkHasError() {
			var _this5 = this;

			console.log('FormSubmitView.checkHasError');
			this._hasError = false;
			$('.validate').each(function (idx, e) {
				var $e = $(e);
				if ($e.hasClass('has-error')) {
					_this5._hasError = true;
				}
			});
		}
	}]);

	return FormSubmitView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormSubmitView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-time-divide-view.js":
/*!***************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-time-divide-view.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 時間分割
 */


/**
 * @classname FormTimeDivideView
 * @classdesc 時間分割
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormTimeDivideView =
/**
 * @constructor
 * @param {jQuery} $e - 該当する jQuery オブジェクト
 */
function FormTimeDivideView($e) {
	_classCallCheck(this, FormTimeDivideView);

	console.log('FormTimeDivideView.constructor');
	if ($e.val() && $e.val() !== '') {
		var time = $e.val();
		console.log(time);
		time = time.split(':');
		var id = $e.attr('id');
		console.log(id + ' is divided (' + time[0] + ':' + time[1] + ')');
		$('#' + id + '1').val(time[0]);
		$('#' + id + '2').val(time[1]);
	}
};

/* harmony default export */ __webpack_exports__["default"] = (FormTimeDivideView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-validate-checkbox-view.js":
/*!*********************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-validate-checkbox-view.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file バリデーションチェック（チェックボックス）
 */

// utility class

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormValidateCheckboxView
 * @classdesc バリデーションチェック（チェックボックス）
 */

var FormValidateCheckboxView = function () {

	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  * @param {object} controller - コントローラー
  */
	function FormValidateCheckboxView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormValidateCheckboxView);

		console.log('FormValidateCheckboxView.constructor');
		this._controller = controller;
		this._$e = $e;
		this._$checkbox = $e.find('input[type=checkbox]');
		this._$form = this._$e.closest('form');
		this._$formGroup = this._$e.closest('.form-group');
		this._$checkboxGroup = this._$formGroup.find('input[type=checkbox]');
		this._$errortip = this._$formGroup.find('.error-tip');
		this._$errortipInner = this._$errortip.find('.error-tip-inner');
		this._controller.on('validate', function () {
			return _this.onClick();
		});
		$e.on('click', function () {
			_this.onClick();
		});
	}

	_createClass(FormValidateCheckboxView, [{
		key: 'onClick',


		/**
   * バリデーション実行
   *
   * @memberof FormValidateCheckboxView
   * @return {undefined}
   */
		value: function onClick() {
			if (this._controller._$form && this._controller._$form.attr('id') !== this._$form.attr('id')) return;
			console.log('FormValidateCheckboxView.onClick()');
			if (this._$e.hasClass('ignore-validate')) {
				console.log('ignore validate');
			} else {
				this._error = [];
				var cnt = 0;
				this._$checkboxGroup.each(function (idx, e) {
					var $e = $(e);
					if ($e.prop('checked')) {
						cnt++;
					}
				});
				if (cnt === 0) {
					this.showError();
				} else {
					this.hideError();
				}
			}
		}
	}, {
		key: 'showError',


		/**
   * エラーを表示する
   *
   * @memberof FormValidateCheckboxView
   * @return {undefined}
   */
		value: function showError() {
			this._$checkboxGroup.addClass('is-invalid');
			this._$errortipInner.html('<p>この項目は必須です</p>');
			this._$errortip.css('top', '-30px').addClass('show');
		}
	}, {
		key: 'hideError',


		/**
   * エラーを非表示にする
   *
   * @memberof FormValidateCheckboxView
   * @return {undefined}
   */
		value: function hideError() {
			this._$checkboxGroup.removeClass('is-invalid');
			this._$errortip.removeClass('show').css('top', '-30px');
			this._$errortipInner.html('');
		}
	}]);

	return FormValidateCheckboxView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormValidateCheckboxView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-validate-view.js":
/*!************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-validate-view.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file バリデーションチェック
 */

// utility class

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname FormValidateView
 * @classdesc フォームバリデーション
 */

var FormValidateView = function () {

	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  * @param {object} controller - コントローラー
  */
	function FormValidateView($e, controller) {
		var _this = this;

		_classCallCheck(this, FormValidateView);

		console.log('FormValidateView.constructor');
		this._controller = controller;
		this._$e = $e;
		this._validates = $e.attr('data-validate');
		if (!this._validates || this._validates === '') return;
		this._element = $e.prop('tagName').toLowerCase();
		this._type = $e.attr('type') || null;
		this._value = '';
		this._error = [];
		this._$form = this._$e.closest('form');
		this._$formGroup = this._$e.closest('.form-group');
		this._$errortip = this._$formGroup.find('.error-tip');
		this._$errortipInner = this._$errortip.find('.error-tip-inner');
		this._errorMessage = {
			empty: '<p>この項目は必須です。</p>',
			nospace: '<p>この項目にスペースは利用できません。</p>',
			nonumber: '<p>この項目に数字は利用できません。</p>',
			nosymbol: '<p>この項目に記号は利用できません。</p>',
			zenkaku: '<p>この項目は全角で入力してください。</p>',
			kana: '<p>この項目はひらがなもしくはカタカナで入力してください。</p>',
			hiragana: '<p>この項目は全角かなで入力してください。</p>',
			katakana: '<p>この項目は全角カナで入力してください。</p>',
			hankaku: '<p>この項目は半角で入力してください。</p>',
			number: '<p>この項目は半角数字で入力してください。</p>',
			alphabet: '<p>この項目は半角アルファベットで入力してください。</p>',
			alnum: '<p>この項目は半角アルファベットもしくは半角数字で入力してください。</p>',
			date: '<p>日付が不正です。</p>',
			email: '<p>メールアドレスが不正です。</p>',
			url: '<p>URLが不正です。</p>',
			jancode: '<p>JANコードが不正です。</p>',
			mixPasswordNumber: '<p>パスワードには半角数字も使う必要があります。</p>',
			mixPasswordAlphabet: '<p>パスワードには半角英語も使う必要があります。</p>',
			birthDate: '<p>誕生日が不正です。</p>',
			retype: '<p class="retype">入力内容が一致しません。</p>',
			max1: '<p>文字数は',
			max2: '文字以下です。</p>',
			min1: '<p>文字数は',
			min2: '文字以上です。</p>',
			range1: '<p>文字数は',
			range2: '文字以上',
			range3: '文字以下です。</p>',
			len1: '<p>文字数は',
			len2: '文字です。</p>',
			file: '<p>ファイルが選択されていません。</p>',
			checkboxEmpty: '<p>この項目は必須です</p>',
			currentVersion: '<p>現在のバージョンが設定されていません。</p>',
			version: '<p>バージョンが不正です。</p>'
		};
		this._controller.on('validate', function () {
			return _this.onValidate();
		});
		this.setEvent();
		$('[data-validate=checkboxempty]').on('click', function (e) {
			var $e = $(e.currentTarget);
			if ($e.prop('checked')) {
				$e.closest('.form-group').find('[data-validate=checkboxempty]').removeClass('is-invalid');
				_this.hideError();
			}
		});
	}

	_createClass(FormValidateView, [{
		key: 'setEvent',


		/**
   * イベントトリガーを設定する
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function setEvent() {
			var _this2 = this;

			console.log('FormValidateView.setEvent');
			if (this._element === 'input') {
				if (this._type === 'checkbox' || this._type === 'radio') {
					this._$e.on('click', function () {
						return _this2.doValidate();
					});
				} else if (this._type === 'file') {
					this._$e.on('change', function () {
						return _this2.doValidate();
					});
				} else {
					if (this._$e.attr('data-datepicker') !== 'true') {
						setTimeout(function () {
							_this2._$e.on('blur', function () {
								return _this2.doValidate();
							});
						}, 150);
					}
				}
			} else if (this._element === 'select') {
				this._$e.on('change', function () {
					return _this2.doValidate();
				});
			} else if (this._element === 'textarea') {
				setTimeout(function () {
					_this2._$e.on('blur', function () {
						return _this2.doValidate();
					});
				}, 150);
			}
		}
	}, {
		key: 'onValidate',


		/**
   * 送信ボタンクリック時のバリデーションのコールバック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function onValidate() {
			console.log('FormValidateView.onValidate');
			if (this._$e.hasClass('ignore-validate')) return;
			this.doValidate();
		}
	}, {
		key: 'doValidate',


		/**
   * バリデーション実行
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function doValidate() {
			if (this._controller._$form && this._controller._$form.attr('id') !== this._$form.attr('id')) return;
			if (this._$e.hasClass('ignore-validate')) {
				console.log('ignore validate');
			} else {
				if (this._$e.attr('id')) {
					console.log('FormValidateView.doValidate: ' + this._$e.attr('id'));
				} else {
					console.log('FormValidateView.doValidate: ' + this._$e.attr('class'));
				}
				var validateArray = this._validates.split(' ');
				this.setValue();
				this._error = [];
				for (var i = 0; i < validateArray.length; i++) {
					this.validate(validateArray[i]);
					if (i === validateArray.length - 1) {
						if (this._error.length > 0) {
							this.showError();
						} else {
							this.hideError();
						}
					}
				}
			}
		}
	}, {
		key: 'setValue',


		/**
   * 値を設定する
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function setValue() {
			if (this._element === 'input') {
				if (this._type === 'checkbox') {
					if (this._$e.prop('checked')) {
						this._value = this._$e.val();
					} else {
						this._value = '';
					}
				} else if (this._type === 'radio') {
					var name = this._$e.attr('name');
					this._value = $('[name=' + name + ']:checked').val();
				} else if (this._type === 'file') {
					this._value = this._$e.val();
					console.log('FILE: ' + this._value);
				} else {
					this._value = $.trim(this._$e.val());
					this._$e.val(this._value);
				}
			} else if (this._element === 'textarea') {
				this._value = $.trim(this._$e.val());
				this._$e.val(this._value);
			} else {
				this._value = this._$e.val();
			}
		}
	}, {
		key: 'validate',


		/**
   * バリデーションを実施する
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function validate(_validate) {
			console.log(_validate);
			var type = _validate;
			if (_validate.match(/^max-/)) {
				type = 'max';
			} else if (_validate.match(/^min-/)) {
				type = 'min';
			} else if (_validate.match(/^range-/)) {
				type = 'range';
			} else if (_validate.match(/^len-/)) {
				type = 'len';
			} else if (_validate.match(/^retype-/)) {
				type = 'retype';
			} else if (_validate.match(/^typebase-/)) {
				type = 'typebase';
			}
			var args = _validate.split('-');
			if (this._value === '' && type !== 'empty' && this._type !== 'checkbox') return;
			switch (type) {
				case 'empty':
					this.checkEmpty();
					break;
				case 'nospace':
					this.checkNoSpace();
					break;
				case 'nonumber':
					this.checkNoNumber();
					break;
				case 'nosymbol':
					this.checkNoSymbol();
					break;
				case 'zenkaku':
					this.checkZenkaku();
					break;
				case 'hankaku':
					this.checkHankaku();
					break;
				case 'kana':
					this.checkKana();
					break;
				case 'hiragana':
					this.checkHiragana();
					break;
				case 'katakana':
					this.checkKatakana();
					break;
				case 'number':
					this.checkNumber();
					break;
				case 'alphabet':
					this.checkAlphabet();
					break;
				case 'alnum':
					this.checkAlphabetNumber();
					break;
				case 'url':
					this.checkUrl();
					break;
				case 'email':
					this.checkEmail();
					break;
				case 'date':
					this.checkDate();
					break;
				case 'jancode':
					this.checkJancode();
					break;
				case 'mixpassword':
					this.checkMixPassword();
					break;
				case 'birthdate':
					this.checkBirthDate();
					break;
				case 'max':
					this.checkMax(args[1]);
					break;
				case 'min':
					this.checkMin(args[1]);
					break;
				case 'range':
					this.checkRange(args[1], args[2]);
					break;
				case 'len':
					this.checkLength(args[1]);
					break;
				case 'retype':
					this.checkRetype(args[1]);
					break;
				case 'typebase':
					this.checkTypebase(args[1]);
					break;
				case 'checkboxempty':
					this.checkCheckboxEmpty();
					break;
				case 'version':
					this.checkVersion();
					break;
			}
		}
	}, {
		key: 'showError',


		/**
   * エラーを表示する
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function showError() {
			console.log('FormValidateView.showError');
			this._$e.addClass('is-invalid');
			if (this._$e.hasClass('.group2')) {
				$('.group1').addClass('is-invalid');
			}
			var error = '';
			for (var i = 0; i < this._error.length; i++) {
				error += this._error[i];
			}
			this._$errortipInner.html(error);
			// 1 -> -30
			var top = -18 - (this._error.length * 15 - 3);
			this._$errortip.css('top', top + 'px').addClass('show');
		}
	}, {
		key: 'hideError',


		/**
   * エラーを非表示にする
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function hideError() {
			this._$e.removeClass('is-invalid');
			this._$errortip.removeClass('show').css('top', '-30px');
			this._$errortipInner.html('');
		}
	}, {
		key: 'checkAddressError',


		/**
   * 郵便番号自動入力の場合、住所エラーを非表示にする
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkAddressError() {
			if ((this._$e.hasClass('zip-group1') || this._$e.hasClass('zip-group2')) && this._$e.hasClass('p-postal-code')) {
				var zip1 = $('.zip1').val().length;
				var zip2 = $('.zip2').val().length;
				var region = $('.p-region');
				var locality = $('.p-locality');
				var streetAddress = $('.p-street-address');
				var extendedAddress = $('.p-extended-address');
				if (zip1 + zip2 === 7) {
					this.removeAddressError(region);
					this.removeAddressError(locality);
					this.removeAddressError(streetAddress);
					this.removeAddressError(extendedAddress);
				}
			}
		}
	}, {
		key: 'removeAddressError',


		/**
   * 郵便番号自動入力の場合、住所エラーを非表示にする
   *
   * @memberof FormValidateView
   * @params {object} obj - エラー削除対象オブジェクト
   * @return {undefined}
   */
		value: function removeAddressError(obj) {
			obj.removeClass('is-invalid').closest('.form-group').find('.error-tip').removeClass('show').css('top', '-30px').find('.error-tip-inner').html('');
		}
	}, {
		key: 'checkEmpty',


		/**
   * 空白チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkEmpty() {
			if (this._type === 'file') {
				if (this._$e.closest('.block-file-input').find('input').attr('data-validate') === 'empty') {
					this._error.push(this._errorMessage['file']);
				}
			} else {
				if (this._value === '') {
					if (this._$e.hasClass('zip-group1') && !$('button[type=submit]').hasClass('clicked')) {
						if ($('.zip-group2').val() !== '') {
							this._error.push(this._errorMessage['empty']);
						}
					} else {
						this._error.push(this._errorMessage['empty']);
					}
				}
			}
		}
	}, {
		key: 'checkNoSpace',


		/**
   * スペースチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkNoSpace() {
			if (this._value.match(/[　\s]/)) {
				this._error.push(this._errorMessage['nospace']);
			}
		}
	}, {
		key: 'checkNoNumber',


		/**
   * 数字チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkNoNumber() {
			if (this._value.match(/[０-９0-9]/)) {
				this._error.push(this._errorMessage['nonumber']);
			}
		}
	}, {
		key: 'checkNoSymbol',


		/**
   * 記号チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkNoSymbol() {
			if (this._value.match(/[！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・!"#\$%&'\(\)=~\|`{\+\*}<>\?_\-\^\\@\[;:\],\.\/\^]/)) {
				this._error.push(this._errorMessage['nosymbol']);
			}
		}
	}, {
		key: 'checkZenkaku',


		/**
   * 全角チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkZenkaku() {
			var valLength = this._value.length;
			var byteLength = this.getByteLength();
			if (valLength * 2 !== byteLength) {
				this._error.push(this._errorMessage['zenkaku']);
			}
		}
	}, {
		key: 'checkHankaku',


		/**
   * 半角チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkHankaku() {
			var valLength = this._value.length;
			var byteLength = this.getByteLength();
			if (valLength !== byteLength) {
				this._error.push(this._errorMessage['hankaku']);
			}
		}
	}, {
		key: 'getByteLength',


		/**
   * バイト数確認
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function getByteLength() {
			var m = encodeURIComponent(this._value).match(/%[89ABab]/g);
			return this._value.length + (m ? m.length : 0);
		}
	}, {
		key: 'checkKana',


		/**
   * かなチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkKana() {
			if (!this._value.match(/^[ぁ-んーァ-ヾ０-９\s　！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・]+$/)) {
				this._error.push(this._errorMessage['kana']);
			}
		}
	}, {
		key: 'checkHiragana',


		/**
   * ひらがなチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkHiragana() {
			if (!this._value.match(/^[ぁ-んー０-９－\s　！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・]+$/)) {
				this._error.push(this._errorMessage['hiragana']);
			}
		}
	}, {
		key: 'checkKatakana',


		/**
   * カタカナチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkKatakana() {
			console.log('FormValidateView.checkKatakana');
			if (!this._value.match(/^[ァ-ヾ０-９－\s　！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・]+$/)) {
				this._error.push(this._errorMessage['katakana']);
			}
		}
	}, {
		key: 'checkNumber',


		/**
   * 数字チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkNumber() {
			if (!this._value.match(/^[0-9\s!"#\$%&'\(\)=~\|`{\+\*}<>\?_\-\^\\@\[;:\],\.\/\^]+$/)) {
				this._error.push(this._errorMessage['number']);
			}
		}
	}, {
		key: 'checkAlphabet',


		/**
   * アルファベットチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkAlphabet() {
			if (!this._value.match(/^[a-zA-Z\s!"#\$%&'\(\)=~\|`{\+\*}<>\?_\-\^\\@\[;:\],\.\/\^]+$/)) {
				this._error.push(this._errorMessage['alphabet']);
			}
		}
	}, {
		key: 'checkAlphabetNumber',


		/**
   * アルファベット・数字チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkAlphabetNumber() {
			if (!this._value.match(/^[0-9a-zA-Z\s!"#\$%&'\(\)=~\|`{\+\*}<>\?_\-\^\\@\[;:\],\.\/\^]+$/)) {
				this._error.push(this._errorMessage['alnum']);
			}
		}
	}, {
		key: 'checkUrl',


		/**
   * URLアドレスチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkUrl() {
			console.log('FormValidateView.checkUrl');
			if (!this._$e.val().match(/https?:\/\/[a-zA-Z0-9\-_.:@!~*'(¥);/?&=+$,%#]+/)) {
				this._error.push(this._errorMessage['url']);
			}
		}
	}, {
		key: 'checkEmail',


		/**
   * メールアドレスチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkEmail() {
			if (!this._$e.val().match(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i)) {
				this._error.push(this._errorMessage['email']);
			}
		}
	}, {
		key: 'checkDate',


		/**
   * 日付チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkDate() {
			if (!this._$e.val().match(/^\d{4}-\d{2}-\d{2}$/)) {
				this._error.push(this._errorMessage['date']);
			}
		}
	}, {
		key: 'checkJancode',


		/**
   * JANコードチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkJancode() {
			var val = this._value;
			var digit = val.charAt(12);
			var even = parseInt(val.charAt(1)) + parseInt(val.charAt(3)) + parseInt(val.charAt(5)) + parseInt(val.charAt(7)) + parseInt(val.charAt(9)) + parseInt(val.charAt(11));
			var odd = parseInt(val.charAt(0)) + parseInt(val.charAt(2)) + parseInt(val.charAt(4)) + parseInt(val.charAt(6)) + parseInt(val.charAt(8)) + parseInt(val.charAt(10));
			var total = even * 3 + odd;
			total = new String(total);
			var totalLen = total.length;
			var last = parseInt(total.charAt(totalLen - 1));
			var rest = void 0;
			if (last === 0) {
				rest = 0;
			} else {
				rest = 10 - last;
			}
			if (rest !== digit) {
				this._error.push(this._errorMessage['jancode']);
			}
		}
	}, {
		key: 'checkMixPassword',


		/**
   * 英数混在パスワードチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkMixPassword() {
			if (!this._$e.val().match(/[a-zA-Z]/)) {
				this._error.push(this._errorMessage['mixPasswordAlphabet']);
			} else if (!this._$e.val().match(/[0-9]/)) {
				this._error.push(this._errorMessage['mixPasswordNumber']);
			}
		}
	}, {
		key: 'checkBirthDate',


		/**
   * 誕生日チェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkBirthDate() {
			console.log('check birthDate');
			var val = this._$e.val();
			var max = _util_common__WEBPACK_IMPORTED_MODULE_0__["default"].getCurrentDateTime().substr(0, 10);
			var maxYear = max.substr(0, 4);
			var minYear = maxYear - 80;
			var min = max.replace(maxYear, minYear);
			console.log(min + '/' + val + '/' + max);
			if (val > max || val < min) {
				this._error.push(this._errorMessage['birthDate']);
			}
		}
	}, {
		key: 'checkMax',


		/**
   * 最大文字数チェック
   *
   * @memberof FormValidateView
   * @param {string} max - 最大文字数
   * @return {undefined}
   */
		value: function checkMax(max) {
			if (this._value.length > max) {
				this._error.push(this._errorMessage['max1'] + max + this._errorMessage['max2']);
			}
		}
	}, {
		key: 'checkMin',


		/**
   * 最小文字数チェック
   *
   * @memberof FormValidateView
   * @param {string} min - 最小文字数
   * @return {undefined}
   */
		value: function checkMin(min) {
			if (this._value.length < min) {
				this._error.push(this._errorMessage['min1'] + min + this._errorMessage['min2']);
			}
		}
	}, {
		key: 'checkRange',


		/**
   * 文字数最大最小チェック
   *
   * @memberof FormValidateView
   * @param {string} min - 最小文字数
   * @param {string} max - 最大文字数
   * @return {undefined}
   */
		value: function checkRange(min, max) {
			if (this._value.length > max || this._value.length < min) {
				this._error.push(this._errorMessage['range1'] + min + this._errorMessage['range2'] + max + this._errorMessage['range3']);
			}
		}
	}, {
		key: 'checkLength',


		/**
   * 文字数チェック
   *
   * @memberof FormValidateView
   * @param {string} len - 文字数
   * @return {undefined}
   */
		value: function checkLength(len) {
			if (parseInt(this._value.length) !== parseInt(len)) {
				this._error.push(this._errorMessage['len1'] + len + this._errorMessage['len2']);
			}
		}
	}, {
		key: 'checkRetype',


		/**
   * 入力確認チェック（比較先）
   *
   * @memberof FormValidateView
   * @param {string} id - 比較元ID
   * @return {undefined}
   */
		value: function checkRetype(id) {
			var target = $('#' + id);
			var targetValue = $.trim(target.val());
			if (!targetValue || targetValue === '') return;
			if (this._value !== targetValue) {
				this._error.push(this._errorMessage['retype']);
			}
		}
	}, {
		key: 'checkTypebase',


		/**
   * 入力確認チェック（比較元）
   *
   * @memberof FormValidateView
   * @param {string} id - 比較先ID
   * @return {undefined}
   */
		value: function checkTypebase(id) {
			var target = $('#' + id);
			var targetValue = $.trim(target.val());
			if (!targetValue || targetValue === '') return;
			var validateMsgBox = target.closest('.tr-form-group').find('.tr-form-group__form__validate');
			if (this._value !== targetValue) {
				if (validateMsgBox.find('p').hasClass('retype')) return;
				validateMsgBox.append(this._errorMessage['retype']);
			} else {
				validateMsgBox.find('.retype').remove();
			}
		}
	}, {
		key: 'checkCheckboxEmpty',


		/**
   * checkbox emptyチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkCheckboxEmpty() {
			var $formGroupContents = this._$e.closest('.form-group > div');

			var cnt = 0;
			$formGroupContents.find('[data-form=checkboxempty]').each(function (idx, e) {
				var $e = $(e);
				if ($e.prop('checked')) {
					cnt++;
				}
			});
			if (cnt === 0) {
				this._error.push(this._errorMessage['checkboxEmpty']);
			}
		}
	}, {
		key: 'checkRadioEmpty',


		/**
   * radio emptyチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkRadioEmpty() {
			console.log('FormValidateView.checkRadioEmpty');
			var $formGroup = this._$e.closest('.form-group');

			if (!$formGroup.find('[data-form=radioempty]:checked')) {
				this._error.push(this._errorMessage['radioEmpty']);
			}
		}
	}, {
		key: 'checkVersion',


		/**
   * versionチェック
   *
   * @memberof FormValidateView
   * @return {undefined}
   */
		value: function checkVersion() {
			console.log('FormValidateView.checkVersion');
			if ($('#current_version')[0]) {
				var currentVersion = $('#current_version').val();
				console.log(currentVersion);
				if (this._value.match(/\d{1,2}\.\d{1,2}\.\d{1,2}/)) {
					var ca = currentVersion.split('.');
					var na = this._value.split('.');
					var cv = parseInt(ca[0]) * 10000 + parseInt(ca[1]) * 100 + parseInt(ca[2]);
					var nv = parseInt(na[0]) * 10000 + parseInt(na[1]) * 100 + parseInt(na[2]);
					console.log(cv + ' / ' + nv);
					if (cv >= nv) {
						this._error.push(this._errorMessage['version']);
					}
				} else {
					this._error.push(this._errorMessage['version']);
				}
			} else {
				this._error.push(this._errorMessage['currentVersion']);
			}
		}
	}]);

	return FormValidateView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormValidateView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/_form-zenkaku-to-hankaku-view.js":
/*!**********************************************************************!*\
  !*** ./mock/admin/src/js/view/form/_form-zenkaku-to-hankaku-view.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 全角→半角変換
 *
 */


/**
 * @classname FormZenkakuToHankakuView
 * @classdesc 全角→半角変換
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormZenkakuToHankakuView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function FormZenkakuToHankakuView($e) {
		var _this = this;

		_classCallCheck(this, FormZenkakuToHankakuView);

		console.log('FormZenkakuToHankakuView.constructor');
		this._$e = $e;
		this._$e.on('blur', function () {
			return _this.onBlur();
		});
	}

	_createClass(FormZenkakuToHankakuView, [{
		key: 'onBlur',


		/**
   * blurのコールバック
   *
   * @memberof FormZenkakuToHankakuView
   * @return {undefined}
   */
		value: function onBlur() {
			console.log('FormZenkakuToHankakuView.onBlur');
			var str = this._$e.val();
			str = str.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) {
				return String.fromCharCode(s.charCodeAt(0) - 65248);
			});
			console.log(str);
			this._$e.val(str);
		}
	}]);

	return FormZenkakuToHankakuView;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormZenkakuToHankakuView);

/***/ }),

/***/ "./mock/admin/src/js/view/form/form/_form-company.js":
/*!***********************************************************!*\
  !*** ./mock/admin/src/js/view/form/form/_form-company.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file _form-company.js
 */


/**
 * @classname FormCompany
 * @classdesc 店舗登録
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormCompany = function () {
	/**
  * @constructor
  * @param {object} controller - コントローラー
  */
	function FormCompany(controller) {
		_classCallCheck(this, FormCompany);

		this._controller = controller;
	}

	_createClass(FormCompany, [{
		key: 'preProcessing',


		/**
   * フォーム送信前処理
   *
   * @memberof FormCompany
   * @return {undefined}
   */
		value: function preProcessing($form) {
			console.log('FormCompany.preProcessing');
			// バリデーション後に行う処理を記載（開始）


			// バリデーション後に行う処理を記載（終了）
			this._controller.completePreProcessing($form);
		}
	}, {
		key: 'postProcessing',


		/**
   * フォーム送信後処理
   *
   * @memberof FormCompany
   * @return {undefined}
   */
		value: function postProcessing($form) {
			console.log('FormCompany.postProcessing');
			// バリデーション後に行う処理を記載（開始）

			// 郵便番号の統合
			var zipcode1 = $form.find('#zip_code1').val();
			var zipcode2 = $form.find('#zip_code2').val();
			$('#zip_code').val(zipcode1 + '-' + zipcode2);

			// バリデーション後に行う処理を記載（終了）
			this._controller.completePostProcessing($form);
		}
	}]);

	return FormCompany;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormCompany);

/***/ }),

/***/ "./mock/admin/src/js/view/form/form/_form-item.js":
/*!********************************************************!*\
  !*** ./mock/admin/src/js/view/form/form/_form-item.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file _form-item.js
 */


/**
 * @classname FormItem
 * @classdesc 商品登録
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormItem = function () {
	/**
  * @constructor
  * @param {object} controller - コントローラー
  */
	function FormItem(controller) {
		_classCallCheck(this, FormItem);

		this._controller = controller;
	}

	_createClass(FormItem, [{
		key: 'preProcessing',


		/**
   * フォーム送信前処理
   *
   * @memberof FormItem
   * @return {undefined}
   */
		value: function preProcessing($form) {
			console.log('FormItem.preProcessing');
			// バリデーション後に行う処理を記載（開始）


			// バリデーション後に行う処理を記載（終了）
			this._controller.completePreProcessing($form);
		}
	}, {
		key: 'postProcessing',


		/**
   * フォーム送信後処理
   *
   * @memberof FormItem
   * @return {undefined}
   */
		value: function postProcessing($form) {
			console.log('FormItem.postProcessing');
			// バリデーション後に行う処理を記載（開始）

			// 公開開始日時
			var dispStartDate = $('#disp_start_date').val();
			$('#disp_start_date').val(dispStartDate + ':00');

			// 公開終了日時
			var dispEndDate = $('#disp_end_date').val();
			if (dispEndDate && dispEndDate !== '') $('#disp_end_date').val(dispEndDate + ':00');

			// バリデーション後に行う処理を記載（終了）
			this._controller.completePostProcessing($form);
		}
	}]);

	return FormItem;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormItem);

/***/ }),

/***/ "./mock/admin/src/js/view/form/form/_form-shop.js":
/*!********************************************************!*\
  !*** ./mock/admin/src/js/view/form/form/_form-shop.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file _form-shop.js
 */


/**
 * @classname FormShop
 * @classdesc 店舗登録
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormShop = function () {
	/**
  * @constructor
  * @param {object} controller - コントローラー
  */
	function FormShop(controller) {
		_classCallCheck(this, FormShop);

		this._controller = controller;
	}

	_createClass(FormShop, [{
		key: 'preProcessing',


		/**
   * フォーム送信前処理
   *
   * @memberof FormShop
   * @return {undefined}
   */
		value: function preProcessing($form) {
			console.log('FormShop.preProcessing');
			// バリデーション後に行う処理を記載（開始）


			// バリデーション後に行う処理を記載（終了）
			this._controller.completePreProcessing($form);
		}
	}, {
		key: 'postProcessing',


		/**
   * フォーム送信後処理
   *
   * @memberof FormShop
   * @return {undefined}
   */
		value: function postProcessing($form) {
			console.log('FormShop.postProcessing');
			// バリデーション後に行う処理を記載（開始）

			// 郵便番号の統合
			var zipcode1 = $form.find('#zip_code1').val();
			var zipcode2 = $form.find('#zip_code2').val();
			$('#zip_code').val(zipcode1 + '-' + zipcode2);

			// 基本締め切り時間の統合
			var defaultDeadlineTime1 = $form.find('#default_deadline_time1').val();
			var defaultDeadlineTime2 = $form.find('#default_deadline_time2').val();
			$('#default_deadline_time').val(defaultDeadlineTime1 + ':' + defaultDeadlineTime2);

			// 公開開始日時
			var dispStartDate = $('#disp_start_date').val();
			$('#disp_start_date').val(dispStartDate + ':00');

			// 公開終了日時
			var dispEndDate = $('#disp_end_date').val();
			if (dispEndDate && dispEndDate !== '') $('#disp_end_date').val(dispEndDate + ':00');

			// バリデーション後に行う処理を記載（終了）
			this._controller.completePostProcessing($form);
		}
	}]);

	return FormShop;
}();

/* harmony default export */ __webpack_exports__["default"] = (FormShop);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-btn-delete-view.js":
/*!****************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-btn-delete-view.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 削除ボタン
 *
 */


/**
 * @classname TableBtnDeleteView
 * @classdesc 削除ボタン
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableBtnDeleteView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableBtnDeleteView($e) {
		var _this = this;

		_classCallCheck(this, TableBtnDeleteView);

		console.log('TableBtnDeleteView.constructor');
		this._$e = $e;
		this._id = $e.attr('data-id');
		this._type = $e.attr('data-type');
		this._name = $e.attr('data-name');
		this._$modal = $('.modal-delete');
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(TableBtnDeleteView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableClearSearchView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TableBtnDeleteView.onClick');
			this._$modal.find('.input-delete').attr('name', this._name).val(this._id);
			this._$modal.find('span.name').text(this._type);
		}
	}]);

	return TableBtnDeleteView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableBtnDeleteView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-btn-movie-view.js":
/*!***************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-btn-movie-view.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 動画視聴
 *
 */


/**
 * @classname TableBtnMovieView
 * @classdesc 動画視聴
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableBtnMovieView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableBtnMovieView($e) {
		var _this = this;

		_classCallCheck(this, TableBtnMovieView);

		console.log('TableBtnMovieView.constructor');
		this._$e = $e;
		this._url = $e.attr('data-url');
		this._title = $e.attr('data-title');
		this._$modal = $('.modal-movie');
		$e.on('click', function () {
			return _this.onClick();
		});
		this._$modal.on('hidden.bs.modal', function () {
			_this.close();
		});
	}

	_createClass(TableBtnMovieView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableBtnMovieView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TableBtnMovieView.onClick');
			var movie = '\n<video controls autoplay class="movie-player">\n\t<source src="' + this._url + '">\n\t<p>\u52D5\u753B\u3092\u518D\u751F\u3059\u308B\u306B\u306F\u3001video\u30BF\u30B0\u3092\u30B5\u30DD\u30FC\u30C8\u3057\u305F\u30D6\u30E9\u30A6\u30B6\u304C\u5FC5\u8981\u3067\u3059\u3002</p>\n</video>';
			this._$modal.find('.block-video-area').html(movie);
			this._$modal.find('span.text-title').text(this._title);
		}
	}, {
		key: 'close',


		/**
   * モーダルクローズのコールバック
   *
   * @memberof TableBtnMovieView
   * @return {undefined}
   */
		value: function close() {
			console.log('TableBtnMovieView.close');
			this._$modal.find('.block-video-area').html('');
			this._$modal.find('span.text-title').text('');
		}
	}]);

	return TableBtnMovieView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableBtnMovieView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-clear-search-view.js":
/*!******************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-clear-search-view.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file テーブル検索
 *
 */


/**
 * @classname TableClearSearchView
 * @classdesc テーブル検索
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableClearSearchView = function () {
	/**
  * @constructor
  * @param {object} controller - controllerオブジェクト
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableClearSearchView($e, controller) {
		var _this = this;

		_classCallCheck(this, TableClearSearchView);

		console.log('TableClearSearchView.constructor');
		this._$e = $e;
		this._controller = controller;
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(TableClearSearchView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableClearSearchView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TableClearSearchView.onClick');
			this._controller.clearSearch();
		}
	}]);

	return TableClearSearchView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableClearSearchView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-count-view.js":
/*!***********************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-count-view.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 表示件数変更
 *
 */


/**
 * @classname TableCountView
 * @classdesc 表示件数変更
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableCountView = function () {
	/**
  * @constructor
  * @param {object} controller - controllerオブジェクト
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableCountView($e, controller) {
		var _this = this;

		_classCallCheck(this, TableCountView);

		console.log('TableCountView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._count = parseInt($e.attr('data-search-count'));
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(TableCountView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableCountView
   * @return {undefined}
   */
		value: function onClick() {
			if (this._$e.hasClass('active')) return;
			console.log('TableCountView.onClick');
			this._controller.count(this._count);
		}
	}]);

	return TableCountView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableCountView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-csv-dl-view.js":
/*!************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-csv-dl-view.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/_common */ "./mock/admin/src/js/util/_common.js");
/**
 * @file CSVダウンロード
 *
 */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @classname TableCsvDlView
 * @classdesc CSVダウンロード
 */

var TableCsvDlView = function () {
	/**
  * @constructor
  * @param {object} controller - controllerオブジェクト
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableCsvDlView($e, controller) {
		var _this = this;

		_classCallCheck(this, TableCsvDlView);

		console.log('TableCsvDlView.constructor');
		this._$e = $e;
		this._params = location.search;
		$e.on('click', function () {
			_this.onClick();
		});
	}

	_createClass(TableCsvDlView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableCsvDlView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TableCsvDlView.onClick');
			location.href = window.const.URL.CSV + this._params;
		}
	}]);

	return TableCsvDlView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableCsvDlView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-pagination-view.js":
/*!****************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-pagination-view.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file テーブルソート
 *
 */


/**
 * @classname TablePaginationView
 * @classdesc テーブルソート
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TablePaginationView = function () {
	/**
  * @constructor
  * @param {object} controller - controllerオブジェクト
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TablePaginationView($e, controller) {
		var _this = this;

		_classCallCheck(this, TablePaginationView);

		console.log('TablePaginationView.constructor');
		this._$e = $e;
		this._controller = controller;
		this._page = parseInt($e.attr('data-page'));
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(TablePaginationView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TablePaginationView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TablePaginationView.onChange');
			this._controller.pagination(this._page);
		}
	}]);

	return TablePaginationView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TablePaginationView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-scrollbar-view.js":
/*!***************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-scrollbar-view.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 上下スクロールバーを連動
 *
 */


/**
 * @classname TableScrollbarView
 * @classdesc 上下スクロールバーを連動
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableScrollbarView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableScrollbarView($e) {
		var _this = this;

		_classCallCheck(this, TableScrollbarView);

		console.log('TableScrollbarView.constructor');
		this._$e = $e;
		var $clone = $e.closest('.table-wrap').find('.scroll-box');
		this._width = parseInt($('.table').css('min-width'));
		$e.on('scroll', function () {
			$clone.scrollLeft($e.scrollLeft());
		});
		$clone.on('scroll', function () {
			$e.scrollLeft($clone.scrollLeft());
		});
		this.show();
		$(window).on('resize', function () {
			return _this.show();
		});
		$('.card-main').on('resize', function () {
			return _this.show();
		});
	}

	_createClass(TableScrollbarView, [{
		key: 'show',


		/**
   * 表示・非表示
   *
   * @memberof FormSelectToggleView
   * @return {undefined}
   */
		value: function show() {
			console.log('TableScrollbarView.show');
			console.log($('.card-main').width() - 30 + ' / ' + this._width);
			if ($('.card-main').width() - 30 > this._width) {
				this._$e.hide();
			} else {
				this._$e.show();
			}
		}
	}]);

	return TableScrollbarView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableScrollbarView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-search-condition-accordion-view.js":
/*!********************************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-search-condition-accordion-view.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file 検索条件もっと見る
 *
 */


/**
 * @classname TableSearchConditionAccordionView
 * @classdesc 検索条件もっと見る
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableSearchConditionAccordionView = function () {
	/**
  * @constructor
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableSearchConditionAccordionView($e) {
		var _this = this;

		_classCallCheck(this, TableSearchConditionAccordionView);

		console.log('TableSearchConditionAccordionView.constructor');
		this._$e = $e;
		$e.on('click', function () {
			return _this.onClick();
		});
		this._closeText = $e.attr('data-close-text') || 'もっと検索条件を見る';
		this._openText = $e.attr('data-open-text') || '検索条件を閉じる';
	}

	_createClass(TableSearchConditionAccordionView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableSearchConditionAccordionView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TableSearchConditionAccordionView.onClick');
			var $target = $('.block-accordion-target');
			if (this._$e.hasClass('open')) {
				this._$e.removeClass('open').text(this._closeText);
				$target.slideUp();
			} else {
				this._$e.addClass('open').text(this._openText);
				$target.slideDown();
			}
		}
	}]);

	return TableSearchConditionAccordionView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableSearchConditionAccordionView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-search-view.js":
/*!************************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-search-view.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file テーブル検索
 *
 */


/**
 * @classname TableSearchView
 * @classdesc テーブル検索
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableSearchView = function () {
	/**
  * @constructor
  * @param {object} controller - controllerオブジェクト
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableSearchView($e, controller) {
		var _this = this;

		_classCallCheck(this, TableSearchView);

		console.log('TableSearchView.constructor');
		this._$e = $e;
		this._controller = controller;
		$e.on('click', function () {
			return _this.onClick();
		});
	}

	_createClass(TableSearchView, [{
		key: 'onClick',


		/**
   * クリックのコールバック
   *
   * @memberof TableSearchView
   * @return {undefined}
   */
		value: function onClick() {
			console.log('TableSearchView.onClick');
			this._controller.search();
		}
	}]);

	return TableSearchView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableSearchView);

/***/ }),

/***/ "./mock/admin/src/js/view/table/_table-sort-view.js":
/*!**********************************************************!*\
  !*** ./mock/admin/src/js/view/table/_table-sort-view.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @file テーブルソート
 *
 */


/**
 * @classname TableSortView
 * @classdesc テーブルソート
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TableSortView = function () {
	/**
  * @constructor
  * @param {object} controller - controllerオブジェクト
  * @param {jQuery} $e - 該当する jQuery オブジェクト
  */
	function TableSortView($e, controller) {
		var _this = this;

		_classCallCheck(this, TableSortView);

		console.log('TableSortView.constructor');
		this._$e = $e;
		this._controller = controller;
		$e.on('change', function () {
			return _this.onChange();
		});
	}

	_createClass(TableSortView, [{
		key: 'onChange',


		/**
   * クリックのコールバック
   *
   * @memberof TableSortView
   * @return {undefined}
   */
		value: function onChange() {
			console.log('TableSortView.onChange');
			this._controller.sort();
		}
	}]);

	return TableSortView;
}();

/* harmony default export */ __webpack_exports__["default"] = (TableSortView);

/***/ }),

/***/ "./node_modules/sweetalert2/dist/sweetalert2.js":
/*!******************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
* sweetalert2 v9.5.4
* Released under the MIT License.
*/
(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

var consolePrefix = 'SweetAlert2:';
/**
 * Filter the unique values into a new array
 * @param arr
 */

var uniqueArray = function uniqueArray(arr) {
  var result = [];

  for (var i = 0; i < arr.length; i++) {
    if (result.indexOf(arr[i]) === -1) {
      result.push(arr[i]);
    }
  }

  return result;
};
/**
 * Capitalize the first letter of a string
 * @param str
 */

var capitalizeFirstLetter = function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
/**
 * Returns the array ob object values (Object.values isn't supported in IE11)
 * @param obj
 */

var objectValues = function objectValues(obj) {
  return Object.keys(obj).map(function (key) {
    return obj[key];
  });
};
/**
 * Convert NodeList to Array
 * @param nodeList
 */

var toArray = function toArray(nodeList) {
  return Array.prototype.slice.call(nodeList);
};
/**
 * Standardise console warnings
 * @param message
 */

var warn = function warn(message) {
  console.warn("".concat(consolePrefix, " ").concat(message));
};
/**
 * Standardise console errors
 * @param message
 */

var error = function error(message) {
  console.error("".concat(consolePrefix, " ").concat(message));
};
/**
 * Private global state for `warnOnce`
 * @type {Array}
 * @private
 */

var previousWarnOnceMessages = [];
/**
 * Show a console warning, but only if it hasn't already been shown
 * @param message
 */

var warnOnce = function warnOnce(message) {
  if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {
    previousWarnOnceMessages.push(message);
    warn(message);
  }
};
/**
 * Show a one-time console warning about deprecated params/methods
 */

var warnAboutDepreation = function warnAboutDepreation(deprecatedParam, useInstead) {
  warnOnce("\"".concat(deprecatedParam, "\" is deprecated and will be removed in the next major release. Please use \"").concat(useInstead, "\" instead."));
};
/**
 * If `arg` is a function, call it (with no arguments or context) and return the result.
 * Otherwise, just pass the value through
 * @param arg
 */

var callIfFunction = function callIfFunction(arg) {
  return typeof arg === 'function' ? arg() : arg;
};
var isPromise = function isPromise(arg) {
  return arg && Promise.resolve(arg) === arg;
};

var DismissReason = Object.freeze({
  cancel: 'cancel',
  backdrop: 'backdrop',
  close: 'close',
  esc: 'esc',
  timer: 'timer'
});

var isJqueryElement = function isJqueryElement(elem) {
  return _typeof(elem) === 'object' && elem.jquery;
};

var isElement = function isElement(elem) {
  return elem instanceof Element || isJqueryElement(elem);
};

var argsToParams = function argsToParams(args) {
  var params = {};

  if (_typeof(args[0]) === 'object' && !isElement(args[0])) {
    _extends(params, args[0]);
  } else {
    ['title', 'html', 'icon'].forEach(function (name, index) {
      var arg = args[index];

      if (typeof arg === 'string' || isElement(arg)) {
        params[name] = arg;
      } else if (arg !== undefined) {
        error("Unexpected type of ".concat(name, "! Expected \"string\" or \"Element\", got ").concat(_typeof(arg)));
      }
    });
  }

  return params;
};

var swalPrefix = 'swal2-';
var prefix = function prefix(items) {
  var result = {};

  for (var i in items) {
    result[items[i]] = swalPrefix + items[i];
  }

  return result;
};
var swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'toast', 'toast-shown', 'toast-column', 'show', 'hide', 'close', 'title', 'header', 'content', 'html-container', 'actions', 'confirm', 'cancel', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error']);
var iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);

var getContainer = function getContainer() {
  return document.body.querySelector(".".concat(swalClasses.container));
};
var elementBySelector = function elementBySelector(selectorString) {
  var container = getContainer();
  return container ? container.querySelector(selectorString) : null;
};

var elementByClass = function elementByClass(className) {
  return elementBySelector(".".concat(className));
};

var getPopup = function getPopup() {
  return elementByClass(swalClasses.popup);
};
var getIcons = function getIcons() {
  var popup = getPopup();
  return toArray(popup.querySelectorAll(".".concat(swalClasses.icon)));
};
var getIcon = function getIcon() {
  var visibleIcon = getIcons().filter(function (icon) {
    return isVisible(icon);
  });
  return visibleIcon.length ? visibleIcon[0] : null;
};
var getTitle = function getTitle() {
  return elementByClass(swalClasses.title);
};
var getContent = function getContent() {
  return elementByClass(swalClasses.content);
};
var getHtmlContainer = function getHtmlContainer() {
  return elementByClass(swalClasses['html-container']);
};
var getImage = function getImage() {
  return elementByClass(swalClasses.image);
};
var getProgressSteps = function getProgressSteps() {
  return elementByClass(swalClasses['progress-steps']);
};
var getValidationMessage = function getValidationMessage() {
  return elementByClass(swalClasses['validation-message']);
};
var getConfirmButton = function getConfirmButton() {
  return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.confirm));
};
var getCancelButton = function getCancelButton() {
  return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.cancel));
};
var getActions = function getActions() {
  return elementByClass(swalClasses.actions);
};
var getHeader = function getHeader() {
  return elementByClass(swalClasses.header);
};
var getFooter = function getFooter() {
  return elementByClass(swalClasses.footer);
};
var getTimerProgressBar = function getTimerProgressBar() {
  return elementByClass(swalClasses['timer-progress-bar']);
};
var getCloseButton = function getCloseButton() {
  return elementByClass(swalClasses.close);
}; // https://github.com/jkup/focusable/blob/master/index.js

var focusable = "\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n";
var getFocusableElements = function getFocusableElements() {
  var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')) // sort according to tabindex
  .sort(function (a, b) {
    a = parseInt(a.getAttribute('tabindex'));
    b = parseInt(b.getAttribute('tabindex'));

    if (a > b) {
      return 1;
    } else if (a < b) {
      return -1;
    }

    return 0;
  });
  var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {
    return el.getAttribute('tabindex') !== '-1';
  });
  return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {
    return isVisible(el);
  });
};
var isModal = function isModal() {
  return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);
};
var isToast = function isToast() {
  return document.body.classList.contains(swalClasses['toast-shown']);
};
var isLoading = function isLoading() {
  return getPopup().hasAttribute('data-loading');
};

var states = {
  previousBodyPadding: null
};
var hasClass = function hasClass(elem, className) {
  if (!className) {
    return false;
  }

  var classList = className.split(/\s+/);

  for (var i = 0; i < classList.length; i++) {
    if (!elem.classList.contains(classList[i])) {
      return false;
    }
  }

  return true;
};

var removeCustomClasses = function removeCustomClasses(elem, params) {
  toArray(elem.classList).forEach(function (className) {
    if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1) && !(objectValues(params.showClass).indexOf(className) !== -1)) {
      elem.classList.remove(className);
    }
  });
};

var applyCustomClass = function applyCustomClass(elem, params, className) {
  removeCustomClasses(elem, params);

  if (params.customClass && params.customClass[className]) {
    if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) {
      return warn("Invalid type of customClass.".concat(className, "! Expected string or iterable object, got \"").concat(_typeof(params.customClass[className]), "\""));
    }

    addClass(elem, params.customClass[className]);
  }
};
function getInput(content, inputType) {
  if (!inputType) {
    return null;
  }

  switch (inputType) {
    case 'select':
    case 'textarea':
    case 'file':
      return getChildByClass(content, swalClasses[inputType]);

    case 'checkbox':
      return content.querySelector(".".concat(swalClasses.checkbox, " input"));

    case 'radio':
      return content.querySelector(".".concat(swalClasses.radio, " input:checked")) || content.querySelector(".".concat(swalClasses.radio, " input:first-child"));

    case 'range':
      return content.querySelector(".".concat(swalClasses.range, " input"));

    default:
      return getChildByClass(content, swalClasses.input);
  }
}
var focusInput = function focusInput(input) {
  input.focus(); // place cursor at end of text in text input

  if (input.type !== 'file') {
    // http://stackoverflow.com/a/2345915
    var val = input.value;
    input.value = '';
    input.value = val;
  }
};
var toggleClass = function toggleClass(target, classList, condition) {
  if (!target || !classList) {
    return;
  }

  if (typeof classList === 'string') {
    classList = classList.split(/\s+/).filter(Boolean);
  }

  classList.forEach(function (className) {
    if (target.forEach) {
      target.forEach(function (elem) {
        condition ? elem.classList.add(className) : elem.classList.remove(className);
      });
    } else {
      condition ? target.classList.add(className) : target.classList.remove(className);
    }
  });
};
var addClass = function addClass(target, classList) {
  toggleClass(target, classList, true);
};
var removeClass = function removeClass(target, classList) {
  toggleClass(target, classList, false);
};
var getChildByClass = function getChildByClass(elem, className) {
  for (var i = 0; i < elem.childNodes.length; i++) {
    if (hasClass(elem.childNodes[i], className)) {
      return elem.childNodes[i];
    }
  }
};
var applyNumericalStyle = function applyNumericalStyle(elem, property, value) {
  if (value || parseInt(value) === 0) {
    elem.style[property] = typeof value === 'number' ? "".concat(value, "px") : value;
  } else {
    elem.style.removeProperty(property);
  }
};
var show = function show(elem) {
  var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';
  elem.style.opacity = '';
  elem.style.display = display;
};
var hide = function hide(elem) {
  elem.style.opacity = '';
  elem.style.display = 'none';
};
var toggle = function toggle(elem, condition, display) {
  condition ? show(elem, display) : hide(elem);
}; // borrowed from jquery $(elem).is(':visible') implementation

var isVisible = function isVisible(elem) {
  return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
};
/* istanbul ignore next */

var isScrollable = function isScrollable(elem) {
  return !!(elem.scrollHeight > elem.clientHeight);
}; // borrowed from https://stackoverflow.com/a/46352119

var hasCssAnimation = function hasCssAnimation(elem) {
  var style = window.getComputedStyle(elem);
  var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
  var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
  return animDuration > 0 || transDuration > 0;
};
var contains = function contains(haystack, needle) {
  if (typeof haystack.contains === 'function') {
    return haystack.contains(needle);
  }
};
var animateTimerProgressBar = function animateTimerProgressBar(timer) {
  var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var timerProgressBar = getTimerProgressBar();

  if (isVisible(timerProgressBar)) {
    if (reset) {
      timerProgressBar.style.transition = 'none';
      timerProgressBar.style.width = '100%';
    }

    setTimeout(function () {
      timerProgressBar.style.transition = "width ".concat(timer / 1000, "s linear");
      timerProgressBar.style.width = '0%';
    }, 10);
  }
};
var stopTimerProgressBar = function stopTimerProgressBar() {
  var timerProgressBar = getTimerProgressBar();
  var timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
  timerProgressBar.style.removeProperty('transition');
  timerProgressBar.style.width = '100%';
  var timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
  var timerProgressBarPercent = parseInt(timerProgressBarWidth / timerProgressBarFullWidth * 100);
  timerProgressBar.style.removeProperty('transition');
  timerProgressBar.style.width = "".concat(timerProgressBarPercent, "%");
};

// Detect Node env
var isNodeEnv = function isNodeEnv() {
  return typeof window === 'undefined' || typeof document === 'undefined';
};

var sweetHTML = "\n <div aria-labelledby=\"".concat(swalClasses.title, "\" aria-describedby=\"").concat(swalClasses.content, "\" class=\"").concat(swalClasses.popup, "\" tabindex=\"-1\">\n   <div class=\"").concat(swalClasses.header, "\">\n     <ul class=\"").concat(swalClasses['progress-steps'], "\"></ul>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.error, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.question, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.warning, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.info, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.success, "\"></div>\n     <img class=\"").concat(swalClasses.image, "\" />\n     <h2 class=\"").concat(swalClasses.title, "\" id=\"").concat(swalClasses.title, "\"></h2>\n     <button type=\"button\" class=\"").concat(swalClasses.close, "\"></button>\n   </div>\n   <div class=\"").concat(swalClasses.content, "\">\n     <div id=\"").concat(swalClasses.content, "\" class=\"").concat(swalClasses['html-container'], "\"></div>\n     <input class=\"").concat(swalClasses.input, "\" />\n     <input type=\"file\" class=\"").concat(swalClasses.file, "\" />\n     <div class=\"").concat(swalClasses.range, "\">\n       <input type=\"range\" />\n       <output></output>\n     </div>\n     <select class=\"").concat(swalClasses.select, "\"></select>\n     <div class=\"").concat(swalClasses.radio, "\"></div>\n     <label for=\"").concat(swalClasses.checkbox, "\" class=\"").concat(swalClasses.checkbox, "\">\n       <input type=\"checkbox\" />\n       <span class=\"").concat(swalClasses.label, "\"></span>\n     </label>\n     <textarea class=\"").concat(swalClasses.textarea, "\"></textarea>\n     <div class=\"").concat(swalClasses['validation-message'], "\" id=\"").concat(swalClasses['validation-message'], "\"></div>\n   </div>\n   <div class=\"").concat(swalClasses.actions, "\">\n     <button type=\"button\" class=\"").concat(swalClasses.confirm, "\">OK</button>\n     <button type=\"button\" class=\"").concat(swalClasses.cancel, "\">Cancel</button>\n   </div>\n   <div class=\"").concat(swalClasses.footer, "\"></div>\n   <div class=\"").concat(swalClasses['timer-progress-bar'], "\"></div>\n </div>\n").replace(/(^|\n)\s*/g, '');

var resetOldContainer = function resetOldContainer() {
  var oldContainer = getContainer();

  if (!oldContainer) {
    return;
  }

  oldContainer.parentNode.removeChild(oldContainer);
  removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);
};

var oldInputVal; // IE11 workaround, see #1109 for details

var resetValidationMessage = function resetValidationMessage(e) {
  if (Swal.isVisible() && oldInputVal !== e.target.value) {
    Swal.resetValidationMessage();
  }

  oldInputVal = e.target.value;
};

var addInputChangeListeners = function addInputChangeListeners() {
  var content = getContent();
  var input = getChildByClass(content, swalClasses.input);
  var file = getChildByClass(content, swalClasses.file);
  var range = content.querySelector(".".concat(swalClasses.range, " input"));
  var rangeOutput = content.querySelector(".".concat(swalClasses.range, " output"));
  var select = getChildByClass(content, swalClasses.select);
  var checkbox = content.querySelector(".".concat(swalClasses.checkbox, " input"));
  var textarea = getChildByClass(content, swalClasses.textarea);
  input.oninput = resetValidationMessage;
  file.onchange = resetValidationMessage;
  select.onchange = resetValidationMessage;
  checkbox.onchange = resetValidationMessage;
  textarea.oninput = resetValidationMessage;

  range.oninput = function (e) {
    resetValidationMessage(e);
    rangeOutput.value = range.value;
  };

  range.onchange = function (e) {
    resetValidationMessage(e);
    range.nextSibling.value = range.value;
  };
};

var getTarget = function getTarget(target) {
  return typeof target === 'string' ? document.querySelector(target) : target;
};

var setupAccessibility = function setupAccessibility(params) {
  var popup = getPopup();
  popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
  popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');

  if (!params.toast) {
    popup.setAttribute('aria-modal', 'true');
  }
};

var setupRTL = function setupRTL(targetElement) {
  if (window.getComputedStyle(targetElement).direction === 'rtl') {
    addClass(getContainer(), swalClasses.rtl);
  }
};
/*
 * Add modal + backdrop to DOM
 */


var init = function init(params) {
  // Clean up the old popup container if it exists
  resetOldContainer();
  /* istanbul ignore if */

  if (isNodeEnv()) {
    error('SweetAlert2 requires document to initialize');
    return;
  }

  var container = document.createElement('div');
  container.className = swalClasses.container;
  container.innerHTML = sweetHTML;
  var targetElement = getTarget(params.target);
  targetElement.appendChild(container);
  setupAccessibility(params);
  setupRTL(targetElement);
  addInputChangeListeners();
};

var parseHtmlToContainer = function parseHtmlToContainer(param, target) {
  // DOM element
  if (param instanceof HTMLElement) {
    target.appendChild(param); // JQuery element(s)
  } else if (_typeof(param) === 'object') {
    handleJqueryElem(target, param); // Plain string
  } else if (param) {
    target.innerHTML = param;
  }
};

var handleJqueryElem = function handleJqueryElem(target, elem) {
  target.innerHTML = '';

  if (0 in elem) {
    for (var i = 0; i in elem; i++) {
      target.appendChild(elem[i].cloneNode(true));
    }
  } else {
    target.appendChild(elem.cloneNode(true));
  }
};

var animationEndEvent = function () {
  // Prevent run in Node env

  /* istanbul ignore if */
  if (isNodeEnv()) {
    return false;
  }

  var testEl = document.createElement('div');
  var transEndEventNames = {
    WebkitAnimation: 'webkitAnimationEnd',
    OAnimation: 'oAnimationEnd oanimationend',
    animation: 'animationend'
  };

  for (var i in transEndEventNames) {
    if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {
      return transEndEventNames[i];
    }
  }

  return false;
}();

// https://github.com/twbs/bootstrap/blob/master/js/src/modal.js

var measureScrollbar = function measureScrollbar() {
  var scrollDiv = document.createElement('div');
  scrollDiv.className = swalClasses['scrollbar-measure'];
  document.body.appendChild(scrollDiv);
  var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
  document.body.removeChild(scrollDiv);
  return scrollbarWidth;
};

var renderActions = function renderActions(instance, params) {
  var actions = getActions();
  var confirmButton = getConfirmButton();
  var cancelButton = getCancelButton(); // Actions (buttons) wrapper

  if (!params.showConfirmButton && !params.showCancelButton) {
    hide(actions);
  } // Custom class


  applyCustomClass(actions, params, 'actions'); // Render confirm button

  renderButton(confirmButton, 'confirm', params); // render Cancel Button

  renderButton(cancelButton, 'cancel', params);

  if (params.buttonsStyling) {
    handleButtonsStyling(confirmButton, cancelButton, params);
  } else {
    removeClass([confirmButton, cancelButton], swalClasses.styled);
    confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';
    cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';
  }

  if (params.reverseButtons) {
    confirmButton.parentNode.insertBefore(cancelButton, confirmButton);
  }
};

function handleButtonsStyling(confirmButton, cancelButton, params) {
  addClass([confirmButton, cancelButton], swalClasses.styled); // Buttons background colors

  if (params.confirmButtonColor) {
    confirmButton.style.backgroundColor = params.confirmButtonColor;
  }

  if (params.cancelButtonColor) {
    cancelButton.style.backgroundColor = params.cancelButtonColor;
  } // Loading state


  var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');
  confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;
  confirmButton.style.borderRightColor = confirmButtonBackgroundColor;
}

function renderButton(button, buttonType, params) {
  toggle(button, params["show".concat(capitalizeFirstLetter(buttonType), "Button")], 'inline-block');
  button.innerHTML = params["".concat(buttonType, "ButtonText")]; // Set caption text

  button.setAttribute('aria-label', params["".concat(buttonType, "ButtonAriaLabel")]); // ARIA label
  // Add buttons custom classes

  button.className = swalClasses[buttonType];
  applyCustomClass(button, params, "".concat(buttonType, "Button"));
  addClass(button, params["".concat(buttonType, "ButtonClass")]);
}

function handleBackdropParam(container, backdrop) {
  if (typeof backdrop === 'string') {
    container.style.background = backdrop;
  } else if (!backdrop) {
    addClass([document.documentElement, document.body], swalClasses['no-backdrop']);
  }
}

function handlePositionParam(container, position) {
  if (position in swalClasses) {
    addClass(container, swalClasses[position]);
  } else {
    warn('The "position" parameter is not valid, defaulting to "center"');
    addClass(container, swalClasses.center);
  }
}

function handleGrowParam(container, grow) {
  if (grow && typeof grow === 'string') {
    var growClass = "grow-".concat(grow);

    if (growClass in swalClasses) {
      addClass(container, swalClasses[growClass]);
    }
  }
}

var renderContainer = function renderContainer(instance, params) {
  var container = getContainer();

  if (!container) {
    return;
  }

  handleBackdropParam(container, params.backdrop);

  if (!params.backdrop && params.allowOutsideClick) {
    warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
  }

  handlePositionParam(container, params.position);
  handleGrowParam(container, params.grow); // Custom class

  applyCustomClass(container, params, 'container'); // Set queue step attribute for getQueueStep() method

  var queueStep = document.body.getAttribute('data-swal2-queue-step');

  if (queueStep) {
    container.setAttribute('data-queue-step', queueStep);
    document.body.removeAttribute('data-swal2-queue-step');
  }
};

/**
 * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
 * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
 * This is the approach that Babel will probably take to implement private methods/fields
 *   https://github.com/tc39/proposal-private-methods
 *   https://github.com/babel/babel/pull/7555
 * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
 *   then we can use that language feature.
 */
var privateProps = {
  promise: new WeakMap(),
  innerParams: new WeakMap(),
  domCache: new WeakMap()
};

var inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];
var renderInput = function renderInput(instance, params) {
  var content = getContent();
  var innerParams = privateProps.innerParams.get(instance);
  var rerender = !innerParams || params.input !== innerParams.input;
  inputTypes.forEach(function (inputType) {
    var inputClass = swalClasses[inputType];
    var inputContainer = getChildByClass(content, inputClass); // set attributes

    setAttributes(inputType, params.inputAttributes); // set class

    inputContainer.className = inputClass;

    if (rerender) {
      hide(inputContainer);
    }
  });

  if (params.input) {
    if (rerender) {
      showInput(params);
    } // set custom class


    setCustomClass(params);
  }
};

var showInput = function showInput(params) {
  if (!renderInputType[params.input]) {
    return error("Unexpected type of input! Expected \"text\", \"email\", \"password\", \"number\", \"tel\", \"select\", \"radio\", \"checkbox\", \"textarea\", \"file\" or \"url\", got \"".concat(params.input, "\""));
  }

  var inputContainer = getInputContainer(params.input);
  var input = renderInputType[params.input](inputContainer, params);
  show(input); // input autofocus

  setTimeout(function () {
    focusInput(input);
  });
};

var removeAttributes = function removeAttributes(input) {
  for (var i = 0; i < input.attributes.length; i++) {
    var attrName = input.attributes[i].name;

    if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {
      input.removeAttribute(attrName);
    }
  }
};

var setAttributes = function setAttributes(inputType, inputAttributes) {
  var input = getInput(getContent(), inputType);

  if (!input) {
    return;
  }

  removeAttributes(input);

  for (var attr in inputAttributes) {
    // Do not set a placeholder for <input type="range">
    // it'll crash Edge, #1298
    if (inputType === 'range' && attr === 'placeholder') {
      continue;
    }

    input.setAttribute(attr, inputAttributes[attr]);
  }
};

var setCustomClass = function setCustomClass(params) {
  var inputContainer = getInputContainer(params.input);

  if (params.customClass) {
    addClass(inputContainer, params.customClass.input);
  }
};

var setInputPlaceholder = function setInputPlaceholder(input, params) {
  if (!input.placeholder || params.inputPlaceholder) {
    input.placeholder = params.inputPlaceholder;
  }
};

var getInputContainer = function getInputContainer(inputType) {
  var inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;
  return getChildByClass(getContent(), inputClass);
};

var renderInputType = {};

renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (input, params) {
  if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {
    input.value = params.inputValue;
  } else if (!isPromise(params.inputValue)) {
    warn("Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"".concat(_typeof(params.inputValue), "\""));
  }

  setInputPlaceholder(input, params);
  input.type = params.input;
  return input;
};

renderInputType.file = function (input, params) {
  setInputPlaceholder(input, params);
  return input;
};

renderInputType.range = function (range, params) {
  var rangeInput = range.querySelector('input');
  var rangeOutput = range.querySelector('output');
  rangeInput.value = params.inputValue;
  rangeInput.type = params.input;
  rangeOutput.value = params.inputValue;
  return range;
};

renderInputType.select = function (select, params) {
  select.innerHTML = '';

  if (params.inputPlaceholder) {
    var placeholder = document.createElement('option');
    placeholder.innerHTML = params.inputPlaceholder;
    placeholder.value = '';
    placeholder.disabled = true;
    placeholder.selected = true;
    select.appendChild(placeholder);
  }

  return select;
};

renderInputType.radio = function (radio) {
  radio.innerHTML = '';
  return radio;
};

renderInputType.checkbox = function (checkboxContainer, params) {
  var checkbox = getInput(getContent(), 'checkbox');
  checkbox.value = 1;
  checkbox.id = swalClasses.checkbox;
  checkbox.checked = Boolean(params.inputValue);
  var label = checkboxContainer.querySelector('span');
  label.innerHTML = params.inputPlaceholder;
  return checkboxContainer;
};

renderInputType.textarea = function (textarea, params) {
  textarea.value = params.inputValue;
  setInputPlaceholder(textarea, params);

  if ('MutationObserver' in window) {
    // #1699
    var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
    var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);

    var outputsize = function outputsize() {
      var contentWidth = textarea.offsetWidth + popupPadding;

      if (contentWidth > initialPopupWidth) {
        getPopup().style.width = "".concat(contentWidth, "px");
      } else {
        getPopup().style.width = null;
      }
    };

    new MutationObserver(outputsize).observe(textarea, {
      attributes: true,
      attributeFilter: ['style']
    });
  }

  return textarea;
};

var renderContent = function renderContent(instance, params) {
  var content = getContent().querySelector("#".concat(swalClasses.content)); // Content as HTML

  if (params.html) {
    parseHtmlToContainer(params.html, content);
    show(content, 'block'); // Content as plain text
  } else if (params.text) {
    content.textContent = params.text;
    show(content, 'block'); // No content
  } else {
    hide(content);
  }

  renderInput(instance, params); // Custom class

  applyCustomClass(getContent(), params, 'content');
};

var renderFooter = function renderFooter(instance, params) {
  var footer = getFooter();
  toggle(footer, params.footer);

  if (params.footer) {
    parseHtmlToContainer(params.footer, footer);
  } // Custom class


  applyCustomClass(footer, params, 'footer');
};

var renderCloseButton = function renderCloseButton(instance, params) {
  var closeButton = getCloseButton();
  closeButton.innerHTML = params.closeButtonHtml; // Custom class

  applyCustomClass(closeButton, params, 'closeButton');
  toggle(closeButton, params.showCloseButton);
  closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
};

var renderIcon = function renderIcon(instance, params) {
  var innerParams = privateProps.innerParams.get(instance); // if the give icon already rendered, apply the custom class without re-rendering the icon

  if (innerParams && params.icon === innerParams.icon && getIcon()) {
    applyCustomClass(getIcon(), params, 'icon');
    return;
  }

  hideAllIcons();

  if (!params.icon) {
    return;
  }

  if (Object.keys(iconTypes).indexOf(params.icon) !== -1) {
    var icon = elementBySelector(".".concat(swalClasses.icon, ".").concat(iconTypes[params.icon]));
    show(icon); // Custom or default content

    setContent(icon, params);
    adjustSuccessIconBackgoundColor(); // Custom class

    applyCustomClass(icon, params, 'icon'); // Animate icon

    addClass(icon, params.showClass.icon);
  } else {
    error("Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"".concat(params.icon, "\""));
  }
};

var hideAllIcons = function hideAllIcons() {
  var icons = getIcons();

  for (var i = 0; i < icons.length; i++) {
    hide(icons[i]);
  }
}; // Adjust success icon background color to match the popup background color


var adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {
  var popup = getPopup();
  var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');
  var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');

  for (var i = 0; i < successIconParts.length; i++) {
    successIconParts[i].style.backgroundColor = popupBackgroundColor;
  }
};

var setContent = function setContent(icon, params) {
  icon.innerHTML = '';

  if (params.iconHtml) {
    icon.innerHTML = iconContent(params.iconHtml);
  } else if (params.icon === 'success') {
    icon.innerHTML = "\n      <div class=\"swal2-success-circular-line-left\"></div>\n      <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n      <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n      <div class=\"swal2-success-circular-line-right\"></div>\n    ";
  } else if (params.icon === 'error') {
    icon.innerHTML = "\n      <span class=\"swal2-x-mark\">\n        <span class=\"swal2-x-mark-line-left\"></span>\n        <span class=\"swal2-x-mark-line-right\"></span>\n      </span>\n    ";
  } else {
    var defaultIconHtml = {
      question: '?',
      warning: '!',
      info: 'i'
    };
    icon.innerHTML = iconContent(defaultIconHtml[params.icon]);
  }
};

var iconContent = function iconContent(content) {
  return "<div class=\"".concat(swalClasses['icon-content'], "\">").concat(content, "</div>");
};

var renderImage = function renderImage(instance, params) {
  var image = getImage();

  if (!params.imageUrl) {
    return hide(image);
  }

  show(image); // Src, alt

  image.setAttribute('src', params.imageUrl);
  image.setAttribute('alt', params.imageAlt); // Width, height

  applyNumericalStyle(image, 'width', params.imageWidth);
  applyNumericalStyle(image, 'height', params.imageHeight); // Class

  image.className = swalClasses.image;
  applyCustomClass(image, params, 'image');
};

var currentSteps = [];
/*
 * Global function for chaining sweetAlert popups
 */

var queue = function queue(steps) {
  var Swal = this;
  currentSteps = steps;

  var resetAndResolve = function resetAndResolve(resolve, value) {
    currentSteps = [];
    resolve(value);
  };

  var queueResult = [];
  return new Promise(function (resolve) {
    (function step(i, callback) {
      if (i < currentSteps.length) {
        document.body.setAttribute('data-swal2-queue-step', i);
        Swal.fire(currentSteps[i]).then(function (result) {
          if (typeof result.value !== 'undefined') {
            queueResult.push(result.value);
            step(i + 1, callback);
          } else {
            resetAndResolve(resolve, {
              dismiss: result.dismiss
            });
          }
        });
      } else {
        resetAndResolve(resolve, {
          value: queueResult
        });
      }
    })(0);
  });
};
/*
 * Global function for getting the index of current popup in queue
 */

var getQueueStep = function getQueueStep() {
  return getContainer().getAttribute('data-queue-step');
};
/*
 * Global function for inserting a popup to the queue
 */

var insertQueueStep = function insertQueueStep(step, index) {
  if (index && index < currentSteps.length) {
    return currentSteps.splice(index, 0, step);
  }

  return currentSteps.push(step);
};
/*
 * Global function for deleting a popup from the queue
 */

var deleteQueueStep = function deleteQueueStep(index) {
  if (typeof currentSteps[index] !== 'undefined') {
    currentSteps.splice(index, 1);
  }
};

var createStepElement = function createStepElement(step) {
  var stepEl = document.createElement('li');
  addClass(stepEl, swalClasses['progress-step']);
  stepEl.innerHTML = step;
  return stepEl;
};

var createLineElement = function createLineElement(params) {
  var lineEl = document.createElement('li');
  addClass(lineEl, swalClasses['progress-step-line']);

  if (params.progressStepsDistance) {
    lineEl.style.width = params.progressStepsDistance;
  }

  return lineEl;
};

var renderProgressSteps = function renderProgressSteps(instance, params) {
  var progressStepsContainer = getProgressSteps();

  if (!params.progressSteps || params.progressSteps.length === 0) {
    return hide(progressStepsContainer);
  }

  show(progressStepsContainer);
  progressStepsContainer.innerHTML = '';
  var currentProgressStep = parseInt(params.currentProgressStep === undefined ? getQueueStep() : params.currentProgressStep);

  if (currentProgressStep >= params.progressSteps.length) {
    warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');
  }

  params.progressSteps.forEach(function (step, index) {
    var stepEl = createStepElement(step);
    progressStepsContainer.appendChild(stepEl);

    if (index === currentProgressStep) {
      addClass(stepEl, swalClasses['active-progress-step']);
    }

    if (index !== params.progressSteps.length - 1) {
      var lineEl = createLineElement(step);
      progressStepsContainer.appendChild(lineEl);
    }
  });
};

var renderTitle = function renderTitle(instance, params) {
  var title = getTitle();
  toggle(title, params.title || params.titleText);

  if (params.title) {
    parseHtmlToContainer(params.title, title);
  }

  if (params.titleText) {
    title.innerText = params.titleText;
  } // Custom class


  applyCustomClass(title, params, 'title');
};

var renderHeader = function renderHeader(instance, params) {
  var header = getHeader(); // Custom class

  applyCustomClass(header, params, 'header'); // Progress steps

  renderProgressSteps(instance, params); // Icon

  renderIcon(instance, params); // Image

  renderImage(instance, params); // Title

  renderTitle(instance, params); // Close button

  renderCloseButton(instance, params);
};

var renderPopup = function renderPopup(instance, params) {
  var popup = getPopup(); // Width

  applyNumericalStyle(popup, 'width', params.width); // Padding

  applyNumericalStyle(popup, 'padding', params.padding); // Background

  if (params.background) {
    popup.style.background = params.background;
  } // Classes


  addClasses(popup, params);
};

var addClasses = function addClasses(popup, params) {
  // Default Class + showClass when updating Swal.update({})
  popup.className = "".concat(swalClasses.popup, " ").concat(isVisible(popup) ? params.showClass.popup : '');

  if (params.toast) {
    addClass([document.documentElement, document.body], swalClasses['toast-shown']);
    addClass(popup, swalClasses.toast);
  } else {
    addClass(popup, swalClasses.modal);
  } // Custom class


  applyCustomClass(popup, params, 'popup');

  if (typeof params.customClass === 'string') {
    addClass(popup, params.customClass);
  } // Icon class (#1842)


  if (params.icon) {
    addClass(popup, swalClasses["icon-".concat(params.icon)]);
  }
};

var render = function render(instance, params) {
  renderPopup(instance, params);
  renderContainer(instance, params);
  renderHeader(instance, params);
  renderContent(instance, params);
  renderActions(instance, params);
  renderFooter(instance, params);

  if (typeof params.onRender === 'function') {
    params.onRender(getPopup());
  }
};

/*
 * Global function to determine if SweetAlert2 popup is shown
 */

var isVisible$1 = function isVisible$$1() {
  return isVisible(getPopup());
};
/*
 * Global function to click 'Confirm' button
 */

var clickConfirm = function clickConfirm() {
  return getConfirmButton() && getConfirmButton().click();
};
/*
 * Global function to click 'Cancel' button
 */

var clickCancel = function clickCancel() {
  return getCancelButton() && getCancelButton().click();
};

function fire() {
  var Swal = this;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _construct(Swal, args);
}

/**
 * Returns an extended version of `Swal` containing `params` as defaults.
 * Useful for reusing Swal configuration.
 *
 * For example:
 *
 * Before:
 * const textPromptOptions = { input: 'text', showCancelButton: true }
 * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
 * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
 *
 * After:
 * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
 * const {value: firstName} = await TextPrompt('What is your first name?')
 * const {value: lastName} = await TextPrompt('What is your last name?')
 *
 * @param mixinParams
 */
function mixin(mixinParams) {
  var MixinSwal =
  /*#__PURE__*/
  function (_this) {
    _inherits(MixinSwal, _this);

    function MixinSwal() {
      _classCallCheck(this, MixinSwal);

      return _possibleConstructorReturn(this, _getPrototypeOf(MixinSwal).apply(this, arguments));
    }

    _createClass(MixinSwal, [{
      key: "_main",
      value: function _main(params) {
        return _get(_getPrototypeOf(MixinSwal.prototype), "_main", this).call(this, _extends({}, mixinParams, params));
      }
    }]);

    return MixinSwal;
  }(this);

  return MixinSwal;
}

/**
 * Show spinner instead of Confirm button
 */

var showLoading = function showLoading() {
  var popup = getPopup();

  if (!popup) {
    Swal.fire();
  }

  popup = getPopup();
  var actions = getActions();
  var confirmButton = getConfirmButton();
  show(actions);
  show(confirmButton, 'inline-block');
  addClass([popup, actions], swalClasses.loading);
  confirmButton.disabled = true;
  popup.setAttribute('data-loading', true);
  popup.setAttribute('aria-busy', true);
  popup.focus();
};

var RESTORE_FOCUS_TIMEOUT = 100;

var globalState = {};
var focusPreviousActiveElement = function focusPreviousActiveElement() {
  if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {
    globalState.previousActiveElement.focus();
    globalState.previousActiveElement = null;
  } else if (document.body) {
    document.body.focus();
  }
}; // Restore previous active (focused) element


var restoreActiveElement = function restoreActiveElement() {
  return new Promise(function (resolve) {
    var x = window.scrollX;
    var y = window.scrollY;
    globalState.restoreFocusTimeout = setTimeout(function () {
      focusPreviousActiveElement();
      resolve();
    }, RESTORE_FOCUS_TIMEOUT); // issues/900

    if (typeof x !== 'undefined' && typeof y !== 'undefined') {
      // IE doesn't have scrollX/scrollY support
      window.scrollTo(x, y);
    }
  });
};

/**
 * If `timer` parameter is set, returns number of milliseconds of timer remained.
 * Otherwise, returns undefined.
 */

var getTimerLeft = function getTimerLeft() {
  return globalState.timeout && globalState.timeout.getTimerLeft();
};
/**
 * Stop timer. Returns number of milliseconds of timer remained.
 * If `timer` parameter isn't set, returns undefined.
 */

var stopTimer = function stopTimer() {
  if (globalState.timeout) {
    stopTimerProgressBar();
    return globalState.timeout.stop();
  }
};
/**
 * Resume timer. Returns number of milliseconds of timer remained.
 * If `timer` parameter isn't set, returns undefined.
 */

var resumeTimer = function resumeTimer() {
  if (globalState.timeout) {
    var remaining = globalState.timeout.start();
    animateTimerProgressBar(remaining);
    return remaining;
  }
};
/**
 * Resume timer. Returns number of milliseconds of timer remained.
 * If `timer` parameter isn't set, returns undefined.
 */

var toggleTimer = function toggleTimer() {
  var timer = globalState.timeout;
  return timer && (timer.running ? stopTimer() : resumeTimer());
};
/**
 * Increase timer. Returns number of milliseconds of an updated timer.
 * If `timer` parameter isn't set, returns undefined.
 */

var increaseTimer = function increaseTimer(n) {
  if (globalState.timeout) {
    var remaining = globalState.timeout.increase(n);
    animateTimerProgressBar(remaining, true);
    return remaining;
  }
};
/**
 * Check if timer is running. Returns true if timer is running
 * or false if timer is paused or stopped.
 * If `timer` parameter isn't set, returns undefined
 */

var isTimerRunning = function isTimerRunning() {
  return globalState.timeout && globalState.timeout.isRunning();
};

var defaultParams = {
  title: '',
  titleText: '',
  text: '',
  html: '',
  footer: '',
  icon: undefined,
  iconHtml: undefined,
  toast: false,
  animation: true,
  showClass: {
    popup: 'swal2-show',
    backdrop: 'swal2-backdrop-show',
    icon: 'swal2-icon-show'
  },
  hideClass: {
    popup: 'swal2-hide',
    backdrop: 'swal2-backdrop-hide',
    icon: 'swal2-icon-hide'
  },
  customClass: undefined,
  target: 'body',
  backdrop: true,
  heightAuto: true,
  allowOutsideClick: true,
  allowEscapeKey: true,
  allowEnterKey: true,
  stopKeydownPropagation: true,
  keydownListenerCapture: false,
  showConfirmButton: true,
  showCancelButton: false,
  preConfirm: undefined,
  confirmButtonText: 'OK',
  confirmButtonAriaLabel: '',
  confirmButtonColor: undefined,
  cancelButtonText: 'Cancel',
  cancelButtonAriaLabel: '',
  cancelButtonColor: undefined,
  buttonsStyling: true,
  reverseButtons: false,
  focusConfirm: true,
  focusCancel: false,
  showCloseButton: false,
  closeButtonHtml: '&times;',
  closeButtonAriaLabel: 'Close this dialog',
  showLoaderOnConfirm: false,
  imageUrl: undefined,
  imageWidth: undefined,
  imageHeight: undefined,
  imageAlt: '',
  timer: undefined,
  timerProgressBar: false,
  width: undefined,
  padding: undefined,
  background: undefined,
  input: undefined,
  inputPlaceholder: '',
  inputValue: '',
  inputOptions: {},
  inputAutoTrim: true,
  inputAttributes: {},
  inputValidator: undefined,
  validationMessage: undefined,
  grow: false,
  position: 'center',
  progressSteps: [],
  currentProgressStep: undefined,
  progressStepsDistance: undefined,
  onBeforeOpen: undefined,
  onOpen: undefined,
  onRender: undefined,
  onClose: undefined,
  onAfterClose: undefined,
  scrollbarPadding: true
};
var updatableParams = ['title', 'titleText', 'text', 'html', 'icon', 'customClass', 'showConfirmButton', 'showCancelButton', 'confirmButtonText', 'confirmButtonAriaLabel', 'confirmButtonColor', 'cancelButtonText', 'cancelButtonAriaLabel', 'cancelButtonColor', 'buttonsStyling', 'reverseButtons', 'imageUrl', 'imageWidth', 'imageHeight', 'imageAlt', 'progressSteps', 'currentProgressStep'];
var deprecatedParams = {
  animation: 'showClass" and "hideClass'
};
var toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];
/**
 * Is valid parameter
 * @param {String} paramName
 */

var isValidParameter = function isValidParameter(paramName) {
  return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
};
/**
 * Is valid parameter for Swal.update() method
 * @param {String} paramName
 */

var isUpdatableParameter = function isUpdatableParameter(paramName) {
  return updatableParams.indexOf(paramName) !== -1;
};
/**
 * Is deprecated parameter
 * @param {String} paramName
 */

var isDeprecatedParameter = function isDeprecatedParameter(paramName) {
  return deprecatedParams[paramName];
};

var checkIfParamIsValid = function checkIfParamIsValid(param) {
  if (!isValidParameter(param)) {
    warn("Unknown parameter \"".concat(param, "\""));
  }
};

var checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {
  if (toastIncompatibleParams.indexOf(param) !== -1) {
    warn("The parameter \"".concat(param, "\" is incompatible with toasts"));
  }
};

var checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {
  if (isDeprecatedParameter(param)) {
    warnAboutDepreation(param, isDeprecatedParameter(param));
  }
};
/**
 * Show relevant warnings for given params
 *
 * @param params
 */


var showWarningsForParams = function showWarningsForParams(params) {
  for (var param in params) {
    checkIfParamIsValid(param);

    if (params.toast) {
      checkIfToastParamIsValid(param);
    }

    checkIfParamIsDeprecated(param);
  }
};



var staticMethods = Object.freeze({
	isValidParameter: isValidParameter,
	isUpdatableParameter: isUpdatableParameter,
	isDeprecatedParameter: isDeprecatedParameter,
	argsToParams: argsToParams,
	isVisible: isVisible$1,
	clickConfirm: clickConfirm,
	clickCancel: clickCancel,
	getContainer: getContainer,
	getPopup: getPopup,
	getTitle: getTitle,
	getContent: getContent,
	getHtmlContainer: getHtmlContainer,
	getImage: getImage,
	getIcon: getIcon,
	getIcons: getIcons,
	getCloseButton: getCloseButton,
	getActions: getActions,
	getConfirmButton: getConfirmButton,
	getCancelButton: getCancelButton,
	getHeader: getHeader,
	getFooter: getFooter,
	getFocusableElements: getFocusableElements,
	getValidationMessage: getValidationMessage,
	isLoading: isLoading,
	fire: fire,
	mixin: mixin,
	queue: queue,
	getQueueStep: getQueueStep,
	insertQueueStep: insertQueueStep,
	deleteQueueStep: deleteQueueStep,
	showLoading: showLoading,
	enableLoading: showLoading,
	getTimerLeft: getTimerLeft,
	stopTimer: stopTimer,
	resumeTimer: resumeTimer,
	toggleTimer: toggleTimer,
	increaseTimer: increaseTimer,
	isTimerRunning: isTimerRunning
});

/**
 * Enables buttons and hide loader.
 */

function hideLoading() {
  // do nothing if popup is closed
  var innerParams = privateProps.innerParams.get(this);

  if (!innerParams) {
    return;
  }

  var domCache = privateProps.domCache.get(this);

  if (!innerParams.showConfirmButton) {
    hide(domCache.confirmButton);

    if (!innerParams.showCancelButton) {
      hide(domCache.actions);
    }
  }

  removeClass([domCache.popup, domCache.actions], swalClasses.loading);
  domCache.popup.removeAttribute('aria-busy');
  domCache.popup.removeAttribute('data-loading');
  domCache.confirmButton.disabled = false;
  domCache.cancelButton.disabled = false;
}

function getInput$1(instance) {
  var innerParams = privateProps.innerParams.get(instance || this);
  var domCache = privateProps.domCache.get(instance || this);

  if (!domCache) {
    return null;
  }

  return getInput(domCache.content, innerParams.input);
}

var fixScrollbar = function fixScrollbar() {
  // for queues, do not do this more than once
  if (states.previousBodyPadding !== null) {
    return;
  } // if the body has overflow


  if (document.body.scrollHeight > window.innerHeight) {
    // add padding so the content doesn't shift after removal of scrollbar
    states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));
    document.body.style.paddingRight = "".concat(states.previousBodyPadding + measureScrollbar(), "px");
  }
};
var undoScrollbar = function undoScrollbar() {
  if (states.previousBodyPadding !== null) {
    document.body.style.paddingRight = "".concat(states.previousBodyPadding, "px");
    states.previousBodyPadding = null;
  }
};

/* istanbul ignore next */

var iOSfix = function iOSfix() {
  var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;

  if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
    var offset = document.body.scrollTop;
    document.body.style.top = "".concat(offset * -1, "px");
    addClass(document.body, swalClasses.iosfix);
    lockBodyScroll();
  }
};
/* istanbul ignore next */

var lockBodyScroll = function lockBodyScroll() {
  // #1246
  var container = getContainer();
  var preventTouchMove;

  container.ontouchstart = function (e) {
    preventTouchMove = e.target === container || !isScrollable(container) && e.target.tagName !== 'INPUT' // #1603
    ;
  };

  container.ontouchmove = function (e) {
    if (preventTouchMove) {
      e.preventDefault();
      e.stopPropagation();
    }
  };
};
/* istanbul ignore next */


var undoIOSfix = function undoIOSfix() {
  if (hasClass(document.body, swalClasses.iosfix)) {
    var offset = parseInt(document.body.style.top, 10);
    removeClass(document.body, swalClasses.iosfix);
    document.body.style.top = '';
    document.body.scrollTop = offset * -1;
  }
};

var isIE11 = function isIE11() {
  return !!window.MSInputMethodContext && !!document.documentMode;
}; // Fix IE11 centering sweetalert2/issues/933

/* istanbul ignore next */


var fixVerticalPositionIE = function fixVerticalPositionIE() {
  var container = getContainer();
  var popup = getPopup();
  container.style.removeProperty('align-items');

  if (popup.offsetTop < 0) {
    container.style.alignItems = 'flex-start';
  }
};
/* istanbul ignore next */


var IEfix = function IEfix() {
  if (typeof window !== 'undefined' && isIE11()) {
    fixVerticalPositionIE();
    window.addEventListener('resize', fixVerticalPositionIE);
  }
};
/* istanbul ignore next */

var undoIEfix = function undoIEfix() {
  if (typeof window !== 'undefined' && isIE11()) {
    window.removeEventListener('resize', fixVerticalPositionIE);
  }
};

// Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
// elements not within the active modal dialog will not be surfaced if a user opens a screen
// reader’s list of elements (headings, form controls, landmarks, etc.) in the document.

var setAriaHidden = function setAriaHidden() {
  var bodyChildren = toArray(document.body.children);
  bodyChildren.forEach(function (el) {
    if (el === getContainer() || contains(el, getContainer())) {
      return;
    }

    if (el.hasAttribute('aria-hidden')) {
      el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
    }

    el.setAttribute('aria-hidden', 'true');
  });
};
var unsetAriaHidden = function unsetAriaHidden() {
  var bodyChildren = toArray(document.body.children);
  bodyChildren.forEach(function (el) {
    if (el.hasAttribute('data-previous-aria-hidden')) {
      el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
      el.removeAttribute('data-previous-aria-hidden');
    } else {
      el.removeAttribute('aria-hidden');
    }
  });
};

/**
 * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
 * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
 * This is the approach that Babel will probably take to implement private methods/fields
 *   https://github.com/tc39/proposal-private-methods
 *   https://github.com/babel/babel/pull/7555
 * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
 *   then we can use that language feature.
 */
var privateMethods = {
  swalPromiseResolve: new WeakMap()
};

/*
 * Instance method to close sweetAlert
 */

function removePopupAndResetState(instance, container, isToast, onAfterClose) {
  if (isToast) {
    triggerOnAfterCloseAndDispose(instance, onAfterClose);
  } else {
    restoreActiveElement().then(function () {
      return triggerOnAfterCloseAndDispose(instance, onAfterClose);
    });
    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
      capture: globalState.keydownListenerCapture
    });
    globalState.keydownHandlerAdded = false;
  }

  if (container.parentNode) {
    container.parentNode.removeChild(container);
  }

  if (isModal()) {
    undoScrollbar();
    undoIOSfix();
    undoIEfix();
    unsetAriaHidden();
  }

  removeBodyClasses();
}

function removeBodyClasses() {
  removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);
}

function disposeSwal(instance) {
  // Unset this.params so GC will dispose it (#1569)
  delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)

  delete globalState.keydownHandler;
  delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)

  unsetWeakMaps(privateProps);
  unsetWeakMaps(privateMethods);
}

function close(resolveValue) {
  var popup = getPopup();

  if (!popup) {
    return;
  }

  var innerParams = privateProps.innerParams.get(this);

  if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
    return;
  }

  var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
  removeClass(popup, innerParams.showClass.popup);
  addClass(popup, innerParams.hideClass.popup);
  var backdrop = getContainer();
  removeClass(backdrop, innerParams.showClass.backdrop);
  addClass(backdrop, innerParams.hideClass.backdrop);
  handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise

  swalPromiseResolve(resolveValue || {});
}

var handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {
  var container = getContainer(); // If animation is supported, animate

  var animationIsSupported = animationEndEvent && hasCssAnimation(popup);
  var onClose = innerParams.onClose,
      onAfterClose = innerParams.onAfterClose;

  if (onClose !== null && typeof onClose === 'function') {
    onClose(popup);
  }

  if (animationIsSupported) {
    animatePopup(instance, popup, container, onAfterClose);
  } else {
    // Otherwise, remove immediately
    removePopupAndResetState(instance, container, isToast(), onAfterClose);
  }
};

var animatePopup = function animatePopup(instance, popup, container, onAfterClose) {
  globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), onAfterClose);
  popup.addEventListener(animationEndEvent, function (e) {
    if (e.target === popup) {
      globalState.swalCloseEventFinishedCallback();
      delete globalState.swalCloseEventFinishedCallback;
    }
  });
};

var unsetWeakMaps = function unsetWeakMaps(obj) {
  for (var i in obj) {
    obj[i] = new WeakMap();
  }
};

var triggerOnAfterCloseAndDispose = function triggerOnAfterCloseAndDispose(instance, onAfterClose) {
  setTimeout(function () {
    if (onAfterClose !== null && typeof onAfterClose === 'function') {
      onAfterClose();
    }

    if (!getPopup()) {
      disposeSwal(instance);
    }
  });
};

function setButtonsDisabled(instance, buttons, disabled) {
  var domCache = privateProps.domCache.get(instance);
  buttons.forEach(function (button) {
    domCache[button].disabled = disabled;
  });
}

function setInputDisabled(input, disabled) {
  if (!input) {
    return false;
  }

  if (input.type === 'radio') {
    var radiosContainer = input.parentNode.parentNode;
    var radios = radiosContainer.querySelectorAll('input');

    for (var i = 0; i < radios.length; i++) {
      radios[i].disabled = disabled;
    }
  } else {
    input.disabled = disabled;
  }
}

function enableButtons() {
  setButtonsDisabled(this, ['confirmButton', 'cancelButton'], false);
}
function disableButtons() {
  setButtonsDisabled(this, ['confirmButton', 'cancelButton'], true);
}
function enableInput() {
  return setInputDisabled(this.getInput(), false);
}
function disableInput() {
  return setInputDisabled(this.getInput(), true);
}

function showValidationMessage(error) {
  var domCache = privateProps.domCache.get(this);
  domCache.validationMessage.innerHTML = error;
  var popupComputedStyle = window.getComputedStyle(domCache.popup);
  domCache.validationMessage.style.marginLeft = "-".concat(popupComputedStyle.getPropertyValue('padding-left'));
  domCache.validationMessage.style.marginRight = "-".concat(popupComputedStyle.getPropertyValue('padding-right'));
  show(domCache.validationMessage);
  var input = this.getInput();

  if (input) {
    input.setAttribute('aria-invalid', true);
    input.setAttribute('aria-describedBy', swalClasses['validation-message']);
    focusInput(input);
    addClass(input, swalClasses.inputerror);
  }
} // Hide block with validation message

function resetValidationMessage$1() {
  var domCache = privateProps.domCache.get(this);

  if (domCache.validationMessage) {
    hide(domCache.validationMessage);
  }

  var input = this.getInput();

  if (input) {
    input.removeAttribute('aria-invalid');
    input.removeAttribute('aria-describedBy');
    removeClass(input, swalClasses.inputerror);
  }
}

function getProgressSteps$1() {
  var domCache = privateProps.domCache.get(this);
  return domCache.progressSteps;
}

var Timer =
/*#__PURE__*/
function () {
  function Timer(callback, delay) {
    _classCallCheck(this, Timer);

    this.callback = callback;
    this.remaining = delay;
    this.running = false;
    this.start();
  }

  _createClass(Timer, [{
    key: "start",
    value: function start() {
      if (!this.running) {
        this.running = true;
        this.started = new Date();
        this.id = setTimeout(this.callback, this.remaining);
      }

      return this.remaining;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.running) {
        this.running = false;
        clearTimeout(this.id);
        this.remaining -= new Date() - this.started;
      }

      return this.remaining;
    }
  }, {
    key: "increase",
    value: function increase(n) {
      var running = this.running;

      if (running) {
        this.stop();
      }

      this.remaining += n;

      if (running) {
        this.start();
      }

      return this.remaining;
    }
  }, {
    key: "getTimerLeft",
    value: function getTimerLeft() {
      if (this.running) {
        this.stop();
        this.start();
      }

      return this.remaining;
    }
  }, {
    key: "isRunning",
    value: function isRunning() {
      return this.running;
    }
  }]);

  return Timer;
}();

var defaultInputValidators = {
  email: function email(string, validationMessage) {
    return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');
  },
  url: function url(string, validationMessage) {
    // taken from https://stackoverflow.com/a/3809435 with a small change from #1306
    return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');
  }
};

function setDefaultInputValidators(params) {
  // Use default `inputValidator` for supported input types if not provided
  if (!params.inputValidator) {
    Object.keys(defaultInputValidators).forEach(function (key) {
      if (params.input === key) {
        params.inputValidator = defaultInputValidators[key];
      }
    });
  }
}

function validateCustomTargetElement(params) {
  // Determine if the custom target element is valid
  if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {
    warn('Target parameter is not valid, defaulting to "body"');
    params.target = 'body';
  }
}
/**
 * Set type, text and actions on popup
 *
 * @param params
 * @returns {boolean}
 */


function setParameters(params) {
  setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm

  if (params.showLoaderOnConfirm && !params.preConfirm) {
    warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\n' + 'https://sweetalert2.github.io/#ajax-request');
  } // params.animation will be actually used in renderPopup.js
  // but in case when params.animation is a function, we need to call that function
  // before popup (re)initialization, so it'll be possible to check Swal.isVisible()
  // inside the params.animation function


  params.animation = callIfFunction(params.animation);
  validateCustomTargetElement(params); // Replace newlines with <br> in title

  if (typeof params.title === 'string') {
    params.title = params.title.split('\n').join('<br />');
  }

  init(params);
}

/**
 * Open popup, add necessary classes and styles, fix scrollbar
 *
 * @param {Array} params
 */

var openPopup = function openPopup(params) {
  var container = getContainer();
  var popup = getPopup();

  if (typeof params.onBeforeOpen === 'function') {
    params.onBeforeOpen(popup);
  }

  addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'

  setScrollingVisibility(container, popup);

  if (isModal()) {
    fixScrollContainer(container, params.scrollbarPadding);
  }

  if (!isToast() && !globalState.previousActiveElement) {
    globalState.previousActiveElement = document.activeElement;
  }

  if (typeof params.onOpen === 'function') {
    setTimeout(function () {
      return params.onOpen(popup);
    });
  }
};

function swalOpenAnimationFinished(event) {
  var popup = getPopup();

  if (event.target !== popup) {
    return;
  }

  var container = getContainer();
  popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
  container.style.overflowY = 'auto';
}

var setScrollingVisibility = function setScrollingVisibility(container, popup) {
  if (animationEndEvent && hasCssAnimation(popup)) {
    container.style.overflowY = 'hidden';
    popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
  } else {
    container.style.overflowY = 'auto';
  }
};

var fixScrollContainer = function fixScrollContainer(container, scrollbarPadding) {
  iOSfix();
  IEfix();
  setAriaHidden();

  if (scrollbarPadding) {
    fixScrollbar();
  } // sweetalert2/issues/1247


  setTimeout(function () {
    container.scrollTop = 0;
  });
};

var addClasses$1 = function addClasses(container, popup, params) {
  addClass(container, params.showClass.backdrop);
  show(popup); // Animate popup right after showing it

  addClass(popup, params.showClass.popup);
  addClass([document.documentElement, document.body], swalClasses.shown);

  if (params.heightAuto && params.backdrop && !params.toast) {
    addClass([document.documentElement, document.body], swalClasses['height-auto']);
  }
};

var handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {
  if (params.input === 'select' || params.input === 'radio') {
    handleInputOptions(instance, params);
  } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && isPromise(params.inputValue)) {
    handleInputValue(instance, params);
  }
};
var getInputValue = function getInputValue(instance, innerParams) {
  var input = instance.getInput();

  if (!input) {
    return null;
  }

  switch (innerParams.input) {
    case 'checkbox':
      return getCheckboxValue(input);

    case 'radio':
      return getRadioValue(input);

    case 'file':
      return getFileValue(input);

    default:
      return innerParams.inputAutoTrim ? input.value.trim() : input.value;
  }
};

var getCheckboxValue = function getCheckboxValue(input) {
  return input.checked ? 1 : 0;
};

var getRadioValue = function getRadioValue(input) {
  return input.checked ? input.value : null;
};

var getFileValue = function getFileValue(input) {
  return input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;
};

var handleInputOptions = function handleInputOptions(instance, params) {
  var content = getContent();

  var processInputOptions = function processInputOptions(inputOptions) {
    return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);
  };

  if (isPromise(params.inputOptions)) {
    showLoading();
    params.inputOptions.then(function (inputOptions) {
      instance.hideLoading();
      processInputOptions(inputOptions);
    });
  } else if (_typeof(params.inputOptions) === 'object') {
    processInputOptions(params.inputOptions);
  } else {
    error("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(_typeof(params.inputOptions)));
  }
};

var handleInputValue = function handleInputValue(instance, params) {
  var input = instance.getInput();
  hide(input);
  params.inputValue.then(function (inputValue) {
    input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : "".concat(inputValue);
    show(input);
    input.focus();
    instance.hideLoading();
  })["catch"](function (err) {
    error("Error in inputValue promise: ".concat(err));
    input.value = '';
    show(input);
    input.focus();
    instance.hideLoading();
  });
};

var populateInputOptions = {
  select: function select(content, inputOptions, params) {
    var select = getChildByClass(content, swalClasses.select);
    inputOptions.forEach(function (inputOption) {
      var optionValue = inputOption[0];
      var optionLabel = inputOption[1];
      var option = document.createElement('option');
      option.value = optionValue;
      option.innerHTML = optionLabel;

      if (params.inputValue.toString() === optionValue.toString()) {
        option.selected = true;
      }

      select.appendChild(option);
    });
    select.focus();
  },
  radio: function radio(content, inputOptions, params) {
    var radio = getChildByClass(content, swalClasses.radio);
    inputOptions.forEach(function (inputOption) {
      var radioValue = inputOption[0];
      var radioLabel = inputOption[1];
      var radioInput = document.createElement('input');
      var radioLabelElement = document.createElement('label');
      radioInput.type = 'radio';
      radioInput.name = swalClasses.radio;
      radioInput.value = radioValue;

      if (params.inputValue.toString() === radioValue.toString()) {
        radioInput.checked = true;
      }

      var label = document.createElement('span');
      label.innerHTML = radioLabel;
      label.className = swalClasses.label;
      radioLabelElement.appendChild(radioInput);
      radioLabelElement.appendChild(label);
      radio.appendChild(radioLabelElement);
    });
    var radios = radio.querySelectorAll('input');

    if (radios.length) {
      radios[0].focus();
    }
  }
};
/**
 * Converts `inputOptions` into an array of `[value, label]`s
 * @param inputOptions
 */

var formatInputOptions = function formatInputOptions(inputOptions) {
  var result = [];

  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {
    inputOptions.forEach(function (value, key) {
      result.push([key, value]);
    });
  } else {
    Object.keys(inputOptions).forEach(function (key) {
      result.push([key, inputOptions[key]]);
    });
  }

  return result;
};

var handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {
  instance.disableButtons();

  if (innerParams.input) {
    handleConfirmWithInput(instance, innerParams);
  } else {
    confirm(instance, innerParams, true);
  }
};
var handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {
  instance.disableButtons();
  dismissWith(DismissReason.cancel);
};

var handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {
  var inputValue = getInputValue(instance, innerParams);

  if (innerParams.inputValidator) {
    instance.disableInput();
    var validationPromise = Promise.resolve().then(function () {
      return innerParams.inputValidator(inputValue, innerParams.validationMessage);
    });
    validationPromise.then(function (validationMessage) {
      instance.enableButtons();
      instance.enableInput();

      if (validationMessage) {
        instance.showValidationMessage(validationMessage);
      } else {
        confirm(instance, innerParams, inputValue);
      }
    });
  } else if (!instance.getInput().checkValidity()) {
    instance.enableButtons();
    instance.showValidationMessage(innerParams.validationMessage);
  } else {
    confirm(instance, innerParams, inputValue);
  }
};

var succeedWith = function succeedWith(instance, value) {
  instance.closePopup({
    value: value
  });
};

var confirm = function confirm(instance, innerParams, value) {
  if (innerParams.showLoaderOnConfirm) {
    showLoading(); // TODO: make showLoading an *instance* method
  }

  if (innerParams.preConfirm) {
    instance.resetValidationMessage();
    var preConfirmPromise = Promise.resolve().then(function () {
      return innerParams.preConfirm(value, innerParams.validationMessage);
    });
    preConfirmPromise.then(function (preConfirmValue) {
      if (isVisible(getValidationMessage()) || preConfirmValue === false) {
        instance.hideLoading();
      } else {
        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
      }
    });
  } else {
    succeedWith(instance, value);
  }
};

var addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {
  if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
      capture: globalState.keydownListenerCapture
    });
    globalState.keydownHandlerAdded = false;
  }

  if (!innerParams.toast) {
    globalState.keydownHandler = function (e) {
      return keydownHandler(instance, e, innerParams, dismissWith);
    };

    globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
    globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
    globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
      capture: globalState.keydownListenerCapture
    });
    globalState.keydownHandlerAdded = true;
  }
}; // Focus handling

var setFocus = function setFocus(innerParams, index, increment) {
  var focusableElements = getFocusableElements(); // search for visible elements and select the next possible match

  for (var i = 0; i < focusableElements.length; i++) {
    index = index + increment; // rollover to first item

    if (index === focusableElements.length) {
      index = 0; // go to last item
    } else if (index === -1) {
      index = focusableElements.length - 1;
    }

    return focusableElements[index].focus();
  } // no visible focusable elements, focus the popup


  getPopup().focus();
};
var arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11
];
var escKeys = ['Escape', 'Esc' // IE11
];

var keydownHandler = function keydownHandler(instance, e, innerParams, dismissWith) {
  if (innerParams.stopKeydownPropagation) {
    e.stopPropagation();
  } // ENTER


  if (e.key === 'Enter') {
    handleEnter(instance, e, innerParams); // TAB
  } else if (e.key === 'Tab') {
    handleTab(e, innerParams); // ARROWS - switch focus between buttons
  } else if (arrowKeys.indexOf(e.key) !== -1) {
    handleArrows(); // ESC
  } else if (escKeys.indexOf(e.key) !== -1) {
    handleEsc(e, innerParams, dismissWith);
  }
};

var handleEnter = function handleEnter(instance, e, innerParams) {
  // #720 #721
  if (e.isComposing) {
    return;
  }

  if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
    if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {
      return; // do not submit
    }

    clickConfirm();
    e.preventDefault();
  }
};

var handleTab = function handleTab(e, innerParams) {
  var targetElement = e.target;
  var focusableElements = getFocusableElements();
  var btnIndex = -1;

  for (var i = 0; i < focusableElements.length; i++) {
    if (targetElement === focusableElements[i]) {
      btnIndex = i;
      break;
    }
  }

  if (!e.shiftKey) {
    // Cycle to the next button
    setFocus(innerParams, btnIndex, 1);
  } else {
    // Cycle to the prev button
    setFocus(innerParams, btnIndex, -1);
  }

  e.stopPropagation();
  e.preventDefault();
};

var handleArrows = function handleArrows() {
  var confirmButton = getConfirmButton();
  var cancelButton = getCancelButton(); // focus Cancel button if Confirm button is currently focused

  if (document.activeElement === confirmButton && isVisible(cancelButton)) {
    cancelButton.focus(); // and vice versa
  } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {
    confirmButton.focus();
  }
};

var handleEsc = function handleEsc(e, innerParams, dismissWith) {
  if (callIfFunction(innerParams.allowEscapeKey)) {
    e.preventDefault();
    dismissWith(DismissReason.esc);
  }
};

var handlePopupClick = function handlePopupClick(domCache, innerParams, dismissWith) {
  if (innerParams.toast) {
    handleToastClick(domCache, innerParams, dismissWith);
  } else {
    // Ignore click events that had mousedown on the popup but mouseup on the container
    // This can happen when the user drags a slider
    handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup

    handleContainerMousedown(domCache);
    handleModalClick(domCache, innerParams, dismissWith);
  }
};

var handleToastClick = function handleToastClick(domCache, innerParams, dismissWith) {
  // Closing toast by internal click
  domCache.popup.onclick = function () {
    if (innerParams.showConfirmButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {
      return;
    }

    dismissWith(DismissReason.close);
  };
};

var ignoreOutsideClick = false;

var handleModalMousedown = function handleModalMousedown(domCache) {
  domCache.popup.onmousedown = function () {
    domCache.container.onmouseup = function (e) {
      domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't
      // have any other direct children aside of the popup

      if (e.target === domCache.container) {
        ignoreOutsideClick = true;
      }
    };
  };
};

var handleContainerMousedown = function handleContainerMousedown(domCache) {
  domCache.container.onmousedown = function () {
    domCache.popup.onmouseup = function (e) {
      domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup

      if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
        ignoreOutsideClick = true;
      }
    };
  };
};

var handleModalClick = function handleModalClick(domCache, innerParams, dismissWith) {
  domCache.container.onclick = function (e) {
    if (ignoreOutsideClick) {
      ignoreOutsideClick = false;
      return;
    }

    if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
      dismissWith(DismissReason.backdrop);
    }
  };
};

function _main(userParams) {
  showWarningsForParams(userParams); // Check if there is another Swal closing

  if (getPopup() && globalState.swalCloseEventFinishedCallback) {
    globalState.swalCloseEventFinishedCallback();
    delete globalState.swalCloseEventFinishedCallback;
  } // Check if there is a swal disposal defer timer


  if (globalState.deferDisposalTimer) {
    clearTimeout(globalState.deferDisposalTimer);
    delete globalState.deferDisposalTimer;
  }

  var innerParams = prepareParams(userParams);
  setParameters(innerParams);
  Object.freeze(innerParams); // clear the previous timer

  if (globalState.timeout) {
    globalState.timeout.stop();
    delete globalState.timeout;
  } // clear the restore focus timeout


  clearTimeout(globalState.restoreFocusTimeout);
  var domCache = populateDomCache(this);
  render(this, innerParams);
  privateProps.innerParams.set(this, innerParams);
  return swalPromise(this, domCache, innerParams);
}

var prepareParams = function prepareParams(userParams) {
  var showClass = _extends({}, defaultParams.showClass, userParams.showClass);

  var hideClass = _extends({}, defaultParams.hideClass, userParams.hideClass);

  var params = _extends({}, defaultParams, userParams);

  params.showClass = showClass;
  params.hideClass = hideClass; // @deprecated

  if (userParams.animation === false) {
    params.showClass = {
      popup: '',
      backdrop: 'swal2-backdrop-show swal2-noanimation'
    };
    params.hideClass = {};
  }

  return params;
};

var swalPromise = function swalPromise(instance, domCache, innerParams) {
  return new Promise(function (resolve) {
    // functions to handle all closings/dismissals
    var dismissWith = function dismissWith(dismiss) {
      instance.closePopup({
        dismiss: dismiss
      });
    };

    privateMethods.swalPromiseResolve.set(instance, resolve);
    setupTimer(globalState, innerParams, dismissWith);

    domCache.confirmButton.onclick = function () {
      return handleConfirmButtonClick(instance, innerParams);
    };

    domCache.cancelButton.onclick = function () {
      return handleCancelButtonClick(instance, dismissWith);
    };

    domCache.closeButton.onclick = function () {
      return dismissWith(DismissReason.close);
    };

    handlePopupClick(domCache, innerParams, dismissWith);
    addKeydownHandler(instance, globalState, innerParams, dismissWith);

    if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {
      addClass(document.body, swalClasses['toast-column']);
    } else {
      removeClass(document.body, swalClasses['toast-column']);
    }

    handleInputOptionsAndValue(instance, innerParams);
    openPopup(innerParams);
    initFocus(domCache, innerParams); // Scroll container to top on open (#1247)

    domCache.container.scrollTop = 0;
  });
};

var populateDomCache = function populateDomCache(instance) {
  var domCache = {
    popup: getPopup(),
    container: getContainer(),
    content: getContent(),
    actions: getActions(),
    confirmButton: getConfirmButton(),
    cancelButton: getCancelButton(),
    closeButton: getCloseButton(),
    validationMessage: getValidationMessage(),
    progressSteps: getProgressSteps()
  };
  privateProps.domCache.set(instance, domCache);
  return domCache;
};

var setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {
  var timerProgressBar = getTimerProgressBar();
  hide(timerProgressBar);

  if (innerParams.timer) {
    globalState$$1.timeout = new Timer(function () {
      dismissWith('timer');
      delete globalState$$1.timeout;
    }, innerParams.timer);

    if (innerParams.timerProgressBar) {
      show(timerProgressBar);
      setTimeout(function () {
        animateTimerProgressBar(innerParams.timer);
      });
    }
  }
};

var initFocus = function initFocus(domCache, innerParams) {
  if (innerParams.toast) {
    return;
  }

  if (!callIfFunction(innerParams.allowEnterKey)) {
    return blurActiveElement();
  }

  if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
    return domCache.cancelButton.focus();
  }

  if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
    return domCache.confirmButton.focus();
  }

  setFocus(innerParams, -1, 1);
};

var blurActiveElement = function blurActiveElement() {
  if (document.activeElement && typeof document.activeElement.blur === 'function') {
    document.activeElement.blur();
  }
};

/**
 * Updates popup parameters.
 */

function update(params) {
  var popup = getPopup();
  var innerParams = privateProps.innerParams.get(this);

  if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
    return warn("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
  }

  var validUpdatableParams = {}; // assign valid params from `params` to `defaults`

  Object.keys(params).forEach(function (param) {
    if (Swal.isUpdatableParameter(param)) {
      validUpdatableParams[param] = params[param];
    } else {
      warn("Invalid parameter to update: \"".concat(param, "\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js"));
    }
  });

  var updatedParams = _extends({}, innerParams, validUpdatableParams);

  render(this, updatedParams);
  privateProps.innerParams.set(this, updatedParams);
  Object.defineProperties(this, {
    params: {
      value: _extends({}, this.params, params),
      writable: false,
      enumerable: true
    }
  });
}



var instanceMethods = Object.freeze({
	hideLoading: hideLoading,
	disableLoading: hideLoading,
	getInput: getInput$1,
	close: close,
	closePopup: close,
	closeModal: close,
	closeToast: close,
	enableButtons: enableButtons,
	disableButtons: disableButtons,
	enableInput: enableInput,
	disableInput: disableInput,
	showValidationMessage: showValidationMessage,
	resetValidationMessage: resetValidationMessage$1,
	getProgressSteps: getProgressSteps$1,
	_main: _main,
	update: update
});

var currentInstance; // SweetAlert constructor

function SweetAlert() {
  // Prevent run in Node env

  /* istanbul ignore if */
  if (typeof window === 'undefined') {
    return;
  } // Check for the existence of Promise

  /* istanbul ignore if */


  if (typeof Promise === 'undefined') {
    error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');
  }

  currentInstance = this;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var outerParams = Object.freeze(this.constructor.argsToParams(args));
  Object.defineProperties(this, {
    params: {
      value: outerParams,
      writable: false,
      enumerable: true,
      configurable: true
    }
  });

  var promise = this._main(this.params);

  privateProps.promise.set(this, promise);
} // `catch` cannot be the name of a module export, so we define our thenable methods here instead


SweetAlert.prototype.then = function (onFulfilled) {
  var promise = privateProps.promise.get(this);
  return promise.then(onFulfilled);
};

SweetAlert.prototype["finally"] = function (onFinally) {
  var promise = privateProps.promise.get(this);
  return promise["finally"](onFinally);
}; // Assign instance methods from src/instanceMethods/*.js to prototype


_extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor


_extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility


Object.keys(instanceMethods).forEach(function (key) {
  SweetAlert[key] = function () {
    if (currentInstance) {
      var _currentInstance;

      return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);
    }
  };
});
SweetAlert.DismissReason = DismissReason;
SweetAlert.version = '9.5.4';

var Swal = SweetAlert;
Swal["default"] = Swal;

return Swal;

})));
if (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}


/***/ })

/******/ });
//# sourceMappingURL=admin.min.js.map